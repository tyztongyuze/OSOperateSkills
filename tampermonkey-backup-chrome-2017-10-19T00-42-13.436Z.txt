{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"vipVideos_skipAd","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["https://www.youtube.com/*","http://*.dj92cc.com/*","http://*.yinyuetai.com/*"],"orig_includes":["http*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970020},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/8561-vipvideos-skipad/code/vipVideos_skipAd.user.js","uuid":"04b9ddae-b838-4c53-b22e-c010af953efc","source":""},{"name":"iZhihu","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_matches":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970028},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/350-izhihu/code/iZhihu.user.js","uuid":"d992b732-768f-4077-aa5d-fa0de1b835d9","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBpWmhpaHUKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vdW5vZ3ovaXpoaWh1Ci8vIEB2ZXJzaW9uICAgICAgMi4xMy4zCi8vIEBkZXNjcmlwdGlvbiAg55+l5LmO5o+S5Lu2Ci8vIEBtYXRjaCAgICAgICAgaHR0cDovL3d3dy56aGlodS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly93d3cuemhpaHUuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy56aGlodS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vd3d3LnpoaWh1LmNvbS8qCi8vIEByZXF1aXJlICAgICAgaHR0cDovL2Nkbi5zdGF0aWNmaWxlLm9yZy9qcXVlcnkvMS44LjIvanF1ZXJ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvaUNoZWNrLzEuMC4xL2ljaGVjay5taW4uanMKLy8gQHJlc291cmNlICAgICBqcVVJX0NTUyBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2lDaGVjay8xLjAuMS9za2lucy9zcXVhcmUvYmx1ZS5jc3MKLy8gQHJlc291cmNlICAgICB1aS1iZ19pY2hlY2stc2tpbl9zcXVhcmVfYmx1ZSBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2lDaGVjay8xLjAuMS9za2lucy9zcXVhcmUvYmx1ZS5wbmcKLy8gQHJlc291cmNlICAgICB1aS1iZ19pY2hlY2stc2tpbl9zcXVhcmVfYmx1ZTJ4IGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvaUNoZWNrLzEuMC4xL3NraW5zL3NxdWFyZS9ibHVlQDJ4LnBuZwovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvanF1ZXJ5dWkvMS4xMC40L2pxdWVyeS11aS5taW4uanMKLy8gQHJlcXVpcmUgICAgICBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3B1cmwvMi4zLjEvcHVybC5taW4uanMKLy8gQHJlcXVpcmUgICAgICBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3VuZGVyc2NvcmUuanMvMS42LjAvdW5kZXJzY29yZS1taW4uanMKLy8gQGdyYW50ICAgICAgICBHTV94bWxIdHRwUmVxdWVzdAovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VUZXh0Ci8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VVUkwKLy8gQGljb24gICAgICAgICBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdW5vZ3ovaXpoaWh1L2RldmVsb3AvbWlzYy94cGktY29uZmlnL2ljb242NC5wbmcKLy8gQGNvcHlyaWdodCAgICAyMDE1KywgQOmSouebhemDreWtkCBA5YiY5YuHIEDloqjno4oKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIganFVSV9Dc3NTcmMgPSBHTV9nZXRSZXNvdXJjZVRleHQoImpxVUlfQ1NTIikKR01fYWRkU3R5bGUgKGpxVUlfQ3NzU3JjLnJlcGxhY2UoJ3VybChibHVlJywgJ3VybChodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2lDaGVjay8xLjAuMS9za2lucy9zcXVhcmUvYmx1ZScpKTsKCnZhciB2ZXJzaW9uPScyLjEzLjMnOwp2YXIgdXBkYXRlRGF0ZT0nMjAxNi00LTI1JzsKCmlmICggdHlwZW9mIHVuc2FmZVdpbmRvdyA9PT0gInVuZGVmaW5lZCIpIHsKICAgIHVuc2FmZVdpbmRvdyAgICA9ICggZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBkdW1teUVsZW0gICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICAgICAgICBkdW1teUVsZW0ub25jbGljaz1mdW5jdGlvbigpe3JldHVybiB3aW5kb3c7fTsKICAgICAgICByZXR1cm4gZHVtbXlFbGVtLm9uY2xpY2sgKCk7CiAgICB9ICkgKCk7Cn0KCi8v5Li75YWl5Y+jCi8vJChmdW5jdGlvbiBtYWluKCl7CgoKLyoqCiAqIEBjbGFzcyBVdGlscyDovoXliqnnsbsKICovCmZ1bmN0aW9uIHV0aWxzKCl7Cn07Cgp2YXIgY2ZnRGVmYXVsdCA9IHsKICAgICdjb21tZW50X3NpZGViYXInOiB0cnVlCiAgLCAnYW5zd2VyX29yZGVyQnlUaW1lJzogZmFsc2UKICAsICdBdXRob3JMaXN0JzpmYWxzZQogICwgJ1Nob3dDb21tZW50Jzp0cnVlCiAgLCAnSG9tZUxheW91dCc6ZmFsc2UKICAsICdRdWlja0Zhdm8nOnRydWUKICAsICdRdWlja0Zhdm9QaW5uZWQnOnt9CiAgLCAnQXV0aG9yUmVhcic6ZmFsc2UKICAsICdIb21lTm90aSc6ZmFsc2UKICAsICdRdWlja0Jsb2NrJzpmYWxzZQogICwgJ05vdGk3Jzp0cnVlCiAgLCAnSG9tZUZlZWRzQ29sdW1ucyc6ZmFsc2UKICAsICdSaWdodENvbW1lbnRfQXV0b1Njcm9sbFBhZ2VXaGVuQ2xvc2luZyc6dHJ1ZQogICwgJ1RvcE5hdkF1dG9Gb2xkJzpmYWxzZQp9OwogIAovKioKICog6K+75Y+W6YWN572uCiAqLwp1dGlscy5nZXRDZmcgPSBmdW5jdGlvbihrZXkpewogIGlmKCFrZXkpcmV0dXJuIGZhbHNlOwogIHZhciBjZmcgPSAkLmV4dGVuZChjZmdEZWZhdWx0LCB0aGlzLmdldFZhbHVlKCdpemhpaHUnLGNmZ0RlZmF1bHQpKTsKICByZXR1cm4ga2V5ID8gY2ZnW2tleV0gOiBjZmc7Cn07Cgp1dGlscy5zZXRDZmcgPSBmdW5jdGlvbihrZXksdmFsdWUpewogIGlmKCFrZXkpcmV0dXJuOwogIHZhciBjZmcgPSAkLmV4dGVuZChjZmdEZWZhdWx0LCB0aGlzLmdldFZhbHVlKCdpemhpaHUnLGNmZ0RlZmF1bHQpKTsKICBjZmdba2V5XT12YWx1ZTsKICB0aGlzLnNldFZhbHVlKCdpemhpaHUnLGNmZyk7Cn07CgovKioKICog6K+75Y+W5a2Y5YKoCiAqLwp1dGlscy5nZXRWYWx1ZSA9IGZ1bmN0aW9uKGtleSwgZGVmYXVsdFZhbHVlKXsKICAgIHZhciB2PXVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2Vba2V5XTsKICAgIGlmKHYpCiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uodik7CiAgICBlbHNlCiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKfTsKCi8qKgogKiDlhpnlhaXlrZjlgqgKICovCnV0aWxzLnNldFZhbHVlID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CiAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZVtrZXldID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpOwp9OwoKLyoqCiAqIOWIoOmZpOWtmOWCqAogKi8KdXRpbHMuZGVsZXRlVmFsdWUgPSBmdW5jdGlvbihrZXkpewogIHJldHVybiBkZWxldGUgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZVtrZXldOwp9OwoKdXRpbHMudHJhbnNmZXJPbGRDZmc9ZnVuY3Rpb24oKXsKICAgIHZhciBvbGRIb21lTGF5b3V0ID0gdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZVsnaXpoX0hvbWVMYXlvdXQnXQogICAgICAsIG9sZEF1dGhvckxpc3QgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfQXV0aG9yTGlzdCddCiAgICAgICwgb2xkU2hvd0NvbW1lbnQgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfU2hvd0NvbW1lbnQnXQogICAgICAsIG9sZFF1aWNrRmF2byA9IHVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2VbJ2l6aF9RdWlja0Zhdm8nXQogICAgICAsIG9sZEF1dGhvclJlYXIgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfQXV0aG9yUmVhciddCiAgICAgICwgb2xkSG9tZU5vdGkgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfSG9tZU5vdGknXQogICAgOwogICAgaWYob2xkSG9tZUxheW91dCl7CiAgICAgICAgaXpoSG9tZUxheW91dD1vbGRIb21lTGF5b3V0OwogICAgICAgIHVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaXpoX0hvbWVMYXlvdXQnKTsKICAgICAgICB0aGlzLnNldENmZygnSG9tZUxheW91dCcsaXpoSG9tZUxheW91dCk7CiAgICB9CiAgICBpZihvbGRBdXRob3JMaXN0KXsKICAgICAgICBpemhBdXRob3JMaXN0PW9sZEF1dGhvckxpc3Q7CiAgICAgICAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpemhfQXV0aG9yTGlzdCcpOwogICAgICAgIHRoaXMuc2V0Q2ZnKCdBdXRob3JMaXN0JyxpemhBdXRob3JMaXN0KTsKICAgIH0KICAgIGlmKG9sZFNob3dDb21tZW50KXsKICAgICAgICBpemhSaWdodENvbW1lbnQ9b2xkU2hvd0NvbW1lbnQ7CiAgICAgICAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpemhfU2hvd0NvbW1lbnQnKTsKICAgICAgICB0aGlzLnNldENmZygnU2hvd0NvbW1lbnQnLGl6aFJpZ2h0Q29tbWVudCk7CiAgICB9CiAgICBpZihvbGRRdWlja0Zhdm8pewogICAgICAgIGl6aFF1aWNrRmF2bz1vbGRRdWlja0Zhdm87CiAgICAgICAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpemhfUXVpY2tGYXZvJyk7CiAgICAgICAgdGhpcy5zZXRDZmcoJ1F1aWNrRmF2bycsaXpoUXVpY2tGYXZvKTsKICAgIH0KICAgIGlmKG9sZEF1dGhvclJlYXIpewogICAgICAgIGl6aEF1dGhvclJlYXI9b2xkQXV0aG9yUmVhcjsKICAgICAgICB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2l6aF9BdXRob3JSZWFyJyk7CiAgICAgICAgdGhpcy5zZXRDZmcoJ0F1dGhvclJlYXInLGl6aEF1dGhvclJlYXIpOwogICAgfQogICAgaWYob2xkSG9tZU5vdGkpewogICAgICAgIGl6aEhvbWVOb3RpPW9sZEhvbWVOb3RpOwogICAgICAgIHVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaXpoX0hvbWVOb3RpJyk7CiAgICAgICAgdGhpcy5zZXRDZmcoJ0hvbWVOb3RpJyxpemhIb21lTm90aSk7CiAgICB9Cgp9OwoKCi8qKgogKiBAbWV0aG9kIGZvcm1hdFN0cgogKgogKiDmoLzlvI/ljJblrZfnrKbkuLLmqKHniYgs5pSv5oyBMuenjeagvOW8jzoKICoKICogICAgIGZvcm1hdFN0cigiaSBjYW4gc3BlYWsge2xhbmd1YWdlfSBzaW5jZSBpIHdhcyB7YWdlfSIse2xhbmd1YWdlOidqYXZhc2NyaXB0JyxhZ2U6MTB9KTsKICogICAgIGZvcm1hdFN0cigiaSBjYW4gc3BlYWsgezB9IHNpbmNlIGkgd2FzIHsxfSIsJ2phdmFzY3JpcHQnLDEwKTsKICoKICog5aaC5p6c5LiN5biM5pyb6KKr6L2s5LmJLOWImeeUqOS4pOS4quaLrOWPtyzlpoI6IGBmb3JtYXRTdHIoImkgY2FuIHNwZWFrIHswfSBzaW5jZSBpIHdhcyB7ezF9IiwnamF2YXNjcmlwdCcsMTApO2AKICoKICovCnV0aWxzLmZvcm1hdFN0ciA9IGZ1bmN0aW9uKHRwbCxvYmopewogIG9iaiA9IHR5cGVvZiBvYmogPT09ICdvYmplY3QnID8gb2JqIDogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICByZXR1cm4gdHBsLnJlcGxhY2UoL1x7XHt8XH1cfXxceyhcdyspXH0vZywgZnVuY3Rpb24gKG0sIG4pewogICAgaWYgKG0gPT0gInt7IikgeyByZXR1cm4gInsiOyB9CiAgICBpZiAobSA9PSAifX0iKSB7IHJldHVybiAifSI7IH0KICAgIHJldHVybiBvYmpbbl07CiAgfSk7Cn07Cgp1dGlscy5nZXRQYXJhbUluUXVlcnk9ZnVuY3Rpb24ocXVlcnlTdHIscGFyYW1OYW1lKXsKICAgIHZhciBwYXJhbT1wYXJhbU5hbWUrJz0nCiAgICAgICwgc3RhcnQ9cXVlcnlTdHIuaW5kZXhPZihwYXJhbSkrcGFyYW0ubGVuZ3RoCiAgICAgICwgZW5kPXF1ZXJ5U3RyLmluZGV4T2YoJyYnLHN0YXJ0KTsKICAgIHJldHVybiBlbmQ8c3RhcnQ/cXVlcnlTdHIuc3Vic3RyaW5nKHN0YXJ0KTpxdWVyeVN0ci5zdWJzdHJpbmcoc3RhcnQsZW5kKTsKfTsKCnV0aWxzLm9ic2VydmVET01BdHRyTW9kaWZpZWQgPSAoZnVuY3Rpb24oKXsKICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIsCiAgICAgICAgZXZlbnRMaXN0ZW5lclN1cHBvcnRlZCA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyOwoKICAgIHJldHVybiBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXsKICAgICAgICBpZiggTXV0YXRpb25PYnNlcnZlciApewogICAgICAgICAgICAvLyBkZWZpbmUgYSBuZXcgb2JzZXJ2ZXIKICAgICAgICAgICAgdmFyIG9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucywgb2JzZXJ2ZXIpewogICAgICAgICAgICAgICAgaWYoIG11dGF0aW9uc1swXS50eXBlID09ICdhdHRyaWJ1dGVzJyApCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobXV0YXRpb25zWzBdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9icy5vYnNlcnZlKCBvYmosIHsgYXR0cmlidXRlczp0cnVlIH0pOwogICAgICAgIH1lbHNlIGlmKCBldmVudExpc3RlbmVyU3VwcG9ydGVkICl7CiAgICAgICAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKCdET01BdHRyTW9kaWZpZWQnLCBjYWxsYmFjaywgZmFsc2UpOwogICAgICAgIH0KICAgIH0KfSkoKTsKCnV0aWxzLm9ic2VydmVET01Ob2RlQWRkZWQgPSAoZnVuY3Rpb24oKXsKICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIsCiAgICAgICAgZXZlbnRMaXN0ZW5lclN1cHBvcnRlZCA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyOwoKICAgIHJldHVybiBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXsKICAgICAgICBpZiggTXV0YXRpb25PYnNlcnZlciApewogICAgICAgICAgICAvLyBkZWZpbmUgYSBuZXcgb2JzZXJ2ZXIKICAgICAgICAgICAgdmFyIG9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucywgb2JzZXJ2ZXIpewogICAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtdXRhdGlvbik7CiAgICAgICAgICAgICAgICAgIH0pOyAgICAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9icy5vYnNlcnZlKCBvYmosIHsgY2hpbGRMaXN0OnRydWUgfSk7CiAgICAgICAgfWVsc2UgaWYoIGV2ZW50TGlzdGVuZXJTdXBwb3J0ZWQgKXsKICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU5vZGVJbnNlcnRlZCcsIGNhbGxiYWNrLCBmYWxzZSk7CiAgICAgICAgfQogICAgfQp9KSgpOwoKdXRpbHMuUmVnZXhTcmNQaWMgPSAvc3JjPSJbXHNcU10rPy5qcGciL2cKCi8vY29uc29sZS5sb2coKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7Cgp2YXIgJCA9IHdpbmRvdy4kOwp2YXIgXyA9IHRoaXMuXzsKdmFyIHB1cmwgPSB3aW5kb3cucHVybHx8JC51cmw7CgovL+S9v+eUqENhc3BlckpT55qE5qih5ouf55So5oi35pON5L2c77yaIGh0dHA6Ly9jYXNwZXJqcy5vcmcvYXBpLmh0bWwjY2xpZW50LXV0aWxzCi8vdmFyIGNsaWVudCA9IHdpbmRvdy5jcmVhdGUoKTsKCnZhciB1cmwgPSBwdXJsKCk7CnZhciBwYWdlID0gdXJsLnNlZ21lbnQoMSk7Cgp2YXIgcGFnZUlzPXt9CiAgLCAkd2luPSQod2luZG93KQogICwgX2RvYz13aW5kb3cuZG9jdW1lbnQKICAsICRib2R5PSQoX2RvYy5ib2R5KQogICwgX3BhdGg9d2luZG93LmZyYW1lRWxlbWVudD93aW5kb3cuZnJhbWVFbGVtZW50LnNyYy5yZXBsYWNlKC9odHRwcz86XC9cL3d3dy56aGlodS5jb20vLCcnKTp1cmwuZGF0YS5hdHRyWydwYXRoJ10KICAsIGNzcz0nJwogICwgJGg9JCgnaGVhZCcpCiAgLCAkcz0kKCc8c3R5bGU+JywgeyAndHlwZSc6ICd0ZXh0L2NzcycgfSkKICAsIGlQYXRoQW5zd2Vycz1fcGF0aC5pbmRleE9mKCcvYW5zd2VycycpCiAgLCBpUGF0aENvbGxlY3Rpb249X3BhdGguaW5kZXhPZignL2NvbGxlY3Rpb24nKQo7CnBhZ2VJcy5Ib21lPScvJz09X3BhdGg7CnBhZ2VJcy5BbnN3ZXI9MDxfcGF0aC5pbmRleE9mKCcvYW5zd2VyLycpOwpwYWdlSXMuUXVlc3Rpb249IXBhZ2VJcy5BbnN3ZXImJjA9PV9wYXRoLmluZGV4T2YoJy9xdWVzdGlvbi8nKTsKcGFnZUlzLkFuc3dlcnM9MDxpUGF0aEFuc3dlcnMmJl9wYXRoLnN1YnN0cihpUGF0aEFuc3dlcnMpPT0nL2Fuc3dlcnMnOwpwYWdlSXMuQ29sbGVjdGlvbj0wPT1pUGF0aENvbGxlY3Rpb247CnBhZ2VJcy5EZWJ1dHM9MD09X3BhdGguaW5kZXhPZignL2RlYnV0cy8nKTsKcGFnZUlzLk15Q29sbGVjdGlvbj0wPT1fcGF0aC5pbmRleE9mKCcvY29sbGVjdGlvbnMvbWluZScpOwpwYWdlSXMuU2V0dGluZ3NGaWx0ZXI9MD09X3BhdGguaW5kZXhPZignL3NldHRpbmdzL2ZpbHRlcicpCgp2YXIgaT0wCiAgLCAkdXNlcj0kKCcuenUtdG9wLW5hdi11c2VyaW5mbycpLy91c2VyX2F2YXRlcgogICwgej0kdXNlci5sZW5ndGg/JHVzZXIuYXR0cignaHJlZicpOicnCiAgLCAkYmFubmVyPSQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5maXJzdCgpCiAgLCAkbWFpbj0kKCdbcm9sZT1tYWluXScpLy9tYWluCiAgLCBjc3NfQXV0aG9yTGlzdEl0ZW1BPSdwYWRkaW5nOjAgMTBweCAwIDA7JwogICwgY3NzX0F1dGhvckxpc3RJdGVtQV9uYW1lPSdwYWRkaW5nOjAgNXB4OycKOwoKd2luZG93LmlaaGlodSA9IHsKICAgICR3aW46JHdpbgogICwgJGJvZHk6JGJvZHkKICAsICRtYWluOiRtYWluCiAgLCBjb25maWc6JC5leHRlbmQoY2ZnRGVmYXVsdCwgdXRpbHMuZ2V0VmFsdWUoJ2l6aGlodScsY2ZnRGVmYXVsdCkpCn07Cgp2YXIgaXpoSG9tZUxheW91dCA9IHdpbmRvdy5pWmhpaHUuY29uZmlnWydIb21lTGF5b3V0J10KICAsIGl6aEF1dGhvckxpc3QgPSB3aW5kb3cuaVpoaWh1LmNvbmZpZ1snQXV0aG9yTGlzdCddCiAgLCBpemhSaWdodENvbW1lbnQgPSB3aW5kb3cuaVpoaWh1LmNvbmZpZ1snU2hvd0NvbW1lbnQnXQogICwgaXpoUXVpY2tGYXZvID0gd2luZG93LmlaaGlodS5jb25maWdbJ1F1aWNrRmF2byddCiAgLCBpemhBdXRob3JSZWFyID0gd2luZG93LmlaaGlodS5jb25maWdbJ0F1dGhvclJlYXInXQogICwgaXpoSG9tZU5vdGkgPSB3aW5kb3cuaVpoaWh1LmNvbmZpZ1snSG9tZU5vdGknXQogICwgaXpoUXVpY2tCbG9jayA9IHdpbmRvdy5pWmhpaHUuY29uZmlnWydRdWlja0Jsb2NrJ10KICAsIGl6aFRvcE5hdkF1dG9Gb2xkID0gd2luZG93LmlaaGlodS5jb25maWdbJ1RvcE5hdkF1dG9Gb2xkJ10KOwoKdXRpbHMudHJhbnNmZXJPbGRDZmcoKTsKCiRib2R5LmF0dHIoewogICAgJ2l6aEhvbWVMYXlvdXQnIDogaXpoSG9tZUxheW91dD8nMSc6JycKICAsICdpemhBdXRob3JMaXN0JyA6IGl6aEF1dGhvckxpc3Q/JzEnOicnCiAgLCAnaXpoUmlnaHRDb21tZW50JyA6IGl6aFJpZ2h0Q29tbWVudD8nMSc6JycKICAsICdpemhRdWlja0Zhdm8nIDogaXpoUXVpY2tGYXZvPycxJzonJwogICwgJ2l6aEF1dGhvclJlYXInIDogaXpoQXV0aG9yUmVhcj8nMSc6JycKICAsICdpemhIb21lTm90aScgOiBpemhIb21lTm90aT8nMSc6JycKICAsICdpemhRdWlja0Jsb2NrJyA6IGl6aFF1aWNrQmxvY2s/JzEnOicnCiAgLCAnaXpoVG9wTmF2QXV0b0ZvbGQnIDogaXpoVG9wTmF2QXV0b0ZvbGQ/JzEnOicnCn0pOwoKdmFyIF9RdWlja0Jsb2NrID0gbmV3IFF1aWNrQmxvY2sod2luZG93LmlaaGlodSkKICAsIF9RdWlja0Zhdm8gPSBuZXcgUXVpY2tGYXZvKHdpbmRvdy5pWmhpaHUpCiAgLCBfQ29tbWVudCA9IG5ldyBDb21tZW50KHdpbmRvdy5pWmhpaHUpCiAgLCBfTm90aTcgPSBuZXcgTm90aTcod2luZG93LmlaaGlodSkKICAsIF9BbnN3ZXIgPSBuZXcgQW5zd2VyKHdpbmRvdy5pWmhpaHUpCiAgLCBfU2VhcmNoaW5nTGlzdCA9IG5ldyBTZWFyY2hpbmdMaXN0KHdpbmRvdy5pWmhpaHUpCiAgLCBfVG9wTmF2ID0gbmV3IFRvcE5hdih3aW5kb3cuaVpoaWh1KQo7Cgpjc3MrPVsnLnRfc2hvd2ZyYW1le3BhZGRpbmc6MTBweCAxMHB4IDEwcHggMTBweDtiYWNrZ3JvdW5kOiNmMGYwZjA7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2JveC1zaGFkb3c6MnB4IDVweCAxNXB4ICMzMzM7Ym9yZGVyLXJhZGl1czoxMHB4Oy1tb3otYm94LXNoYWRvdzoycHggNXB4IDE1cHggIzMzMzstbW96LWJvcmRlci1yYWRpdXM6MTBweDstd2Via2l0LWJveC1zaGFkb3c6MnB4IDVweCAxNXB4ICMzMzM7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjEwcHh9I2laaGlodV9ydGpkZGl2e3dpZHRoOjY1MHB4O2hlaWdodDo0MzdweH0jaVpoaWh1X3NldGRpdnt3aWR0aDo2MDBweDtoZWlnaHQyOjI5NXB4fS50X3NldGRpdntwYWRkaW5nLWJvdHRvbToxMHB4O2JhY2tncm91bmQ6I2ZjZmNmYzt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS50X3NldF90Yntmb250LWZhbWlseToiTHVjaWRhIFNhbnMgVW5pY29kZSIsIkx1Y2lkYSBHcmFuZGUiLFNhbnMtU2VyaWYgIWltcG9ydGFudDtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O3RleHQtc2hhZG93Om5vbmUgIWltcG9ydGFudDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UgIWltcG9ydGFudDttYXJnaW46MCAhaW1wb3J0YW50O2xpbmUtaGVpZ2h0OjEyMCV9LnRfc2V0X3RiIHRoZWFkIHRke2JhY2tncm91bmQ6IzAwODBjMDtjb2xvcjojZmZmO2JvcmRlcjpub25lICFpbXBvcnRhbnQ7cGFkZGluZzo0cHggOHB4IDRweCAhaW1wb3J0YW50O2JvcmRlci1yYWRpdXMtdG9wbGVmdDoxMHB4O2JvcmRlci1yYWRpdXMtdG9wcmlnaHQ6MTBweDstbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDoxMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDoxMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MTBweH0udF9zZXRfdGIgdGgsLnRfc2V0X3RiIHRke3BhZGRpbmc6OHB4O2JhY2tncm91bmQ6I2U4ZWRmZjtib3JkZXI6bm9uZSAhaW1wb3J0YW50O2JvcmRlci10b3A6MnB4IHNvbGlkICNmY2ZjZmMgIWltcG9ydGFudDtjb2xvcjojNjY5O2xpbmUtaGVpZ2h0OjEuMWVtICFpbXBvcnRhbnR9LnRfc2V0X3RiIHRkIGlucHV0LC50X3NldF90YiB0ZCB0ZXh0YXJlYXtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50fS50X3NldF90YiB0Ym9keSB0cjpob3ZlciB0aCwudF9zZXRfdGIgdGJvZHkgdHI6aG92ZXIgdGR7YmFja2dyb3VuZDojZDBkYWZkfS50X3NldF90YiB0Zm9vdCB0ZHtib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTBweDtib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTBweDstbW96LWJvcmRlci1yYWRpdXMtYm90dG9tcmlnaHQ6MTBweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MTBweDstd2Via2l0LWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwcHh9LnRfc2V0X2Z0e2ZvbnQtZmFtaWx5OkFyaWFsLHNhbnMtc2VyaWYs54C577+977+9ICFpbXBvcnRhbnQ7Zm9udC1zaXplOjEycHggIWltcG9ydGFudDtmb250LXdlaWdodDpib2xkICFpbXBvcnRhbnQ7dGV4dC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50O21hcmdpbi10b3A6MTVweCAhaW1wb3J0YW50fS50X3NldF9mdCBhe3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiMwMDB9LnRfc2V0YnRue2JvcmRlcjoxcHggc29saWQgYmxhY2s7cGFkZGluZzoycHg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZDojZmZmO2NvbG9yOiMwMDgwYzB9LnRfc2V0ZnRidG4gc3BhbntwYWRkaW5nOjJweCAxMHB4IDJweCAxMHB4ICFpbXBvcnRhbnR9LnRfcnRqZGJ0bntiYWNrZ3JvdW5kOiMwMDgwYzAgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnR9LnRfcnRqZHR4dHBvc3twYWRkaW5nLXRvcDo1cHh9I2laaGlodV9ydGhpbnR7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZizngLnvv73vv70gIWltcG9ydGFudDtmb250LXNpemU6MTZweCAhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OmJvbGQ7cGFkZGluZzo1cHggMTBweCA1cHggMTBweDtwb3NpdGlvbjpmaXhlZDt0b3A6MjBweDtib3JkZXItcmFkaXVzOjVweDstbW96LWJvcmRlci1yYWRpdXM6NXB4Oy13ZWJraXQtYm9yZGVyLXJhZGl1czo1cHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7b3BhY2l0eTowLjd9LnRfcnRoaW50X257Y29sb3I6I2ZmZiAhaW1wb3J0YW50O2JhY2tncm91bmQ6IzAwMCAhaW1wb3J0YW50fS50X3J0aGludF9me2JhY2tncm91bmQ6Izg4MDAwMCAhaW1wb3J0YW50O2NvbG9yOiNmZmZmZGQgIWltcG9ydGFudH0udF91cGJ0bntiYWNrZ3JvdW5kOiMwMDgwYzAgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnR9LnRfdXBpbmZve2hlaWdodDoxMjBweCAhaW1wb3J0YW50O3ZlcnRpY2FsLWFsaWduOnRleHQtdG9wICFpbXBvcnRhbnR9I2l6aF91cGRhdGVkaXYgdGh7Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjZmNmY2ZjICFpbXBvcnRhbnR9I2l6aF91cGRhdGVkaXYgdGZvb3QgdGR7Ym9yZGVyOm5vbmUgIWltcG9ydGFudDtib3JkZXItdG9wOjJweCBzb2xpZCAjZmNmY2ZjICFpbXBvcnRhbnQ7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZizngLnvv73vv70gIWltcG9ydGFudDtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O2ZvbnQtc3R5bGU6bm9ybWFsICFpbXBvcnRhbnQ7dGV4dC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fS50X3R4dHNob3d7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZDojMDA4MGMwO2NvbG9yOiNmMGYwZjA7dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmV9LnRfZnJzaG93e2ZvbnQtc2l6ZToxLjJlbTtwb3NpdGlvbjpmaXhlZDt6LWluZGV4Ojk5OTk5O3RvcDo0NXB4O3dpZHRoOjIwMHB4O29wYWNpdHk6MC45O2N1cnNvcjpwb2ludGVyfS50X3Rib3h7cGFkZGluZzoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO2JvcmRlcjoxcHggc29saWQgI2YwZjBmMDtsaW5lLWhlaWdodDoyMHB4OypoZWlnaHQ6MSU7d2lkdGg6MjAwcHg7LW1vei1ib3gtc2hhZG93OjJweCA1cHggMTVweCAjMzMzOy1tb3otYm9yZGVyLXJhZGl1czo3cHg7LXdlYmtpdC1ib3gtc2hhZG93OjJweCA1cHggMTVweCAjMzMzOy13ZWJraXQtYm9yZGVyLXJhZGl1czo3cHh9LnRfdGJveCBze3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMjBweDtsZWZ0OjE2MHB4O2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjA7d2lkdGg6MDtmb250LXNpemU6MDtsaW5lLWhlaWdodDowO2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZjBmMGYwIHRyYW5zcGFyZW50O2JvcmRlci1zdHlsZTpkYXNoZWQgZGFzaGVkIHNvbGlkIGRhc2hlZDtib3JkZXItd2lkdGg6MTBweH0udF90Ym94IGl7cG9zaXRpb246YWJzb2x1dGU7dG9wOi05cHg7bGVmdDotMTBweDtkaXNwbGF5OmJsb2NrO2hlaWdodDowO3dpZHRoOjA7Zm9udC1zaXplOjA7bGluZS1oZWlnaHQ6MDtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgIzAwODBjMCB0cmFuc3BhcmVudDtib3JkZXItc3R5bGU6ZGFzaGVkIGRhc2hlZCBzb2xpZCBkYXNoZWQ7Ym9yZGVyLXdpZHRoOjEwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzowKXsjaVpoaWh1X3J0amRkaXZ7aGVpZ2h0OjQxN3B4fSNpWmhpaHVfc2V0ZGl2e2hlaWdodDI6Mjk1cHh9I2l6aF91cGRhdGVkaXZ7aGVpZ2h0OjMxNXB4fX0nCiAgICAgLCcnXS5qb2luKCdcbicpOwppZihwYWdlSXMuUXVlc3Rpb24mJml6aEF1dGhvckxpc3QpewogICAgY3NzKz1bJ2Rpdi51bm97cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO2JvcmRlcjoxcHggc29saWQgIzA3NzFDMTtib3JkZXItcmlnaHQtd2lkdGg6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo2cHh9JwogICAgICAgICAsJ2Rpdi51bm8gLmZyYW1le292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6YXV0bztkaXJlY3Rpb246cnRsfScKICAgICAgICAgLCdkaXYudW5vIHNwYW4ubWVULGRpdi51bm8gc3Bhbi5tZUIsZGl2LnVubyB1bC5wcCBsaSBzcGFuLm1le3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7ZGlzcGxheTpibG9jaztoZWlnaHQ6MXB4O3dpZHRoOjFweDtsaW5lLWhlaWdodDoxcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O30nCiAgICAgICAgICwnZGl2LnVubyBzcGFuLm1lVHtib3JkZXItd2lkdGg6NnB4IDRweDtib3JkZXItdG9wLXdpZHRoOjBweDtib3JkZXItYm90dG9tLWNvbG9yOiNmZmY7fScKICAgICAgICAgLCdkaXYudW5vIHNwYW4ubWVCe2JvcmRlci13aWR0aDo2cHggNHB4O2JvcmRlci1ib3R0b20td2lkdGg6MHB4O2JvcmRlci10b3AtY29sb3I6I2ZmZjttYXJnaW4tdG9wOi03cHg7fScKICAgICAgICAgLCdkaXYudW5vIHVse2JhY2tncm91bmQtY29sb3I6IzA3NzFDMTtwYWRkaW5nOjA7bWFyZ2luOjA7ZGlyZWN0aW9uOmx0cn0nCiAgICAgICAgICwnZGl2LnVubyB1bCBsaXtkaXNwbGF5OmJsb2NrO2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbjowO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3dyYXA7fScKICAgICAgICAgLCdkaXYudW5vIHVsIGxpIGF7ZGlzcGxheTpibG9jazt9ZGl2LnVubyBsaSBhLnNlbHt0ZXh0LWRlY29yYXRpb246bm9uZTt9JwogICAgICAgICAsJ2Rpdi51bm8gdWwgbGkgYXsnK2Nzc19BdXRob3JMaXN0SXRlbUErJ30nCiAgICAgICAgICwnZGl2LnVubyB1bC5wcCBsaSBzcGFuLm1le3Bvc2l0aW9uOnN0YXRpYzttYXJnaW46NnB4IC04cHg7Ym9yZGVyLXdpZHRoOjRweCA2cHg7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmY7ZmxvYXQ6cmlnaHQ7fScKICAgICAgICAgLCdkaXYudW5vIGxpIGEgc3Bhbi5uYW1le3RleHQtYWxpZ246cmlnaHQ7ZGlzcGxheTpibG9jazsnK2Nzc19BdXRob3JMaXN0SXRlbUFfbmFtZSsnYmFja2dyb3VuZC1jb2xvcjojZmZmO31kaXYudW5vIGxpIGEuc2VsIHNwYW4ubmFtZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzA3NzFDMTt9JwogICAgICAgICAsJ2Rpdi51bm8gbGkgYSBzcGFuLm5hbWUubm9uYW1le2NvbG9yOiMwMDA7fScKICAgICAgICAgLCdkaXYudW5vIGxpIGEgc3Bhbi5uYW1lLmNvbGxhcHNlZHtjb2xvcjojOTk5OTk5O30nCiAgICAgICAgICwnZGl2LnVubyBsaSBhIHNwYW4ubmFtZS5mcmllbmR7Zm9udC1zdHlsZTppdGFsaWM7fScKICAgICAgICAgLCdkaXYudW5vIGxpIHNwYW4uaHB7YmFja2dyb3VuZC1jb2xvcjojOTk5OTk5O3Bvc2l0aW9uOnJlbGF0aXZlO2Zsb2F0OnJpZ2h0O21hcmdpbi10b3A6LTJweDtsaW5lLWhlaWdodDoycHg7aGVpZ2h0OjJweDt9JwogICAgICAgICAsJ2Rpdi51bm8gdGFibGUucGx1c3tmbG9hdDpyaWdodDttYXJnaW46N3B4IC05cHg7aGVpZ2h0OjdweDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7Ym9yZGVyLXN0eWxlOmhpZGRlbjt9ZGl2LnVubyB0YWJsZS5wbHVzIHRke2JvcmRlcjoxcHggc29saWQgI2ZmZjt3aWR0aDoxcHg7aGVpZ2h0OjFweDt9JwogICAgICAgICAsJ2Rpdi51bm8gYS5zZWwgdGFibGUucGx1c3t9ZGl2LnVubyBhLnNlbCB0YWJsZS5wbHVzIHRke30nCiAgICAgICAgICwnZGl2LnVubyBsaSBhIHNwYW4uZnVuY3t0ZXh0LWFsaWduOmNlbnRlcjt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXd7cG9zaXRpb246Zml4ZWQ7bWFyZ2luLXRvcDoxcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgIzA3NzFDMTtib3JkZXItdG9wLXdpZHRoOjIycHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NnB4O2JveC1zaGFkb3c6NXB4IDVweCA1cHggIzc3Nzt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXcgLnptLWVkaXRhYmxlLWNvbnRlbnR7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7b3ZlcmZsb3cteTphdXRvO3BhZGRpbmc6MTBweDt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXcgaW1nLnptLWxpc3QtYXZhdGFye3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjEwcHg7dG9wOi0zNXB4O2JvcmRlcjoxcHggc29saWQgIzA3NzFDMTtib3JkZXItcmFkaXVzOjZweDt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXcgc3Bhbi5jb21tZW50e3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMThweDtsaW5lLWhlaWdodDoxOHB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjNweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZzowIDVweDt9JwogICAgICAgICAsJyddLmpvaW4oJ1xuJyk7Cn0KY3NzKz1bJy56LWljb24taXpoLWZvbGR7YmFja2dyb3VuZC1wb3NpdGlvbjotMTczcHggLTEwN3B4O3dpZHRoOjE1cHg7aGVpZ2h0OjE1cHg7fScKICAgICAsJyddLmpvaW4oJ1xuJyk7CmNzcys9WycudF9zZXRfdGJ7Zm9udC1mYW1pbHk6Ikx1Y2lkYSBTYW5zIFVuaWNvZGUiLCJMdWNpZGEgR3JhbmRlIixTYW5zLVNlcmlmICFpbXBvcnRhbnQ7Zm9udC1zaXplOjEycHggIWltcG9ydGFudDt0ZXh0LXNoYWRvdzpub25lICFpbXBvcnRhbnQ7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlICFpbXBvcnRhbnQ7bWFyZ2luOjAgIWltcG9ydGFudDtsaW5lLWhlaWdodDoxMjAlfScKICAgICAsJy50X3NldF90YiB0aGVhZCB0ZHtiYWNrZ3JvdW5kOiMwMDgwYzA7Y29sb3I6I2ZmZjtib3JkZXI6bm9uZSAhaW1wb3J0YW50O3BhZGRpbmc6NHB4IDhweCA0cHggIWltcG9ydGFudDtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjZweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo2cHh9JwogICAgICwnLnRfc2V0X3RiIHRoLC50X3NldF90YiB0ZHtwYWRkaW5nOjhweDtiYWNrZ3JvdW5kOiNlN2YzZjk7Ym9yZGVyOm5vbmUgIWltcG9ydGFudDtib3JkZXItdG9wOjJweCBzb2xpZCAjZmNmY2ZjICFpbXBvcnRhbnQ7Y29sb3I6IzY2OTtsaW5lLWhlaWdodDoxLjFlbSAhaW1wb3J0YW50fScKICAgICAsJy50X3NldF90YiB0ZCBpbnB1dCwudF9zZXRfdGIgdGQgdGV4dGFyZWF7Zm9udC1zaXplOjEycHggIWltcG9ydGFudDtwYWRkaW5nOjAgIWltcG9ydGFudH0nCiAgICAgLCcudF9zZXRfdGIgdGJvZHkgdHI6aG92ZXIgdGgsLnRfc2V0X3RiIHRib2R5IHRyOmhvdmVyIHRke2JhY2tncm91bmQ6I2QwZGFmZH0nCiAgICAgLCcudF9zZXRfdGIgdGZvb3QgdGR7Ym9yZGVyLXJhZGl1cy1ib3R0b21sZWZ0OjEwcHg7Ym9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDoxMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21sZWZ0OjEwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjEwcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czoxMHB4fScKICAgICAsJy50X3NldF90YiB0ZHt3aGl0ZS1zcGFjZTpub3dyYXA7fScKICAgICAsJy50X3NldF90YiB0ZCAuaWNvbi1oZWxwe2Zsb2F0OnJpZ2h0O30nCiAgICAgLCcnXS5qb2luKCdcbicpOwpjc3MrPVsnLml6aF9ib3hTaGFkb3d7Ym94LXNoYWRvdzogNXB4IDVweCAzcHggMHB4ICM5OTkgIWltcG9ydGFudDt9JwogICAgICwnI3poLXF1ZXN0aW9uLW1ldGEtd3JhcC5pemhfbm9Cb3JkZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O30nCiAgICAgLCcjemgtcXVlc3Rpb24tZmlsdGVyLXdyYXAuaXpoX25vQm9yZGVye2JvcmRlci10b3AtY29sb3I6dHJhbnNwYXJlbnQgIWltcG9ydGFudDt9JwogICAgICwnYS5pemgtYnV0dG9uLm9ue2NvbG9yOiMyMjU1OTk7dGV4dC1zaGFkb3c6MCAwIDFweCAjMjI1NTk5O30nCiAgICAgLCdhLml6aC1idXR0b24gLnpnLWljb257b3BhY2l0eTowLjU7fScKICAgICAsJ2EuaXpoLWJ1dHRvbi5vbiAuemctaWNvbntvcGFjaXR5OjE7fScKICAgICAsJ2EuaXpoLWJ1dHRvbi5vZmZ7Y29sb3I6I2VlZTt9JwogICAgICwnYS5pemgtYnV0dG9uLm9mZiAuemctaWNvbntvcGFjaXR5OjAuMjt9JwogICAgICwnLml6aC1mZWVkcy1maWx0ZXJ7fScKICAgICAsJy5pemgtZmVlZHMtZmlsdGVyIC5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbntvcGFjaXR5OjAuNTtjb2xvcjojOTk5OTk5O3BhZGRpbmctbGVmdDo1cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y3Vyc29yOnBvaW50ZXI7fScKICAgICAsJy5pemgtZmVlZHMtZmlsdGVyIC5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbiBpe2JhY2tncm91bmQtcG9zaXRpb246LTE4M3B4IC00cHg7fScKICAgICAsJy5pemgtZmVlZHMtZmlsdGVyIC5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbi5vbntvcGFjaXR5OjE7Y29sb3I6IzIyNTU5OTt9JwogICAgICwnLml6aC1mZWVkcy1maWx0ZXIgLml6aC1mZWVkcy1maWx0ZXItb3B0aW9uLm9uIGl7YmFja2dyb3VuZC1wb3NpdGlvbjotMTgzcHggLTI0cHg7fScKICAgICAsJyddLmpvaW4oJ1xuJyk7CmlmKGl6aEhvbWVMYXlvdXQpewogICAgY3NzICs9ICBbJyN6aC1xdWVzdGlvbi1saXN0IHsgcGFkZGluZy1sZWZ0OjMwcHghaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnI3poLW1haW4tZmVlZC1mcmVzaC1idXR0b24geyBtYXJnaW4tbGVmdDotMzBweCFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcuZmVlZC1pdGVtIHsnCiAgICAgICAgICAgICwnICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICNFRUUhaW1wb3J0YW50OycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLXRvcDotMXB4IWltcG9ydGFudCcKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJy5mZWVkLWl0ZW0gLmF2YXRhciB7IGRpc3BsYXk6bm9uZSFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICwnLmZlZWQtbWFpbiwuZmVlZC1pdGVtLmNvbWJpbmUgeyBtYXJnaW4tbGVmdDowIWltcG9ydGFudCB9JwogICAgICAgICAgICAsJy5mZWVkLWl0ZW0tcSB7IG1hcmdpbi1sZWZ0Oi0zMHB4IWltcG9ydGFudDtwYWRkaW5nLWxlZnQ6MCFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICx3aW5kb3cuaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50ID8gJycgOiAnLmZlZWQtaXRlbS1hIC56bS1jb21tZW50LWJveCB7IG1heC13aWR0aDo2MDJweCFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLHdpbmRvdy5pWmhpaHUuQ29tbWVudC5SaWdodENvbW1lbnQgPyAnJyA6ICcuZmVlZC1pdGVtLXEgLnptLWNvbW1lbnQtYm94IHsgbWF4LXdpZHRoOjYzMnB4IWltcG9ydGFudDsgd2lkdGg6NjMycHghaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJy56bS10YWctZWRpdG9yLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tdGl0bGUsJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1kZXRhaWwsJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAsJwogICAgICAgICAgICAsJy56aC1hbnN3ZXJzLXRpdGxlLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tZmlsdGVyLXdyYXAgeycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLWxlZnQ6LTMycHghaW1wb3J0YW50JwogICAgICAgICAgICAsJ30nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1sb2ctcGFnZS13cmFwIC56bS10YWctZWRpdG9yLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tbG9nLXBhZ2Utd3JhcCAjemgtcXVlc3Rpb24tdGl0bGUgeycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLWxlZnQ6MCAhaW1wb3J0YW50JwogICAgICAgICAgICAsJ30nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJy56aC1hbnN3ZXJzLXRpdGxlLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tZmlsdGVyLXdyYXAgeycKICAgICAgICAgICAgLCcgICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VFRSFpbXBvcnRhbnQ7JwogICAgICAgICAgICAsJyAgICB6LWluZGV4OjEwMDAhaW1wb3J0YW50JwogICAgICAgICAgICAsJ30nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAgeycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLWJvdHRvbTowIWltcG9ydGFudDsnCiAgICAgICAgICAgICwnICAgIHBhZGRpbmctYm90dG9tOjEwcHghaW1wb3J0YW50OycKICAgICAgICAgICAgLCcgICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VFRSFpbXBvcnRhbnQnCiAgICAgICAgICAgICwnfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICwnI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwIHsgbWFyZ2luLXRvcDotMXB4IWltcG9ydGFudCB9JwogICAgICAgICAgICAsJycKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tY29sbGFwc2VkLXdyYXAsI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwIHsgYm9yZGVyOm5vbmUhaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnLnp1LXF1ZXN0aW9uLWNvbGxhcC10aXRsZSB7IGJvcmRlci10b3A6MXB4IHNvbGlkICNFRUUhaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnI3poLXF1ZXN0aW9uLWNvbGxhcHNlZC13cmFwPmRpdjpsYXN0LWNoaWxkLC56bS1pdGVtLWFuc3dlcjpsYXN0LWNoaWxkIHsgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VFRSFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICwnLnp1LWF1dG9oaWRlLCcKICAgICAgICAgICAgLCcuem0tY29tbWVudC1vcC1saW5rLCcKICAgICAgICAgICAgLCcuem0tc2lkZS10cmVuZC1kZWwsJwogICAgICAgICAgICAsJy51bnBpbiB7JwogICAgICAgICAgICAsJyAgICB2aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50OycKICAgICAgICAgICAgLCcgICAgb3BhY2l0eTowOycKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJy5mZWVkLWl0ZW06aG92ZXIgLnp1LWF1dG9oaWRlLCcKICAgICAgICAgICAgLCcuem0taXRlbS1hbnN3ZXIgLnp1LWF1dG9oaWRlLCcKICAgICAgICAgICAgLCcuem0taXRlbS1jb21tZW50OmhvdmVyIC56bS1jb21tZW50LW9wLWxpbmssJwogICAgICAgICAgICAsJy56bS1zaWRlLXRyZW5kLXJvdzpob3ZlciAuem0tc2lkZS10cmVuZC1kZWwsJwogICAgICAgICAgICAsJy56bS1zaWRlLW5hdi1saTpob3ZlciAudW5waW4geycKICAgICAgICAgICAgLCcgICAgb3BhY2l0eToxOycKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJy56bS1pdGVtLXZvdGUtY291bnQ6aG92ZXIsLnptLXZvdGViYXIgYnV0dG9uOmhvdmVyeycKICAgICAgICAgICAgLCcgICAgYmFja2dyb3VuZDojYTZjZTU2IWltcG9ydGFudDsnCiAgICAgICAgICAgICwnICAgIGNvbG9yOiMzRTVFMDAgIWltcG9ydGFudCcKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJycKICAgICAgICAgICAgLCdhLGE6aG92ZXIsJwogICAgICAgICAgICAsJ2ksJwogICAgICAgICAgICAsJy56dS1hdXRvaGlkZSwnCiAgICAgICAgICAgICwnLnptLXZvdGViYXIgYnV0dG9uLCcKICAgICAgICAgICAgLCcuem0taXRlbS1jb21tZW50OmhvdmVyIC56bS1jb21tZW50LW9wLWxpbmssJwogICAgICAgICAgICAsJy56bS1jb21tZW50LW9wLWxpbmssJwogICAgICAgICAgICAsJy56bS1zaWRlLXRyZW5kLXJvdzpob3ZlciAuem0tc2lkZS10cmVuZC1kZWwsJwogICAgICAgICAgICAsJy56bS1zaWRlLXRyZW5kLWRlbCwnCiAgICAgICAgICAgICwnLnptLXNpZGUtbmF2LWxpLCcKICAgICAgICAgICAgLCcuenUtbWFpbi1mZWVkLWZyZXNoLWJ1dHRvbiwnCiAgICAgICAgICAgICwnLnpnLWljb24sJwogICAgICAgICAgICAsJy56bS1zaWRlLW5hdi1saTpob3ZlciAuemctaWNvbiwnCiAgICAgICAgICAgICwnLnptLXNpZGUtbmF2LWxpOmhvdmVyIGksJwogICAgICAgICAgICAsJy51bnBpbiwnCiAgICAgICAgICAgICwnLnptLXNpZGUtbmF2LWxpOmhvdmVyIC51bnBpbiB7JwogICAgICAgICAgICAsJyAgICAtbW96LXRyYW5zaXRpb246Y29sb3IgLjJzIGxpbmVhcixvcGFjaXR5IC4xNXMgbGluZWFyLGJhY2tncm91bmQtY29sb3IgLjJzIGxpbmVhcixiYWNrZ3JvdW5kLXBvc2l0aW9uIC4ycyBsaW5lYXIgLjFzOycKICAgICAgICAgICAgLCcgICAgLXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIC4ycyBsaW5lYXIsb3BhY2l0eSAuMTVzIGxpbmVhcixiYWNrZ3JvdW5kLWNvbG9yIC4ycyBsaW5lYXIsYmFja2dyb3VuZC1wb3NpdGlvbiAuMnMgbGluZWFyIC4xczsnCiAgICAgICAgICAgICwnICAgIHRyYW5zaXRpb246Y29sb3IgLjJzIGxpbmVhcixvcGFjaXR5IC4xNXMgbGluZWFyLGJhY2tncm91bmQtY29sb3IgLjJzIGxpbmVhcixiYWNrZ3JvdW5kLXBvc2l0aW9uIC4ycyBsaW5lYXIgLjFzOycKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJycKICAgICAgICAgICAgLCdoM3sgbGluZS1oZWlnaHQ6MjVweCB9JwogICAgICAgICAgICAsJy56dS1mb290ZXItaW5uZXIge3BhZGRpbmc6MTVweCAwIWltcG9ydGFudH0nCiAgICAgICAgICAgICwnLnptLXNpZGUtcGlubmVkLXRvcGljcyAuem0tc2lkZS1uYXYtbGl7ZmxvYXQ6bGVmdDtwYWRkaW5nLXJpZ2h0OjMwcHghaW1wb3J0YW50fScKICAgICAgICAgICAgLCcuem0tc2lkZS1saXN0LWNvbnRlbnR7Y2xlYXI6Ym90aH0nCiAgICAgICAgICAgICwnLnVucGlueyBkaXNwbGF5OmlubGluZS1ibG9jayFpbXBvcnRhbnQgfScKICAgICAgICAgICAsJyddLmpvaW4oJ1xuJyk7Cn0KCnZhciBjc3NfY29tbWVudD0nJzsKaWYocGFnZUlzLkhvbWV8fHBhZ2VJcy5RdWVzdGlvbnx8cGFnZUlzLkFuc3dlcil7CiAgICBjc3NfY29tbWVudCA9IHdpbmRvdy5pWmhpaHUuQ29tbWVudC5jc3M7Cn0KCmNzcyArPSB3aW5kb3cuaVpoaWh1LkFuc3dlci5jc3M7CgppZih3aW5kb3cuaVpoaWh1LlF1aWNrRmF2byl7CiAgICBjc3MgKz0gd2luZG93LmlaaGlodS5RdWlja0Zhdm8uY3NzOwp9CmlmKHdpbmRvdy5pWmhpaHUuUXVpY2tCbG9jayl7CiAgICBjc3MgKz0gd2luZG93LmlaaGlodS5RdWlja0Jsb2NrLmNzczsKfQppZih3aW5kb3cuaVpoaWh1Lk5vdGk3KXsKICAgIGNzcyArPSB3aW5kb3cuaVpoaWh1Lk5vdGk3LmNzczsKICAgIHdpbmRvdy5pWmhpaHUuTm90aTcuZW5oYW5jZSgpOwp9CnZhciBoZWFkcyA9IF9kb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKTsKaWYgKGhlYWRzLmxlbmd0aCA+IDApIHsKICAgIHZhciBub2RlID0gX2RvYy5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgbm9kZS50eXBlID0gInRleHQvY3NzIjsKICAgIG5vZGUuaWQgPSAiaXpoQ1NTX21haW4iOwogICAgbm9kZS5hcHBlbmRDaGlsZChfZG9jLmNyZWF0ZVRleHROb2RlKGNzcykpOwogICAgaGVhZHNbMF0uYXBwZW5kQ2hpbGQobm9kZSk7IAogICAgaWYoY3NzX2NvbW1lbnQhPScnKXsKICAgICAgICBub2RlID0gX2RvYy5jcmVhdGVFbGVtZW50KCJzdHlsZSIpCiAgICAgICAgbm9kZS50eXBlID0gInRleHQvY3NzIjsKICAgICAgICBub2RlLmlkID0gIml6aENTU19jb21tZW50IjsKICAgICAgICBub2RlLmFwcGVuZENoaWxkKF9kb2MuY3JlYXRlVGV4dE5vZGUoY3NzX2NvbW1lbnQpKTsKICAgICAgICBoZWFkc1swXS5hcHBlbmRDaGlsZChub2RlKTsKICAgIH0KfQoKaWYoISQoJy5tb2RhbC1kaWFsb2ctYmcnKS5sZW5ndGgpewogICAgJGJvZHkuYXBwZW5kKAogICAgICAgICQoJzxkaXYnLCB7IGlkOiAnaXpoLWRsZy1iZycsICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctYmcnIH0pLmNzcyh7CiAgICAgICAgICAgICd6LWluZGV4JzogOTUKICAgICAgICAgICwgJ29wYWNpdHknOiAwLjUKICAgICAgICAgICwgJ3Bvc2l0aW9uJzogJ2ZpeGVkJwogICAgICAgICAgLCAndG9wJzogMAogICAgICAgICAgLCAnYm90dG9tJzogMAogICAgICAgICAgLCAnbGVmdCc6IDAKICAgICAgICAgICwgJ3JpZ2h0JzogMAogICAgICAgICAgLCAnZGlzcGxheSc6ICdub25lJwogICAgICAgIH0pCiAgICApOwp9Cgp3aW5kb3cuaVpoaWh1LmdldEl0ZW09ZnVuY3Rpb24oJGMpewogICAgdmFyICRpdGVtPSQobnVsbCk7CiAgICBpZigkYyAmJiAkYy5sZW5ndGgpeyAKICAgICAgICB2YXIgJGl0ZW1NZXRhPSRjLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKTsKICAgICAgICBpZiAoJGl0ZW1NZXRhLmlzKCcuZmVlZC1tZXRhJykgfHwgJGl0ZW1NZXRhLnBhcmVudCgpLmlzKCcuZmVlZC1tZXRhJykpewogICAgICAgICAgICAkaXRlbT0kYy5jbG9zZXN0KCcuZmVlZC1pdGVtJyk7CiAgICAgICAgICAgICRpdGVtLmF0dHIoJ2RhdGEtYWlkJywgJGl0ZW0uY2hpbGRyZW4oJ21ldGFbaXRlbXByb3A9YW5zd2VyLWlkXScpLmF0dHIoJ2NvbnRlbnQnKSkKICAgICAgICB9ZWxzZSBpZigkaXRlbU1ldGEuaXMoJy5hbnN3ZXItYWN0aW9ucycpKXsKICAgICAgICAgICAgJGl0ZW09JGMuY2xvc2VzdCgnLnptLWl0ZW0tYW5zd2VyLC5mZWVkLWl0ZW0nKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJGl0ZW09JGl0ZW1NZXRhLnByZXYoKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gJGl0ZW07Cn07Cgp1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKGRvY3VtZW50LmJvZHksZnVuY3Rpb24oZXZlbnQpewoJaWYoaXpoVG9wTmF2QXV0b0ZvbGQpewoJCXdpbmRvdy5pWmhpaHUuVG9wTmF2Lm9uTm9kZUFkZGVkKGV2ZW50KQoJfQp9KQovKioKICogQGNsYXNzIEFuc3dlcgogKi8KZnVuY3Rpb24gQW5zd2VyKGlaaGlodSkgewogICAgaWYgKCB0eXBlb2YgaVpoaWh1ID09PSAndW5kZWZpbmVkJyB8fCAhaVpoaWh1KSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpWmhpaHUuQW5zd2VyID0gdGhpczsKCiAgICB0aGlzLl9lPW51bGw7CiAgICB0aGlzLnBwV2lkdGg9MDsKICAgIHRoaXMucHBIZWlnaHQ9NDAwOwoKICAgIHRoaXMuY3NzID0gCiAgICAgICAgWycuem0tdm90ZWJhciAuaXpoLWJ1dHRvbi5mb2xke21hcmdpbjo1cHggMHB4IDBweDtkaXNwbGF5OmJsb2NrO2NvbG9yOiM2OThFQkY7aGVpZ2h0OjI0cHg7bGluZS1oZWlnaHQ6MjRweDt3aWR0aDozOHB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjowcHggbm9uZTtjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kOm5vbmUgcmVwZWF0IHNjcm9sbCAwJSAwJSAjRUZGNkZBO2ZvbnQtd2VpZ2h0OmZvbnQtd2VpZ2h0O3Bvc2l0aW9uOnJlbGF0aXZlO30nCiAgICAgICAgLCcnXS5qb2luKCdcbicpOwoKICAJdGhpcy5wcm9jZXNzQW5zd2VyPWZ1bmN0aW9uKCRhLCRwcCxiQXV0aG9yUmVhcixiQXV0aG9yTGlzdCl7CiAgICAgICAgaWYoISRhfHwhJGEubGVuZ3RoKXJldHVybjsKICAgICAgICBpZigkYS5hdHRyKCdpemhfcHJvY2Vzc2VkJyk9PScxJylyZXR1cm47CiAgICAgICAgdmFyIHNlbENvbGxhcHNlPScubWV0YS1pdGVtW25hbWU9Y29sbGFwc2VdJwogICAgICAgICAgLCAkbWV0YT0kYS5maW5kKCcuem0taXRlbS1tZXRhJykKICAgICAgICAgICwgJGF1dGhvcj0kYS5maW5kKCcuem0taXRlbS1hbnN3ZXItYXV0aG9yLWluZm8nKQogICAgICAgICAgLCAkZmF2bz0kYS5maW5kKCcubWV0YS1pdGVtW25hbWU9ZmF2b10nKQogICAgICAgICAgLCAkdm90ZT0kYS5maW5kKCcuem0tdm90ZWJhcicpCiAgICAgICAgOwogICAgICAgIGlmKGlaaGlodS5RdWlja0Jsb2NrKXsKICAgICAgICAgICAgLy8gUmVnaW9uOiDlv6vpgJ/lsY/olL0KICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suYWRkUXVpY2tCbG9jaygkYSkKCiAgICAgICAgICAgIC8vIFJlZ2lvbiBlbmQKICAgICAgICB9CiAgICAgICAgaWYoJGF1dGhvci5sZW5ndGgpey8vcmVsb2NhdGVQZXJzb25JbmZvCiAgICAgICAgICAgIGlmKGJBdXRob3JSZWFyKXsKICAgICAgICAgICAgICAgICRhdXRob3IuY3NzKHsKICAgICAgICAgICAgICAgICAgICAndGV4dEFsaWduJzoncmlnaHQnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmKCRhLmlzKCcuZmVlZC1pdGVtJykpewogICAgICAgICAgICAgICAgICAgICRhLmZpbmQoJy5lbnRyeS1ib2R5IC56bS1pdGVtLWFuc3dlci1kZXRhaWwgLnptLWl0ZW0tcmljaC10ZXh0JykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkYXV0aG9yLmhpZGUoKSkuYmluZCgnRE9NTm9kZUluc2VydGVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGM9JChldmVudC50YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGMuaXMoJy56bS1lZGl0YWJsZS1jb250ZW50JykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy56bS1pdGVtLWFuc3dlci1hdXRob3ItaW5mbycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnRCZWZvcmUoJGMuY2hpbGRyZW4oJy5hbnN3ZXItZGF0ZS1saW5rLXdyYXAnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdyaWdodCc6MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJGF1dGhvci5pbnNlcnRCZWZvcmUoJG1ldGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRhdXRob3I9JGF1dGhvci5jaGlsZHJlbigpLmVxKDEpOwogICAgICAgICAgICBpZiAoJHBwICYmIGJBdXRob3JMaXN0KXsKICAgICAgICAgICAgICAgIC8vIFJlZ2lvbjog5Zue562U55uu5b2V6aG5CiAgICAgICAgICAgICAgICB2YXIgY29sbGFwc2VkPSRhLmF0dHIoJ2RhdGEtY29sbGFwc2VkJyk9PScxJwogICAgICAgICAgICAgICAgICAsICRwcGxhPSQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjonI2Fuc3dlci0nKyRhLmF0dHIoJ2RhdGEtYWlkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRhcmdldDonX3NlbGYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzdHlsZTpjc3NfQXV0aG9yTGlzdEl0ZW1BCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICwgJHBwbD0kKCc8bGk+JykuYXBwZW5kKCRwcGxhKQogICAgICAgICAgICAgICAgICAsICR1bm89aVpoaWh1LiR1bm9BbnN3ZXJzCiAgICAgICAgICAgICAgICBpZihjb2xsYXBzZWQpewogICAgICAgICAgICAgICAgICAgICRwcGwuYXBwZW5kVG8oJHBwKQogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJHBwbC5pbnNlcnRCZWZvcmUoJHVuby4kZW5kT2ZMYXN0QSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRhLmF0dHIoJ2RhdGEtaXNvd25lcicpPT0nMScpewogICAgICAgICAgICAgICAgICAgIGlaaGlodS5BbnN3ZXIuX2U9JGEuZ2V0KDApOwogICAgICAgICAgICAgICAgICAgICRwcGxhLmFwcGVuZCgkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6ICdtZScgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG5hbWVDU1M9J25hbWUnOwogICAgICAgICAgICAgICAgaWYoJGEuYXR0cignZGF0YS1pc2ZyaWVuZCcpPT0nMScpewogICAgICAgICAgICAgICAgICAgIG5hbWVDU1MrPScgZnJpZW5kJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKGNvbGxhcHNlZCl7CiAgICAgICAgICAgICAgICAgICAgbmFtZUNTUys9JyBjb2xsYXBzZWQnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZighJGF1dGhvci5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIG5hbWVDU1MrPScgbm9uYW1lJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoJzxzcGFuPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6bmFtZUNTUwogICAgICAgICAgICAgICAgICAsIHN0eWxlOmNzc19BdXRob3JMaXN0SXRlbUFfbmFtZQogICAgICAgICAgICAgICAgfSkudGV4dCghJGF1dGhvci5sZW5ndGg/J+WMv+WQjeeUqOaItyc6JGF1dGhvci50ZXh0KCkpLmFwcGVuZFRvKCRwcGxhKTsKICAgICAgICAgICAgICAgIGlmICgkcHBsLndpZHRoKCk+aVpoaWh1LkFuc3dlci5wcFdpZHRoKQogICAgICAgICAgICAgICAgICAgIGlaaGlodS5BbnN3ZXIucHBXaWR0aD0kcHBsLndpZHRoKCk7CiAgICAgICAgICAgICAgICAvLyBSZWdpb24gZW5kCiAgICAgICAgICAgICAgICAvLyBSZWdpb246IOWbnuetlOevh+W5heaMh+ekugogICAgICAgICAgICAgICAgdmFyIG5IUD1NYXRoLmNlaWwoJCgnLnptLWVkaXRhYmxlLWNvbnRlbnQnLCRhKS50ZXh0KCkubGVuZ3RoLzEwMCk7CiAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nLHsKICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidocCcKICAgICAgICAgICAgICAgIH0pLmNzcyh7J3dpZHRoJzpuSFAqMTAsJ21hcmdpbi1sZWZ0JzotbkhQKjEwfSkuYXBwZW5kVG8oJHBwbGEpOwogICAgICAgICAgICAgICAgLy8gUmVnaW9uIGVuZAogICAgICAgICAgICAgICAgJHBwbGEubW91c2VvdmVyKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRmcm09JCh0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlKQogICAgICAgICAgICAgICAgICAgICAgLCAkdW5vPWlaaGlodS4kdW5vQW5zd2VycwogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3NlbCcpOwogICAgICAgICAgICAgICAgICAgIGlmKGlaaGlodS5BbnN3ZXIuX2UpewogICAgICAgICAgICAgICAgICAgICAgICAkdW5vLmNoaWxkcmVuKCcubWVUJykuY3NzKCdkaXNwbGF5JywwPmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0VG9wLSRmcm0uc2Nyb2xsVG9wKCk/Jyc6J25vbmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHVuby5jaGlsZHJlbignLm1lQicpLmNzcygnZGlzcGxheScsJGZybS5oZWlnaHQoKTxpWmhpaHUuQW5zd2VyLl9lLm9mZnNldFRvcC0kZnJtLnNjcm9sbFRvcCgpK2laaGlodS5BbnN3ZXIuX2Uub2Zmc2V0SGVpZ2h0PycnOidub25lJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIFJlZ2lvbjog5Zue562U6aKE6KeICiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbT0kKCdzcGFuLm5hbWUnLHRoaXMpOwogICAgICAgICAgICAgICAgICAgIGlmKCFuYW0ubGVuZ3RoKXJldHVybjsKICAgICAgICAgICAgICAgICAgICB2YXIgYWlkPSQodGhpcykuYXR0cignaHJlZicpLnJlcGxhY2UoJyNhbnN3ZXItJywnJykKICAgICAgICAgICAgICAgICAgICAgICwgcHJ2PSR1bm8ubmV4dCgnLml6aC1hbnN3ZXItcHJldmlldycpCiAgICAgICAgICAgICAgICAgICAgICAsIHRvcD0kKHRoaXMpLnBvc2l0aW9uKCkudG9wKyR1bm8ucG9zaXRpb24oKS50b3AKICAgICAgICAgICAgICAgICAgICAgICwgc2VsPScuem0taXRlbS1hbnN3ZXJbZGF0YS1haWQ9JythaWQrJ10gPiAuem0taXRlbS1yaWNoLXRleHQnCiAgICAgICAgICAgICAgICAgICAgICAsIGN0eD1uYW0uaXMoJy5jb2xsYXBzZWQnKT8nI3poLXF1ZXN0aW9uLWNvbGxhcHNlZC13cmFwJzonI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwJwogICAgICAgICAgICAgICAgICAgICAgLCBkaXY9JChzZWwsY3R4KQogICAgICAgICAgICAgICAgICAgICAgLCBjbXQ9JCgnLnptLWl0ZW0tbWV0YSA+IC56dS1xdWVzdGlvbi1hbnN3ZXItbWV0YS1jb21tZW50JyxkaXYucGFyZW50KCkpCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIGlmKCFwcnYubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgcHJ2PSQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzpkaXYuY2xhc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2l6aC1hbnN3ZXItcHJldmlldycpLndpZHRoKGRpdi53aWR0aCgpKzIyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vdXNlb3ZlcihmdW5jdGlvbigpeyR1bm8ubW91c2VvdmVyKCk7JCgnbGkgYVtocmVmPSMnKyQodGhpcykuYXR0cignZGF0YS1haWQnKSsnXScsJHVubykuYWRkQ2xhc3MoJ3NlbCcpOyQodGhpcykuc2hvdygpO30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubW91c2VvdXQoZnVuY3Rpb24oKXskdW5vLm1vdXNlb3V0KCk7JCgnbGkgYVtocmVmPSMnKyQodGhpcykuYXR0cignZGF0YS1haWQnKSsnXScsJHVubykucmVtb3ZlQ2xhc3MoJ3NlbCcpOyQodGhpcykuaGlkZSgpO30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oKXskKCdsaSBhW2hyZWY9IycrJCh0aGlzKS5hdHRyKCdkYXRhLWFpZCcpKyddJywkdW5vKVswXS5jbGljaygpO30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJHVubykKICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihwcnYuYXR0cignZGF0YS1haWQnKSE9YWlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgcHJ2LmF0dHIoJ2RhdGEtYWlkJyxhaWQpLmVtcHR5KCkuYXBwZW5kKGRpdi5jbG9uZSgpLmNoaWxkcmVuKCkpLmZpbmQoJ2EnKS5hdHRyKCdvbmNsaWNrJywncmV0dXJuIGZhbHNlOycpOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkKCdzcGFuLm1lJyx0aGlzKS5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcnYuZmluZCgnYS56dS1lZGl0LWJ1dHRvbicpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZighbmFtLmhhc0NsYXNzKCdub25hbWUnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2ltZy56bS1saXN0LWF2YXRhcicsZGl2LnBhcmVudCgpKS5jbG9uZSgpLmFwcGVuZFRvKHBydik7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0PWNtdC50ZXh0KCksaT10LmluZGV4T2YoJ+adoeivhOiuuicpOwogICAgICAgICAgICAgICAgICAgICAgICBpZihjbXQubGVuZ3RoJiZpPjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nLHsnY2xhc3MnOidjb21tZW50J30pLnRleHQodC5zdWJzdHJpbmcoMCxpKSkucHJlcGVuZChjbXQuY2hpbGRyZW4oJ2knKS5jbG9uZSgpKS5hcHBlbmRUbyhwcnYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgdGg9ZGl2LmhlaWdodCgpKzMzCiAgICAgICAgICAgICAgICAgICAgICAsIG1heFRvcD0kdW5vLnBvc2l0aW9uKCkudG9wKzEyCiAgICAgICAgICAgICAgICAgICAgICAsIGNvbnRlbnRQb3NpdGlvbj0nJzsKICAgICAgICAgICAgICAgICAgICBpZihtYXhUb3ArdGg8JHdpbi5oZWlnaHQoKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvcCt0aDwkd2luLmhlaWdodCgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBydi5jc3Moeyd0b3AnOnRvcD5tYXhUb3A/dG9wOm1heFRvcCwnYm90dG9tJzonJ30pOwogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBydi5jc3Moeyd0b3AnOicnLCdib3R0b20nOjB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBwcnYuY3NzKHsndG9wJzptYXhUb3AsJ2JvdHRvbSc6MH0pOwogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50UG9zaXRpb249J2Fic29sdXRlJzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcHJ2LmNzcyh7J2xlZnQnOiR1bm8ud2lkdGgoKX0pLnNob3coKS5jaGlsZHJlbigpLmZpcnN0KCkuY3NzKCdwb3NpdGlvbicsY29udGVudFBvc2l0aW9uKTsKICAgICAgICAgICAgICAgICAgICAvLyBSZWdpb24gZW5kCiAgICAgICAgICAgICAgICB9KS5tb3VzZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3NlbCcpOwogICAgICAgICAgICAgICAgICAgIHZhciAkdW5vPSQodGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgICAgICAkdW5vLm5leHQoKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9KS5jbGljayhmdW5jdGlvbigpeyQodGhpcykubW91c2VvdXQoKTsKICAgICAgICAgICAgICAgIGlaaGlodS4kdW5vQW5zd2Vycy5jc3MoJ2xlZnQnLDktaVpoaWh1LiR1bm9BbnN3ZXJzLndpZHRoKCkpO30pOwogICAgICAgICAgICAgICAgaWYoaVpoaWh1LkFuc3dlci5fZT09JGEuZ2V0KDApKXsKICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQW5zd2VyLl9lPSRwcGxhLmdldCgwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYoaVpoaWh1LlF1aWNrRmF2bykKICAgICAgICAgICAgaVpoaWh1LlF1aWNrRmF2by5hZGRRdWlja0Zhdm8oJGZhdm8sJGEpOwoKICAgICAgICAkbWV0YS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJChldmVudC50YXJnZXQpKTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICBpWmhpaHUuQ29tbWVudC5wcm9jZXNzQ29tbWVudEJ1dHRvbigkYSk7CgogICAgICAgIHZhciAkY209JCgnLnptLWNvbW1lbnQtYm94JywkYSk7CiAgICAgICAgaWYoJGNtLmxlbmd0aCAmJiAkY20uaXMoJzp2aXNpYmxlJykpewogICAgICAgIAl2YXIgZm9jdXNOYW1lID0gaVpoaWh1LkNvbW1lbnQuc2Nyb2xsRm9jdXNDb21tZW50T25QYWdlTG9hZCgkY20pOwogICAgCiAgICAgICAgICAgIGlaaGlodS5Db21tZW50Lm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20oJGNtLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKSxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJGNtLCBmb2N1c05hbWUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJGEuYXR0cignaXpoX3Byb2Nlc3NlZCcsJzEnKTsKICAgIH07CgogICAgcmV0dXJuIHRoaXM7Cn0KCi8qKgogKiBAY2xhc3MgQ29tbWVudAogKi8KZnVuY3Rpb24gQ29tbWVudChpWmhpaHUpIHsKICAgIGlmICggdHlwZW9mIGlaaGlodSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWlaaGlodSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaVpoaWh1LkNvbW1lbnQgPSB0aGlzOwoKICAgIHZhciBjc3NfY29tbWVudD17CiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzonI2ZmZicKICAgICAgICAgICwgJ291dGxpbmUnOidub25lJwogICAgICAgICAgLCAnei1pbmRleCc6Jzk5OTknCiAgICAgICAgICAsICdib3JkZXItcmFkaXVzJzonMCA2cHggMCAwJwogICAgICAgICAgLCAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICwgJ3Zpc2liaWxpdHknOidoaWRkZW4nCiAgICAgICAgICAsICd0b3AnOi03MAogICAgICAgIH0KICAgIDsKICAgIHRoaXMuUmlnaHRDb21tZW50ID0gaVpoaWh1LmNvbmZpZ1snU2hvd0NvbW1lbnQnXTsKICAgIHRoaXMuQXV0b1Njcm9sbFBhZ2VXaGVuQ2xvc2luZyA9IGlaaGlodS5jb25maWdbJ1JpZ2h0Q29tbWVudF9BdXRvU2Nyb2xsUGFnZVdoZW5DbG9zaW5nJ107CiAgICBpZiAoIXRoaXMuUmlnaHRDb21tZW50KXsKICAgICAgICB0aGlzLmNzcyA9IAogICAgICAgICAgICBbJy56bS1jb21tZW50LWJveC5lbXB0eSAuaXpoLWJ1dHRvbi1jY3tkaXNwbGF5Om5vbmU7fScKICAgICAgICAgICAgLCcnXS5qb2luKCdcbicpOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNzcyA9IAogICAgICAgICAgICBbJy5tZW50aW9uLXBvcHVwe3otaW5kZXg6MTAwMDAgIWltcG9ydGFudDt9JwogICAgICAgICAgICAsJy56bS1pdGVtLW1ldGEgLm1ldGEtaXRlbS50b2dnbGUtY29tbWVudHtkaXNwbGF5OmJsb2NrO2Zsb2F0OnJpZ2h0O21hcmdpbi1sZWZ0OjdweCAhaW1wb3J0YW50O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94e3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi10b3A6MDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuaWNvbi1zcGlrZXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCA+IC56bS1jb21tZW50LWJveC1mdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveC5lbXB0eXtwYWRkaW5nLXRvcDoxMHB4ICFpbXBvcnRhbnQ7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggPiAuem0tY29tbWVudC1mb3Jte21hcmdpbjoxNXB4ICFpbXBvcnRhbnQ7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3guZW1wdHkgPiAuem0tY29tbWVudC1mb3Jte2JvdHRvbToyNXB4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94ID4gLnptLWNvbW1lbnQtZm9ybSAuem0tY29tbWVudC1lZGl0YWJsZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206NjBweDt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtvdmVyZmxvdzphdXRvO30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94LmVtcHR5ID4gLnptLWNvbW1lbnQtZm9ybSAuem0tY29tbWVudC1lZGl0YWJsZXtib3R0b206MjVweDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCA+IC56bS1jb21tZW50LWZvcm0gLnptLWNvbW1hbmR7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjQwcHg7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3guZW1wdHkgPiAuem0tY29tbWVudC1mb3JtIC56bS1jb21tYW5ke2JvdHRvbToxMHB4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IFtjbGFzc149aXpoLWJ1dHRvbnMtY21de3Bvc2l0aW9uOmFic29sdXRlO3RvcDo3MHB4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94LmVtcHR5IFtjbGFzc149aXpoLWJ1dHRvbnMtY21de3RvcDphdXRvO2JvdHRvbTozMHB4O3otaW5kZXg6MTA7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggLml6aC1idXR0b25zLWNtLUx7bGVmdDowO30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IC5pemgtYnV0dG9ucy1jbS1MID4gYXttYXJnaW4tcmlnaHQ6N3B4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IC5pemgtYnV0dG9ucy1jbS1Se3JpZ2h0OjFlbTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuaXpoLWJ1dHRvbnMtY20tUiA+IGF7bWFyZ2luLWxlZnQ6N3B4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IGEuaXpoLWJ1dHRvbi5vbntjb2xvcjojMjI1NTk5O3RleHQtc2hhZG93OjAgMCAxcHggIzIyNTU5OTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCBhLml6aC1idXR0b24gLnpnLWljb257b3BhY2l0eTowLjU7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggYS5pemgtYnV0dG9uLm9uIC56Zy1pY29ue29wYWNpdHk6MTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCBhLml6aC1idXR0b24ub2Zme2NvbG9yOiNlZWU7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggYS5pemgtYnV0dG9uLm9mZiAuemctaWNvbntvcGFjaXR5OjAuMjt9JwogICAgICAgICAgICAvLywnLnptLWNvbW1lbnQtYm94LmVtcHR5IFtjbGFzc149aXpoLWJ1dHRvbnMtY21de3RvcDphdXRvO2JvdHRvbTo3cHg7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3guZW1wdHkgLnptLWNvbW1lbnQtbGlzdHt2aXNpYmlsaXR5OmhpZGRlbjt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuem0tY29tbWVudC1saXN0IC56bS1pdGVtLWNvbW1lbnRbaXpoX2hpbGlnaHRde2JhY2tncm91bmQtY29sb3I6cmdiKDI1NSwyNTUsMTYwKTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuaXpoLWJ1dHRvbi5vbiAuemctaWNvbi1jb21tZW50LWxpa2V7YmFja2dyb3VuZC1wb3NpdGlvbjotMjIycHggLTc5cHg7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggLml6aC1idXR0b24gLnotaWNvbi1mb2xke2hlaWdodDo2cHg7fScKICAgICAgICAgICAgLCcnXS5qb2luKCdcbicpOwogICAgICAgIHRoaXMub25XaW5Mb2FkPWZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBpWmhpaHU9d2luZG93LmlaaGlodTsKICAgICAgICAgICAgaVpoaWh1LiR3aW4uc2Nyb2xsKGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIGlmKGlaaGlodS5Db21tZW50Lk9wZW5pbmcmJiFpWmhpaHUuQ29tbWVudC5QYWdlTm90U2Nyb2xsKXsKICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0ZT10cnVlOwogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkKGlaaGlodS5Db21tZW50Lk9wZW5pbmcpLHRydWUsYW5pbWF0ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIAogICAgICAgICAgICBpWmhpaHUuJHdpbi5yZXNpemUoZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgaWYoaVpoaWh1LkNvbW1lbnQuT3BlbmluZyl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRjbT0kKGlaaGlodS5Db21tZW50Lk9wZW5pbmcpOwogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50Lk9wZW5pbmcgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmNsb3NlKG51bGwsJGNtKTsKICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5vcGVuKG51bGwsJGNtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmKGlaaGlodS5TY3JvbGxUb3ApewogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A9aVpoaWh1LlNjcm9sbFRvcDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLm9uV2luTG9hZCgpCiAgICB9CiAgICB0aGlzLnByb2Nlc3NDb21tZW50QnV0dG9uID0gZnVuY3Rpb24oJGEpewogICAgICAgIGlmKGlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgICAgIHZhciAkYmM9JGEuZmluZCgnLm1ldGEtaXRlbS50b2dnbGUtY29tbWVudCcpOwogICAgICAgICAgICAkYmMucHJlcGVuZFRvKCRiYy5wYXJlbnQoKSk7CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuc2Nyb2xsRm9jdXNDb21tZW50T25QYWdlTG9hZCA9IGZ1bmN0aW9uKCRjbSl7CiAgICAgICAgaWYoIWlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudClyZXR1cm47CiAgICAgICAgdmFyIGZvY3VzTmFtZT11cmwuZGF0YS5hdHRyLmZyYWdtZW50OwogICAgICAgIGlmKCFmb2N1c05hbWV8fGZvY3VzTmFtZT09JycpcmV0dXJuOwogICAgCWlmKHdpbmRvdy5pWmhpaHU0Q1JYKXsKICAgICAgICAgICAgdmFyICRpY20yQz0kY20uZmluZCgnLnptLWNvbW1lbnQtbGlzdCAuem0taXRlbS1jb21tZW50IGEuemctYW5jaG9yLWhpZGRlbltuYW1lPSInK2ZvY3VzTmFtZSsnIl0nKS5wYXJlbnQoKQogICAgICAgICAgICAgICwgb2Zmc2V0VG9wPSRpY20yQy5sZW5ndGg/JGljbTJDLm9mZnNldCgpLnRvcDowCiAgICAgICAgICAgIDtpZihvZmZzZXRUb3Ape2RvY3VtZW50LmJvZHkuc2Nyb2xsVG9wPW9mZnNldFRvcDt9CiAgICAJfQogICAgICAgIHJldHVybiBmb2N1c05hbWU7CiAgICB9OwogICAgCiAgICB0aGlzLm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20gPSBmdW5jdGlvbigkaXRlbU1ldGEsZnVuY0FmdGVyU2Nyb2xsLGFsd2F5cyxhbmltYXRlKXsKICAgICAgICBpZighaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50IHx8ICFpWmhpaHUuQ29tbWVudC5BdXRvU2Nyb2xsUGFnZVdoZW5DbG9zaW5nKXsKICAgICAgICAgICAgaWYoZnVuY0FmdGVyU2Nyb2xsKXtmdW5jQWZ0ZXJTY3JvbGwoKTt9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYodHlwZW9mIGFsd2F5cyA9PT0gJ3VuZGVmaW5lZCcpYWx3YXlzPXRydWU7Ly9pZiBmYWxzZSwgc2Nyb2xsaW5nIG9ubHkgd2hlbiB0aGUgLnptLWl0ZW0tbWV0YSBvdXQgb2YgdmlzaWJsZSByYW5nZQogICAgICAgIGlmKHR5cGVvZiBhbmltYXRlID09PSAndW5kZWZpbmVkJylhbmltYXRlPWZhbHNlOy8vaWYgZmFsc2UsIHNjcm9sbGluZyBpbnN0YW50bHkKICAgICAgICBpZihhbHdheXMpJGl0ZW1NZXRhLmNoaWxkcmVuKCcuem0tY29tbWVudC1ib3gnKS5jc3MoJ3Bvc2l0aW9uJywnZml4ZWQnKTsKICAgICAgICB2YXIgd2luSGVpZ2h0PWlaaGlodS4kd2luLmhlaWdodCgpCiAgICAgICAgICAsIHNjcm9sbE9iaj13aW5kb3cuaVpoaWh1NENSWD9kb2N1bWVudC5ib2R5OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudAogICAgICAgICAgLCBzY3JvbGxUb3BOb3c9c2Nyb2xsT2JqLnNjcm9sbFRvcAogICAgICAgICAgLCBuYXZIZWlnaHQ9aVpoaWh1LiRib2R5LmNoaWxkcmVuKCkuZmlyc3QoKS5oZWlnaHQoKQogICAgICAgICAgLCBiYXI9JCgnLnp1LWdsb2JhbC1ub3RpZnkuenUtZ2xvYmFsLW5vdGlmeS1pbmZvOnZpc2libGUnKQogICAgICAgICAgLCBiYXJIZWlnaHQ9IWJhci5sZW5ndGg/MDpiYXIub3V0ZXJIZWlnaHQoKQogICAgICAgICAgLCBiYXNlVG9wPSgoYmFySGVpZ2h0JiZiYXIuY3NzKCdwb3NpdGlvbicpPT0nZml4ZWQnKT9iYXJIZWlnaHQ6KHNjcm9sbFRvcE5vdz5iYXJIZWlnaHQ/MDpiYXJIZWlnaHQtc2Nyb2xsVG9wTm93KSkrbmF2SGVpZ2h0CiAgICAgICAgICAsIG1heEhlaWdodD13aW5IZWlnaHQtYmFzZVRvcAogICAgICAgICAgLCBtZXRhSGVpZ2h0PSRpdGVtTWV0YS5pbm5lckhlaWdodCgpCiAgICAgICAgICAsIG9mZnNldFRvcD0kaXRlbU1ldGEub2Zmc2V0KCkudG9wCiAgICAgICAgICAsIG9mZnNldEJvdHRvbT1vZmZzZXRUb3ArbWV0YUhlaWdodAogICAgICAgICAgLCAkaXRlbT1pWmhpaHUuZ2V0SXRlbSgkaXRlbU1ldGEpCiAgICAgICAgICAsIGl0ZW1IZWlnaHQ9JGl0ZW0uaW5uZXJIZWlnaHQoKQogICAgICAgICAgLCBvZmZzZXRUb3BBPSRpdGVtLm9mZnNldCgpLnRvcAogICAgICAgICAgLCBvZmZzZXRCb3R0b21BPW9mZnNldFRvcEEraXRlbUhlaWdodAogICAgICAgICAgLCBzY3JvbGxUb3BFbmQ9aXRlbUhlaWdodD5tYXhIZWlnaHQ/b2Zmc2V0Qm90dG9tLXdpbkhlaWdodDoob2Zmc2V0VG9wQTw9c2Nyb2xsVG9wTm93P29mZnNldFRvcEEtYmFzZVRvcDpvZmZzZXRCb3R0b20td2luSGVpZ2h0KQogICAgICAgIDsKICAgICAgICBpZighYWx3YXlzKXsKICAgICAgICAgICAgYWx3YXlzPW9mZnNldFRvcDxzY3JvbGxUb3BOb3crYmFzZVRvcHx8b2Zmc2V0Qm90dG9tPnNjcm9sbFRvcE5vdyt3aW5IZWlnaHQtYmFzZVRvcDsKICAgICAgICB9CiAgICAgICAgaWYoYWx3YXlzKXsKICAgICAgICAgICAgaVpoaWh1LlNjcm9sbFRvcD1zY3JvbGxUb3BFbmQ7CiAgICAgICAgICAgIGlmKGFuaW1hdGUpewogICAgICAgICAgICAgICAgJChzY3JvbGxPYmopLmFuaW1hdGUoeydzY3JvbGxUb3AnOnNjcm9sbFRvcEVuZH0sZnVuY0FmdGVyU2Nyb2xsKTsKICAgICAgICAJfWVsc2V7CiAgICAgICAgICAgICAgICAkKHNjcm9sbE9iaikuc2Nyb2xsVG9wKHNjcm9sbFRvcEVuZCk7CiAgICAgICAgICAgICAgICBpZihmdW5jQWZ0ZXJTY3JvbGwpe2Z1bmNBZnRlclNjcm9sbCgpO30KICAgICAgICAJfQogICAgICAgIH1lbHNlewogICAgICAgICAgICBpZihmdW5jQWZ0ZXJTY3JvbGwpe2Z1bmNBZnRlclNjcm9sbCgpO30KICAgICAgICB9CiAgICB9OwogICAgdGhpcy5ib3ggPSBmdW5jdGlvbigkY20sa2VlcFNpemUsYW5pbWF0ZSl7aWYoISRjbXx8ISRjbS5sZW5ndGgpcmV0dXJuOwogICAgICAgICRjbS5zdG9wKCk7CiAgICAgICAgaWYodHlwZW9mIGtlZXBTaXplID09PSAndW5kZWZpbmVkJylrZWVwU2l6ZT1mYWxzZTsKICAgICAgICBpZih0eXBlb2YgYW5pbWF0ZSA9PT0gJ3VuZGVmaW5lZCcpYW5pbWF0ZT1mYWxzZTsKICAgICAgICB2YXIgd2luSGVpZ2h0PWlaaGlodS4kd2luLmhlaWdodCgpCiAgICAgICAgICAsIHRoPWtlZXBTaXplP3BhcnNlSW50KCRjbS5hdHRyKCdpemhfY21IZWlnaHQnKSk6MAogICAgICAgICAgLCBzY3JvbGxUb3A9KGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKT9kb2N1bWVudC5ib2R5LnNjcm9sbFRvcDpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wCiAgICAgICAgICAsIG5hdkhlaWdodD1pWmhpaHUuJGJvZHkuY2hpbGRyZW4oKS5maXJzdCgpLmhlaWdodCgpCiAgICAgICAgICAsIGJhcj0kKCcuenUtZ2xvYmFsLW5vdGlmeS56dS1nbG9iYWwtbm90aWZ5LWluZm86dmlzaWJsZScpCiAgICAgICAgICAsIGJhckhlaWdodD0hYmFyLmxlbmd0aD8wOmJhci5vdXRlckhlaWdodCgpCiAgICAgICAgICAsIGJhc2VUb3A9KChiYXJIZWlnaHQmJmJhci5jc3MoJ3Bvc2l0aW9uJyk9PSdmaXhlZCcpP2JhckhlaWdodDooc2Nyb2xsVG9wPmJhckhlaWdodD8wOmJhckhlaWdodC1zY3JvbGxUb3ApKStuYXZIZWlnaHQKICAgICAgICAgICwgbWluSGVpZ2h0PTExMgogICAgICAgICAgLCBtYXhIZWlnaHQ9d2luSGVpZ2h0LWJhc2VUb3AtMzUKICAgICAgICAgICwgdG9vU21hbGw9bWF4SGVpZ2h0PG1pbkhlaWdodAogICAgICAgICAgLCAkbWV0YT0kY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpCiAgICAgICAgICAsIG1ldGFIZWlnaHQ9MiokbWV0YS5oZWlnaHQoKS0kbWV0YS5pbm5lckhlaWdodCgpCiAgICAgICAgICAsIG9mZnNldFRvcD1zY3JvbGxUb3AtJG1ldGEub2Zmc2V0KCkudG9wCiAgICAgICAgICAsIG9mZnNldEJvdHRvbT0tb2Zmc2V0VG9wLXdpbkhlaWdodAogICAgICAgIDtpZih0b29TbWFsbCltYXhIZWlnaHQ9bWluSGVpZ2h0OwogICAgICAgIGlmKCF0aHx8aXNOYU4odGgpKXsKICAgICAgICAgICAgdmFyICR0PSRjbS5jbG9uZSgpLmNzcyh7J3Bvc2l0aW9uJzonYWJzb2x1dGUnLCd6LWluZGV4JzonLTEnfSkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuc2hvdygpCiAgICAgICAgICAgICAgLCAkbD0kdC5jaGlsZHJlbignLnptLWNvbW1lbnQtbGlzdCcpCiAgICAgICAgICAgIDsKICAgICAgICAgICAgaWYoISRjbS5pcygnLmVtcHR5JykmJiRsLmNoaWxkcmVuKCkubGVuZ3RoPjApJGwuY3NzKHsncG9zaXRpb24nOidhYnNvbHV0ZScsJ2hlaWdodCc6JycsJ3RvcCc6JycsJ2JvdHRvbSc6Jyd9KTsKICAgICAgICAgICAgdGg9JGwuaGVpZ2h0KCk7CiAgICAgICAgICAgIHRoKz10aD09MD9taW5IZWlnaHQ6MTAwOwogICAgICAgICAgICAkdC5yZW1vdmUoKTskdD1udWxsOy8vY29uc29sZS5sb2codGgpOwogICAgICAgICAgICAkY20uY3NzKCdoZWlnaHQnLHRoPD1taW5IZWlnaHQ/bWluSGVpZ2h0Oih0aDxtYXhIZWlnaHQ/dGgtMTAwOm1heEhlaWdodC04MCkpOwogICAgICAgIH0KICAgICAgICB2YXIgdGFyZ2V0PXt9LG90aGVyPXsnaGVpZ2h0JzonJ307CiAgICAgICAgJGNtLmF0dHIoJ2l6aF9jbUhlaWdodCcsdGgpLmNzcyh7J2Rpc3BsYXknOicnLCd2aXNpYmlsaXR5JzondmlzaWJsZScsJ3Bvc2l0aW9uJzonYWJzb2x1dGUnfSk7CiAgICAgICAgaWYodGg8PW1heEhlaWdodCl7CiAgICAgICAgICAgIHZhciB0b3A9LW9mZnNldFRvcC03MCxmaXhIZWlnaHQ9KHRoPD1taW5IZWlnaHQ/LTE6Nyk7CiAgICAgICAgICAgIGlmKCF0b29TbWFsbCYmdG9wK3RoPndpbkhlaWdodCl7CiAgICAgICAgICAgICAgICB0YXJnZXQ9eyd0b3AnOi1vZmZzZXRCb3R0b20tdGgtbWV0YUhlaWdodCtmaXhIZWlnaHQsJ2JvdHRvbSc6b2Zmc2V0Qm90dG9tfTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBvZmZzZXRUb3ArPSgoIXRvb1NtYWxsKSYmdG9wPmJhc2VUb3A/dG9wOmJhc2VUb3ApOwogICAgICAgICAgICAgICAgdGFyZ2V0PXsndG9wJzpvZmZzZXRUb3AsJ2JvdHRvbSc6LW9mZnNldFRvcC10aC1tZXRhSGVpZ2h0K2ZpeEhlaWdodH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJGNtLmZpbHRlcignLmVtcHR5JykuZmluZCgnLnptLWNvbW1lbnQtZm9ybSAuem0tY29tbWVudC1lZGl0YWJsZScpLmNzcyh7J2JvdHRvbSc6Jyd9KTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdGFyZ2V0PXsndG9wJzpvZmZzZXRUb3ArYmFzZVRvcCwnYm90dG9tJzpvZmZzZXRCb3R0b219OwogICAgICAgICAgICAkY20uZmlsdGVyKCcuZW1wdHknKS5maW5kKCcuem0tY29tbWVudC1mb3JtIC56bS1jb21tZW50LWVkaXRhYmxlJykuY3NzKHsnYm90dG9tJzonMjBweCd9KTsKICAgICAgICB9CiAgICAgICAgaWYoYW5pbWF0ZSl7CiAgICAgICAgICAgICRjbS5hbmltYXRlKHRhcmdldCxmdW5jdGlvbigpeyRjbS5jc3Mob3RoZXIpO30pOwogICAgICAgIH1lbHNlewogICAgICAgICAgICAkY20uY3NzKCQuZXh0ZW5kKHRhcmdldCxvdGhlcikpOwogICAgICAgIH0KICAgICAgICAkY207CiAgICB9OwogICAgdGhpcy5vcGVuID0gZnVuY3Rpb24oJGFjLCRjbSxpY21Gb2N1cyl7Ly8gaWYgJGFjIGlzIG51bGwsIGp1c3QgcmUtc2l6aW5nIGFuZCByZS1sb2NhdGluZyBjb21tZW50LWJveAogICAgICAgIHZhciBub0NvbW1lbnRPcGVuaW5nID0gaVpoaWh1LkNvbW1lbnQuT3BlbmluZyA9PSBudWxsOwogICAgICAgIGlaaGlodS5Db21tZW50Lk9wZW5pbmcgPSAkY20uYXR0cignaXpoLW9wZW5pbmcnLCcxJykuY3NzKHsnZGlzcGxheSc6J25vbmUnfSkuZ2V0KDApOwogICAgICAgICQoJy56bS1jb21tZW50LWJveDp2aXNpYmxlOm5vdChbaXpoLW9wZW5pbmc9MV0pJykKICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICQoZSkuY3NzKCd2aXNpYmlsaXR5JywnaGlkZGVuJykuY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpLmZpbmQoJy50b2dnbGUtY29tbWVudCcpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIHZhciB3aW5XaWR0aD1pWmhpaHUuJHdpbi53aWR0aCgpCiAgICAgICAgICAsIG1jTGVmdD1pWmhpaHUuJG1haW4ub2Zmc2V0KCkubGVmdAogICAgICAgICAgLCAkY3Q9JGNtLmNsb3Nlc3QoJy56dS1tYWluLWNvbnRlbnQtaW5uZXInKQogICAgICAgICAgLCBjdE1hcmdpbkw9cGFyc2VJbnQoJGN0LmNzcygnbWFyZ2luLWxlZnQnKSkKICAgICAgICAgICwgY3RXaWR0aD0kY3Qud2lkdGgoKStjdE1hcmdpbkwKICAgICAgICAgICwgY3RMZWZ0PSRjdC5vZmZzZXQoKS5sZWZ0LWN0TWFyZ2luTAogICAgICAgICAgLCAkbWV0YT0kY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpCiAgICAgICAgICAsIG10V2lkdGg9JG1ldGEuaW5uZXJXaWR0aCgpCiAgICAgICAgICAsIG1pbldpZHRoPWlaaGlodS4kbWFpbi53aWR0aCgpLWN0V2lkdGgKICAgICAgICAgICwgY21XaWR0aD1tdFdpZHRoCiAgICAgICAgICAsIG1heFdpZHRoPXdpbldpZHRoLWN0V2lkdGgKICAgICAgICAgICwgbz1mdW5jdGlvbigpewogICAgICAgICAgICAgICAgJGNtLmF0dHIoJ29wZW5lZCcsJzEnKTsKICAgICAgICAJCWlmKCEkYWMpewogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAJCX0KICAgICAgICAgICAgICAgIHZhciBjdXJyVG9wPV9kb2MuYm9keS5zY3JvbGxUb3AKICAgICAgICAgICAgICAgICAgLCAkbj0kYWMubmV4dCgpLCRuPSRuLmxlbmd0aD8kbjokYWMucGFyZW50KCkubmV4dCgpCiAgICAgICAgICAgICAgICAgICwgdD0kYWMub2Zmc2V0KCkudG9wLWlaaGlodS4kbWFpbi5vZmZzZXQoKS50b3AKICAgICAgICAgICAgICAgICAgLCBiPSRhYy5vZmZzZXQoKS50b3AtaVpoaWh1LiRtYWluLm9mZnNldCgpLnRvcAogICAgICAgICAgICAgICAgICAsIHc9JGFjLndpZHRoKCkKICAgICAgICAgICAgICAgICAgLCBpbkFuc3dlcj0kYWMuaXMoJy56bS1pdGVtLWFuc3dlcicpCiAgICAgICAgICAgICAgICAgICwgaW5RdWVzdGlvbj0kYWMuaXMoJyN6aC1xdWVzdGlvbi1kZXRhaWwnKQogICAgICAgICAgICAgICAgICAsICRxdWVzdGlvbk1ldGE9JCgnI3poLXF1ZXN0aW9uLW1ldGEtd3JhcCcpLy9xdWVzdGlvbl9tZXRhCiAgICAgICAgICAgICAgICAgICwgaD1pblF1ZXN0aW9uPyRxdWVzdGlvbk1ldGEub2Zmc2V0KCkudG9wKyRxdWVzdGlvbk1ldGEuaGVpZ2h0KCkrcGFyc2VJbnQoJHF1ZXN0aW9uTWV0YS5jc3MoJ3BhZGRpbmctYm90dG9tJykpLWlaaGlodS4kbWFpbi5vZmZzZXQoKS50b3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDokYWMuaGVpZ2h0KCkrcGFyc2VJbnQoJGFjLmNzcygncGFkZGluZy1ib3R0b20nKSkrcGFyc2VJbnQoJG4uY3NzKCdwYWRkaW5nLXRvcCcpKQogICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgaWYoISRhYy5maW5kKCcuaXpoX3RhcGVfYSwuaXpoX3RhcGVfYicpLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAkYWMKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ2l6aF90YXBlX2EnIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnaXpoX3RhcGVfYicgfSkpCiAgICAgICAgICAgICAgICBpZighJGNtKSRjbT0kYWMuZmluZCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICBpZigkY20ubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICBpZighJGNtLmF0dHIoJ3RhYmluZGV4JykpewogICAgICAgICAgICAgICAgICAgICAgICAkY20uYXR0cigndGFiaW5kZXgnLCctMScpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKGluUXVlc3Rpb24pewogICAgICAgICAgICAgICAgICAgICAgICAkKCcjaXpoX1F1ZXN0aW9uU2hhZG93JykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOmgKICAgICAgICAgICAgICAgICAgICAgICAgICAsICdtYXJnaW4tYm90dG9tJzotaAogICAgICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVzdGlvbk1ldGEubmV4dCgnOnZpc2libGUnKS5hbmRTZWxmKCkuYWRkQ2xhc3MoJ2l6aF9ub0JvcmRlcicpOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAkYWMuYWRkQ2xhc3MoJ2l6aF9ib3hTaGFkb3cnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJGFjLmZpbmQoJy5pemhfdGFwZV9hJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzonYWJzb2x1dGUnCiAgICAgICAgICAgICAgICAgICAgICAsICd3aWR0aCc6MQogICAgICAgICAgICAgICAgICAgICAgLCAnaGVpZ2h0JzpoCiAgICAgICAgICAgICAgICAgICAgICAsICd0b3AnOjAKICAgICAgICAgICAgICAgICAgICAgICwgJ21hcmdpbi1sZWZ0Jzp3LTEKICAgICAgICAgICAgICAgICAgICAgICwgJ3otaW5kZXgnOicxMDAwMCcKICAgICAgICAgICAgICAgICAgICAgICwgJ2JhY2tncm91bmQtY29sb3InOicjZmZmJwogICAgICAgICAgICAgICAgICAgIH0pLnNob3coKTsKICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5ib3goCiAgICAgICAgICAgICAgICAgICAgICAgICRjbS5jc3MoeydsZWZ0JzptdFdpZHRoLTF9KS5hdHRyKCdpemhfaW5RdWVzdGlvbicsaW5RdWVzdGlvbj8nMSc6JzAnKS5yZW1vdmVBdHRyKCdpemgtb3BlbmluZycpCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkKCcubWVudGlvbi1wb3B1cCcpLmF0dHIoJ2RhdGEtYWlkJywkYWMuYXR0cignZGF0YS1haWQnKSk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAkYWMuZmluZCgnLnp1LXF1ZXN0aW9uLWFuc3dlci1tZXRhLWNvbW1lbnQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGFjLmZpbmQoJy5pemhfdGFwZV9iJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgLCAnd2lkdGgnOjEKICAgICAgICAgICAgICAgICAgLCAnaGVpZ2h0JzpoCiAgICAgICAgICAgICAgICAgICwgJ3RvcCc6MAogICAgICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6dwogICAgICAgICAgICAgICAgICAsICd6LWluZGV4JzonOTk5OCcKICAgICAgICAgICAgICAgICAgLCAnYmFja2dyb3VuZC1jb2xvcic6JyNlZWUnCiAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICAvLyRhYy5jc3MoJ2JvcmRlci1jb2xvcicsJyM5OTk5OTknKTsKICAgICAgICAgICAgICAgIC8vJG4uY3NzKCdib3JkZXItY29sb3InLCcjOTk5OTk5Jyk7CiAgICAgICAgICAgICAgICAkKCcuemgtYmFja3RvdG9wJykuY3NzKCd2aXNpYmlsaXR5JywnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICBpWmhpaHUuJGJvZHkuc2Nyb2xsVG9wKGN1cnJUb3ApOwogICAgICAgICAgICAgICAgaWYoaWNtRm9jdXMpewogICAgICAgICAgICAgICAgICAgIHZhciAkaWNtPSQoaWNtRm9jdXMpLmF0dHIoJ2l6aF9oaWxpZ2h0JywnMScpCiAgICAgICAgICAgICAgICAgICAgICAsICRsaXN0PSRpY20uY2xvc2VzdCgnLnptLWNvbW1lbnQtbGlzdCcpOwogICAgICAgICAgICAgICAgICAgICRsaXN0LnNjcm9sbFRvcChpY21Gb2N1cy5vZmZzZXRUb3AtJGxpc3QuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuSGlMaWdodEl0ZW09aWNtRm9jdXM7CiAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuSGlMaWdodENvbG9yPSdyZ2IoMjU1LDI1NSwxNjApJzsKICAgICAgICAgICAgICAgICAgICAkaWNtLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpWmhpaHU9d2luZG93LmlaaGlodTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1JiZpWmhpaHUuQ29tbWVudC5IaUxpZ2h0SXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGlaaGlodS5Db21tZW50LkhpTGlnaHRJdGVtKS5yZW1vdmVBdHRyKCdpemhfaGlsaWdodCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgIGlmKG1heFdpZHRoPjU0OSltYXhXaWR0aD01NDk7CiAgICAgICAgaWYoY21XaWR0aD5tYXhXaWR0aCkKICAgICAgICAgICAgY21XaWR0aD1tYXhXaWR0aDsKICAgICAgICBpZihjbVdpZHRoPG1pbldpZHRoKQogICAgICAgICAgICBjbVdpZHRoPW1pbldpZHRoOwogICAgICAgICRjbS5hZGRDbGFzcygnaXpoX2JveFNoYWRvdycpLmNzcygkLmV4dGVuZChjc3NfY29tbWVudCx7J3dpZHRoJzpjbVdpZHRoLTl9KSk7CiAgICAgICAgLy9pZighJGNtLmlzKCcuZW1wdHknKSkKICAgICAgICAgICAgJGNtLmNzcyh7J3BhZGRpbmcnOicxMDBweCAwcHggMHB4IDdweCd9KTsKICAgICAgICAkKCdpLnptLWNvbW1lbnQtYnViYmxlJywkY20pLmhpZGUoKTsKICAgICAgICBpZihub0NvbW1lbnRPcGVuaW5nKXsKICAgICAgICAgICAgdmFyIGNtV2lkdGhPdmVyPWNtV2lkdGgtd2luV2lkdGgKICAgICAgICAgICAgICAsIHNoaWZ0TGVmdD1jbVdpZHRoT3ZlcitjdFdpZHRoK2N0TGVmdAogICAgICAgICAgICA7CiAgICAgICAgICAgIGlmKHNoaWZ0TGVmdD4wKXsKICAgICAgICAgICAgICAgIGlmKHNoaWZ0TGVmdD5jdExlZnQpe3NoaWZ0TGVmdD1tY0xlZnQ7fQogICAgICAgICAgICAgICAgZWxzZSBpZihjbVdpZHRoT3Zlcj4wKXtzaGlmdExlZnQtPWNtV2lkdGhPdmVyO30KICAgICAgICAgICAgfQogICAgICAgICAgICBpZihzaGlmdExlZnQ8MCl7c2hpZnRMZWZ0PTA7fQogICAgICAgICAgICBpZihzaGlmdExlZnQgJiYgJGFjKXsKICAgICAgICAgICAgICAgICRjdC5jc3Moeydwb3NpdGlvbic6J3JlbGF0aXZlJywnbGVmdCc6MH0pLmFuaW1hdGUoe2xlZnQ6LXNoaWZ0TGVmdH0sbyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGN0LmNzcyh7J3Bvc2l0aW9uJzoncmVsYXRpdmUnLCdsZWZ0Jzotc2hpZnRMZWZ0fSk7CiAgICAgICAgICAgICAgICBvKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgbygpOwogICAgICAgIH0JCiAgICB9OwogICAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKCRhYywkY20pewogICAgICAgIGlmKCEkY20pJGNtPSRhYy5maW5kKCcuem0tY29tbWVudC1ib3gnKTsKICAgICAgICB2YXIgJGN0PSRjbS5jbG9zZXN0KCcuenUtbWFpbi1jb250ZW50LWlubmVyJyk7CiAgICAgICAgdmFyIG89ZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJywnJyk7CiAgICAgICAgICAgIGlmKCEkYWMpcmV0dXJuOwogICAgICAgICAgICB2YXIgJG49JGFjLm5leHQoKQogICAgICAgICAgICAgICwgJG49JG4ubGVuZ3RoPyRuOiRhYy5wYXJlbnQoKS5uZXh0KCkKICAgICAgICAgICAgICAsIGluUXVlc3Rpb249JGFjLmlzKCcjemgtcXVlc3Rpb24tZGV0YWlsJyk7CiAgICAgICAgICAgIGlmKCEkYWMpe3JldHVybjt9CiAgICAgICAgICAgIGlmKGluUXVlc3Rpb24pewogICAgICAgICAgICAgICAgJCgnI2l6aF9RdWVzdGlvblNoYWRvdycpLmhpZGUoKTsKICAgICAgICAgICAgICAgICQoJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAnKS5uZXh0KCc6dmlzaWJsZScpLmFuZFNlbGYoKS5yZW1vdmVDbGFzcygnaXpoX25vQm9yZGVyJyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGFjLnJlbW92ZUNsYXNzKCdpemhfYm94U2hhZG93Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8kYWMuY3NzKCdib3JkZXItY29sb3InLCcjREREREREJyk7CiAgICAgICAgICAgIC8vJG4uY3NzKCdib3JkZXItY29sb3InLCcjREREREREJyk7CiAgICAgICAgICAgICQoJy5pemhfdGFwZV9hOnZpc2libGUsLml6aF90YXBlX2I6dmlzaWJsZScpLmhpZGUoKTsKICAgICAgICAgICAgJCgnLnpoLWJhY2t0b3RvcCcpLmNzcygndmlzaWJpbGl0eScsJ3Zpc2libGUnKTsKICAgICAgICB9OwoKICAgICAgICBpZihpWmhpaHUuQ29tbWVudC5PcGVuaW5nID09ICRjbS5nZXQoMCkpewogICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5PcGVuaW5nID0gbnVsbDsKICAgICAgICAgICAgJGN0LmFuaW1hdGUoe2xlZnQ6MH0sbyk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGlmKCEkYWMpeyRjdC5jc3Moe2xlZnQ6MH0pO30KICAgICAgICAgICAgbygpOwogICAgICAgIH0KICAgICAgICAKICAgIH07CiAgICB0aGlzLnByb2Nlc3NDb21tZW50ID0gZnVuY3Rpb24oJGNtLGZvY3VzTmFtZSl7CiAgICAgICAgdmFyIGxvYWRpbmc9ZmFsc2U7CiAgICAgICAgaWYoJGNtLmlzKCcuem0tY29tbWVudC1zcGlubmVyJykpewogICAgICAgICAgICAkY209JGNtLmNsb3Nlc3QoJy56bS1jb21tZW50LWJveCcpOwogICAgICAgICAgICBsb2FkaW5nPXRydWU7CiAgICAgICAgfQogICAgICAgIGlmKCEkY20uaXMoJy56bS1jb21tZW50LWJveCcpKXJldHVybjsKICAgICAgICB2YXIgJGl0ZW09aVpoaWh1LmdldEl0ZW0oJGNtKTsKICAgICAgICBpZihpWmhpaHUuQ29tbWVudC5SaWdodENvbW1lbnQmJmxvYWRpbmcpewogICAgICAgICAgICB2YXIgY21MZWZ0PSRpdGVtLndpZHRoKCktMTsKICAgICAgICAgICAgJGNtLmNzcyh7J2xlZnQnOmNtTGVmdCwnd2lkdGgnOjIxNiwnei1pbmRleCc6JzEwMDAwJ30pOwogICAgICAgIH0KICAgICAgICBpZigkY20uZmlsdGVyKCcuem0tY29tbWVudC1ib3gnKS5oYXMoJy56bS1jb21tZW50LWxpc3QnKS5sZW5ndGgpewovKiBDb2xsZWN0aW9ucyBmb3IgY29tbWVudAogICAgICAgICAgICAkY20uZmluZCgnLnptLWNvbW1lbnQtZWRpdGFibGUnKS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIHZhciAkYz0kKGV2ZW50LnRhcmdldCksJGNtPSRjLmNsb3Nlc3QoJy56bS1jb21tZW50LWJveCcpOwogICAgICAgICAgICAgICAgaWYoJGMuaXMoJ2EubWVtYmVyX21lbnRpb24nKSl7CiAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmNoaWxkcmVuKCcuaXpoX2NvbGxlY3Rpb25zJykubGVuZ3RoPD0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz0iaXpoX2NvbGxlY3Rpb25zIj5sb2FkaW5nLi4uPC9kaXY+JykuYmluZCgnbW91c2VvdmVyJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmJpbmQoJ21vdXNlb3V0JyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKCRjbSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRjLmJpbmQoJ21vdXNlb3ZlcicsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjZT0kKHRoaXMpLmNsb3Nlc3QoJy56bS1jb21tZW50LWVkaXRhYmxlJyksJGNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRjbS5jaGlsZHJlbignLml6aF9jb2xsZWN0aW9ucycpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm90dG9tJzokKHRoaXMpLmhlaWdodCgpLSQodGhpcykucG9zaXRpb24oKS50b3AtMQogICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOiQodGhpcykucG9zaXRpb24oKS5sZWZ0CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgJC5wb3N0KCdodHRwOi8vd3d3LnpoaWh1LmNvbScrJCh0aGlzKS5hdHRyKCdocmVmJykrJy9jb2xsZWN0aW9ucycKICAgICAgICAgICAgICAgICAgICAgICAgICAsICQucGFyYW0oe194c3JmOiQoJ2lucHV0W25hbWU9X3hzcmZdJykudmFsKCl9KQogICAgICAgICAgICAgICAgICAgICAgICAgICwgZnVuY3Rpb24ocmVzdWx0LHN0YXR1cyx4aHIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkYy5iaW5kKCdtb3VzZW91dCcsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjZT0kKHRoaXMpLmNsb3Nlc3QoJy56bS1jb21tZW50LWVkaXRhYmxlJyksJGNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRjbS5jaGlsZHJlbignLml6aF9jb2xsZWN0aW9ucycpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiovCiAgICAgICAgICAgIGlmKGlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgICAgICAgICAkY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpLmZpbmQoJy50b2dnbGUtY29tbWVudCcpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICB2YXIgJG9wZW5lZEJ5PSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICwgJGFjPSRvcGVuZWRCeS5jbG9zZXN0KCcuem0taXRlbS1tZXRhJykKICAgICAgICAgICAgICAgICAgICAgICwgJGNtPSgkYWMucGFyZW50KCkuaXMoJy56bS1pdGVtLW1ldGEuZmVlZC1tZXRhJyk/JGFjLnBhcmVudCgpOiRhYykuZmluZCgnLnptLWNvbW1lbnQtYm94JykuY3NzKCd2aXNpYmlsaXR5JywnaGlkZGVuJykKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaXRlbT1pWmhpaHUuZ2V0SXRlbSgkY20pOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkY20uaXMoJzpoaWRkZW4nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5vcGVuKCRpdGVtLCRjbSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuY2xvc2UoJGl0ZW0sJGNtKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vaWYoJGNtLmlzKCcuZW1wdHknKSkgcmV0dXJuOwogICAgICAgICAgICB2YXIgJGxpc3Q9JGNtLmZpbmQoJy56bS1jb21tZW50LWxpc3QnKTsKICAgICAgICAgICAgJGxpc3QuYmluZCgnRE9NTm9kZUluc2VydGVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIC8vdXRpbHMub2JzZXJ2ZURPTU5vZGVBZGRlZCgkbGlzdFswXSxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIAkvKmlmKCFldmVudC5hZGRlZE5vZGVzKXJldHVybjsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOb2RlcyAnK2V2ZW50LmFkZGVkTm9kZXMubGVuZ3RoKycgaW5zZXJ0ZWQnKTsKICAgICAgICAgICAgCWZvcih2YXIgaT0wO2k8ZXZlbnQuYWRkZWROb2Rlcy5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgCQl2YXIgJGljbT0kKGV2ZW50LmFkZGVkTm9kZXNbaV0pOwogICAgICAgICAgICAgICAgfSovCiAgICAgICAgICAgICAgICB2YXIgJGljbT0kKGV2ZW50LnRhcmdldCkuZmlsdGVyKCcuem0taXRlbS1jb21tZW50LC56bS1jb21tZW50LWZvcm0nKTsKICAgICAgICAgICAgICAgIGlmKCEkaWNtLmxlbmd0aClyZXR1cm47CiAgICAgICAgICAgICAgICB2YXIgJGxpc3Q9JCh0aGlzKQogICAgICAgICAgICAgICAgICAsICRjbT0kbGlzdC5jbG9zZXN0KCcuem0tY29tbWVudC1ib3g6dmlzaWJsZScpOwogICAgICAgICAgICAgICAgaWYoJGljbS5pcygnLnptLWl0ZW0tY29tbWVudCcpKXsKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRpY20pOwogICAgICAgICAgICAgICAgICAgIGlmKGlaaGlodS5RdWlja0Jsb2NrKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnQWRkaW5nIFF1aWNrQmxvY2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suYWRkUXVpY2tCbG9ja0luT25lQ29tbWVudCgkaWNtKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgJGxpc3QuY3NzKCdoZWlnaHQnLCcxMDAlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRpY20uc2hvdygpLmJpbmQoJ0RPTU5vZGVSZW1vdmVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGljbT0kKGV2ZW50LnRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighJGljbS5pcygnLnptLWl0ZW0tY29tbWVudCcpKXJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbGlzdD0kaWNtLmhpZGUoKS5jbG9zZXN0KCcuem0tY29tbWVudC1saXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkY209JGxpc3QuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94OnZpc2libGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjbS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1JlZnJlc2hpbmcgY29tbWVudCBsaXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGxpc3QuY2hpbGRyZW4oKS5sZW5ndGg9PTEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCcsJGNtKS5hZGQoJy5pemgtYnV0dG9ucy1jbS1SJywkY20pLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuYm94KCRjbSxmYWxzZSxmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjbS5sZW5ndGgpewogICAgICAgICAgICAJICAgICAgICAgICAgdmFyIGNvdW50Tm93PSRsaXN0LmNoaWxkcmVuKCkubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgIAkgICwgY291bnRBbGw9cGFyc2VJbnQoJGNtLmF0dHIoJ2RhdGEtY291bnQnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjb3VudFJlc3Q9Y291bnRBbGwtY291bnROb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBub3RBbGw9JCh0aGlzKS5oYXMoJy5sb2FkLW1vcmUnKS5sZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgCTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCghbm90QWxsKSYmY291bnRSZXN0PjEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgCXJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1JlZnJlc2hpbmcgY29tbWVudCBsaXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCcsJGNtKS5hZGQoJy5pemgtYnV0dG9ucy1jbS1SJywkY20pLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20sZmFsc2UsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobm90QWxsfHxjb3VudFJlc3Q8MCkkbGlzdC5zY3JvbGxUb3AoJGljbS5nZXQoMCkub2Zmc2V0VG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKCRpY20uaXMoJy56bS1jb21tZW50LWZvcm0nKSl7CiAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHJjbT0kaWNtOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGljbT0kcmNtLmNsb3Nlc3QoJy56bS1pdGVtLWNvbW1lbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyY20uZmluZCgnYS56bS1jb21tZW50LWNsb3NlLnptLWNvbW1hbmQtY2FuY2VsJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtZm9ybScpLmhpZGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkY209JHJjbS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3g6dmlzaWJsZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjbS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5ib3goJGNtLGZhbHNlLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyY20ucGFyZW50KCkuZmluZCgnYS5yZXBseS56bS1jb21tZW50LW9wLWxpbmsnKS5jbGljayhmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyY209JCh0aGlzKS5jbG9zZXN0KCcuem0tY29tbWVudC1jb250ZW50LXdyYXAnKS5jaGlsZHJlbignLnptLWNvbW1lbnQtZm9ybScpLnRvZ2dsZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRpY209JCh0aGlzKS5jbG9zZXN0KCcuem0taXRlbS1jb21tZW50JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGxpc3Q9JGljbS5jbG9zZXN0KCcuem0tY29tbWVudC1saXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGNtPSRsaXN0LmNsb3Nlc3QoJy56bS1jb21tZW50LWJveDp2aXNpYmxlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20sZmFsc2UsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcmNtLmlzKCc6dmlzaWJsZScpKSRsaXN0LnNjcm9sbFRvcCgkaWNtLmdldCgwKS5vZmZzZXRUb3AtJGxpc3QuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyY20udG9nZ2xlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5ib3goJGNtLGZhbHNlLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaXN0LnNjcm9sbFRvcCgkaWNtLmdldCgwKS5vZmZzZXRUb3AtJGxpc3QuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgY21DbG9zZT1mdW5jdGlvbihldmVudCxhbHNvU2Nyb2xsVG9WaWV3Qm90dG9tKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICAJCWlmKCQodGhpcykuaXMoJ1tuYW1lPWNsb3NlZm9ybV0nKSYmKCEkY20uaXMoJy5lbXB0eScpKSlyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgdmFyICRpdGVtPWlaaGlodS5nZXRJdGVtKCRjbSkvLy5hdHRyKCd0YWJpbmRleCcsJy0xJykuZm9jdXMoKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpCiAgICAgICAgICAgICAgICAgICAgICAsICRpdGVtTWV0YT0kY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpCiAgICAgICAgICAgICAgICAgICAgICAsIGFsc29TY3JvbGw9dGhpcy5nZXRBdHRyaWJ1dGUoJ2l6aC1hbHNvU2Nyb2xsVG9WaWV3Qm90dG9tJyl8fCcnCiAgICAgICAgICAgICAgICAgICAgICAsIHNjcm9sbFRvcD0oZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApP2RvY3VtZW50LmJvZHkuc2Nyb2xsVG9wOmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoYWxzb1Njcm9sbCE9PScxJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtTWV0YS5maW5kKCcudG9nZ2xlLWNvbW1lbnQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcD1zY3JvbGxUb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wPXNjcm9sbFRvcDsKICAgICAgICAgICAgICAgICAgICAgICAgfSwxMDApOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50Lm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20oJGl0ZW1NZXRhLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtTWV0YS5maW5kKCcudG9nZ2xlLWNvbW1lbnQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIH0sZmFsc2UsdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLCAkYnRuQ0M9JCgnPGE+Jyx7CiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonenUtcXVlc3Rpb24tYW5zd2VyLW1ldGEtY29tbWVudCBpemgtYnV0dG9uLWNjJwogICAgICAgICAgICAgICAgICAsIGhyZWY6J2phdmFzY3JpcHQ6dm9pZCgwKTsnCiAgICAgICAgICAgICAgICAgICwgY2xpY2s6Y21DbG9zZQogICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkdCTmlLbotbfor4Torrrlubbot7Povazoh7PmiYDlsZ7lm57nrZQnCiAgICAgICAgICAgICAgICB9KS50ZXh0KCfmlLbotbcnKQogICAgICAgICAgICAgICwgJGJ1dHRvbnNMPSQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAJJ2NsYXNzJzonaXpoLWJ1dHRvbnMtY20tTCcKICAgICAgICAgICAgICAgIH0pLnByZXBlbmRUbygkY20pCiAgICAgICAgICAgICAgLCAkYnV0dG9uc1I9JCgnPGRpdj4nLHsKICAgICAgICAgICAgICAgIAknY2xhc3MnOidpemgtYnV0dG9ucy1jbS1SJwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgOwogICAgICAgICAgICBpZihpWmhpaHUuQ29tbWVudC5SaWdodENvbW1lbnQpewogICAgICAgICAgICAgICAgJGNtLmNoaWxkcmVuKCcuem0tY29tbWVudC1mb3JtJykuZmluZCgnW25hbWU9Y2xvc2Vmb3JtXScpLmNsaWNrKGNtQ2xvc2UpOwogICAgICAgICAgICAgICAgJGJ0bkNDLmNsb25lKHRydWUpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCIvc3RhdGljL2ltZy9zcHJpdGVzLTEuOS4yLnBuZyIpJwogICAgICAgICAgICAgICAgICAsICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJy0yNjFweCAtNjJweCcKICAgICAgICAgICAgICAgICAgLCAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JwogICAgICAgICAgICAgICAgICAsICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycKICAgICAgICAgICAgICAgICAgLCAnd2lkdGgnOiAxNQogICAgICAgICAgICAgICAgICAsICdoZWlnaHQnOiAxNQogICAgICAgICAgICAgICAgICAsICdwb3NpdGlvbic6ICdhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgLCAnbGVmdCc6IDAKICAgICAgICAgICAgICAgICAgLCAndG9wJzogMAogICAgICAgICAgICAgICAgICAsICd6LWluZGV4JzogJzEwMDAwJwogICAgICAgICAgICAgICAgfSkuYXR0cignZGF0YS10aXAnLCdzJGwk5pS26LW36K+E6K66JykudGV4dCgnJykucHJlcGVuZFRvKCRjbSkKICAgICAgICAgICAgICAgICRidXR0b25zUi5wcmVwZW5kVG8oJGNtKTsKICAgICAgICAgICAgICAgIGlmKCRsaXN0LmNoaWxkcmVuKCkubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgICAgICAkYnV0dG9uc1IuaGlkZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGJ0bkNDLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2Zsb2F0JzonbGVmdCcKICAgICAgICAgICAgICAgICAgLCAnbWFyZ2luLWxlZnQnOjcKICAgICAgICAgICAgICAgIH0pLmF0dHIoJ2l6aC1hbHNvU2Nyb2xsVG9WaWV3Qm90dG9tJywnMScpLnByZXBlbmQoJzxpIGNsYXNzPSJ6LWljb24taXpoLWZvbGQiLz4nKS5wcmVwZW5kVG8oJGJ1dHRvbnNMKTsKICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2l6aC1idXR0b24gaXpoLWJhY2stdG9wJwogICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkbCTov5Tlm57pobbpg6gnCiAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMucGFyZW50Tm9kZSkubmV4dEFsbCgnLnptLWNvbW1lbnQtbGlzdCcpLnNjcm9sbFRvcCgwKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGk+JywgeyAnY2xhc3MnOiAnemctaWNvbiB6LWljb24tZm9sZCcgfSkKICAgICAgICAgICAgICAgICkuYWRkKAogICAgICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidpemgtYnV0dG9uIGl6aC1zaG93LWdvb2QnCiAgICAgICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkbCTkurrmsJTlppnor4QnCiAgICAgICAgICAgICAgICAgICAgICAsIGhyZWY6J2phdmFzY3JpcHQ6dm9pZCgwKTsnCiAgICAgICAgICAgICAgICAgICAgICAsIGNsaWNrOmZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZT0kKHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkYz0kZS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3gnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGw9JGMuZmluZCgnLnptLWNvbW1lbnQtbGlzdCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkbj0kbC5maW5kKCcuem0taXRlbS1jb21tZW50JykuaGFzKCdzcGFuLmxpa2UtbnVtLm5pbCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuaGFzQ2xhc3MoJ29uJykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYXR0cignc2Nyb2xsVG9wX3Nob3dnb29kJywkbFswXS5zY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG4uc2hvdygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuYm94KCRjLGZhbHNlLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlLnJlbW92ZUNsYXNzKCdvbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHBhcnNlSW50KCRlLmF0dHIoJ3Njcm9sbFRvcCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFpc05hTihzY3JvbGxUb3ApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsLnNjcm9sbFRvcChzY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlLmF0dHIoJ3Njcm9sbFRvcCcsJGxbMF0uc2Nyb2xsVG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkYyxmYWxzZSxmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5hZGRDbGFzcygnb24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBwYXJzZUludCgkZS5hdHRyKCdzY3JvbGxUb3Bfc2hvd2dvb2QnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighaXNOYU4oc2Nyb2xsVG9wKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbC5zY3JvbGxUb3Aoc2Nyb2xsVG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uIHpnLWljb24tY29tbWVudC1saWtlJyB9KQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnZmxvYXQnOidyaWdodCcKICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKCRidXR0b25zUik7CgogICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuUGFnZU5vdFNjcm9sbCA9IHRydWU7CiAgICAgICAgICAgICAgICAkbGlzdC5zY3JvbGwoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgLCAkYj0kZS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3gnKS5maW5kKCcuaXpoLWJhY2stdG9wJykKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoJGUuaGVpZ2h0KCkgPCB0aGlzLnNjcm9sbFRvcCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRiLnJlbW92ZUNsYXNzKCdvZmYnKTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgJGIuYWRkQ2xhc3MoJ29mZicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLnNjcm9sbCgpOwogICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuUGFnZU5vdFNjcm9sbCA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIHZhciBpY21Gb2N1cz1udWxsOwogICAgICAgICAgICAgICAgICAgICRsaXN0LmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiRjbS5pcygnLmVtcHR5Jyk/Jyc6JzEwMCUnCiAgICAgICAgICAgICAgICAgICAgICAsICdvdmVyZmxvdyc6J2F1dG8nCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkbGlzdC5jaGlsZHJlbignLnptLWl0ZW0tY29tbWVudCcpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGljbT0kKGUpOwogICAgICAgICAgICAgICAgICAgICRpY20uYmluZCgnRE9NTm9kZVJlbW92ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpY209JChldmVudC50YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICBpZighJGljbS5pcygnLnptLWl0ZW0tY29tbWVudCcpKXJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjbT0kaWNtLmhpZGUoKS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3g6dmlzaWJsZScpOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkY20ubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtbGlzdCcpLmNoaWxkcmVuKCkubGVuZ3RoPT0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCcsJGNtKS5hZGQoJy5pemgtYnV0dG9ucy1jbS1SJywkY20pLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20sZmFsc2UsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgJGljbS5maW5kKCdzcGFuLmxpa2UtbnVtJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGlwPWUuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcCcpLnJlcGxhY2UoJ3MkciQnLCdzJGwkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRpcCE9JycpZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwJyx0aXApOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmICghaWNtRm9jdXMmJmZvY3VzTmFtZSYmZm9jdXNOYW1lIT0nJwogICAgICAgICAgICAgICAgICAgICAgICAmJiAkaWNtLmNoaWxkcmVuKCdhLnpnLWFuY2hvci1oaWRkZW5bbmFtZT0iJytmb2N1c05hbWUrJyJdJykubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWNtRm9jdXM9JGljbS5nZXQoMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5vcGVuKCRpdGVtLCRjbSxpY21Gb2N1cyk7CiAgICAgICAgICAgICAgICB1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKCRjbS5jaGlsZHJlbignLnptLWNvbW1lbnQtZm9ybScpLmNoaWxkcmVuKCcuem0tY29tbWVudC1lZGl0YWJsZScpWzBdLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JChldmVudC50YXJnZXQpCiAgICAgICAgICAgICAgICAgICAgICAsICRmPSRlLmNsb3Nlc3QoJy56bS1jb21tZW50LWZvcm0nKQogICAgICAgICAgICAgICAgICAgICAgLCAkbD0kZi5wcmV2KCcuem0tY29tbWVudC1saXN0JykKICAgICAgICAgICAgICAgICAgICAgICwgJGM9JGYuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94W29wZW5lZD0xXScpCiAgICAgICAgICAgICAgICAgICAgICAsIGNoPSRjLmhlaWdodCgpCiAgICAgICAgICAgICAgICAgICAgICAsIHdpbkhlaWdodD1pWmhpaHUuJHdpbi5oZWlnaHQoKQogICAgICAgICAgICAgICAgICAgICAgLCBzY3JvbGxUb3A9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCtkb2N1bWVudC5ib2R5LnNjcm9sbFRvcAogICAgICAgICAgICAgICAgICAgICAgLCBuYXZIZWlnaHQ9aVpoaWh1LiRib2R5LmNoaWxkcmVuKCkuZmlyc3QoKS5oZWlnaHQoKQogICAgICAgICAgICAgICAgICAgICAgLCBiYXI9JCgnLnp1LWdsb2JhbC1ub3RpZnkuenUtZ2xvYmFsLW5vdGlmeS1pbmZvOnZpc2libGUnKQogICAgICAgICAgICAgICAgICAgICAgLCBiYXJIZWlnaHQ9IWJhci5sZW5ndGg/MDpiYXIub3V0ZXJIZWlnaHQoKQogICAgICAgICAgICAgICAgICAgICAgLCBiYXNlVG9wPSgoYmFySGVpZ2h0JiZiYXIuY3NzKCdwb3NpdGlvbicpPT0nZml4ZWQnKT9iYXJIZWlnaHQ6KHNjcm9sbFRvcD5iYXJIZWlnaHQ/MDpiYXJIZWlnaHQtc2Nyb2xsVG9wKSkrbmF2SGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAsIG1pbkhlaWdodD0xMTIKICAgICAgICAgICAgICAgICAgICAgICwgbWF4SGVpZ2h0PXdpbkhlaWdodC1iYXNlVG9wLTM1CiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIGlmKCEkYy5sZW5ndGgpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIGlmKCEkYy5pcygnLmVtcHR5JykmJiRsLmNoaWxkcmVuKCkubGVuZ3RoPjApewogICAgICAgICAgICAgICAgICAgICAgICBsaD0kbC5oZWlnaHQoKTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgbGg9MDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICR0PSRlLmNsb25lKCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkKICAgICAgICAgICAgICAgICAgICAJICAgIC5jc3Moeydwb3NpdGlvbic6J2Fic29sdXRlJywnei1pbmRleCc6Jy0xJywnd2lkdGgnOiRlLndpZHRoKCksJ21pbi1oZWlnaHQnOjIyfSkKICAgICAgICAgICAgICAgICAgICAgICwgZWg9JHQuaGVpZ2h0KCkKICAgICAgICAgICAgICAgICAgICAgICwgaD1NYXRoLm1heChlaCxsaCkrKGxoPT0wPzkwOjEwMCkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgJHQucmVtb3ZlKCk7JHQ9bnVsbDsKICAgICAgICAgICAgICAgICAgICBpZihpc05hTihjaCl8fGNoIT1oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJGMuYXR0cignaXpoX2NtSGVpZ2h0JyxoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuYm94KCRjLHRydWUsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZighJGYuaXMoJy5leHBhbmRlZCcpJiZldmVudC5hZGRlZE5vZGVzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRmLmNzcyh7J2hlaWdodCc6JycsJ2JvdHRvbSc6Jyd9KTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgZWgrPTMwOwogICAgICAgICAgICAgICAgICAgICAgICAkZi5jc3MobGg9PTB8fGVoPmNoP3snaGVpZ2h0JzonJywnYm90dG9tJzoyNX06eydoZWlnaHQnOmVoLCdib3R0b20nOicnfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGJ0bkNDLnByZXBlbmQoJzxpIGNsYXNzPSJ6LWljb24tZm9sZCIvPicpCiAgICAgICAgICAgICAgICAuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgLCAnY3Vyc29yJzoncG9pbnRlcicKICAgICAgICAgICAgICAgICAgLCAnbWFyZ2luLWxlZnQnOi0xCiAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOjAKICAgICAgICAgICAgICAgICAgLCAnYmFja2dyb3VuZC1jb2xvcic6JyNmYmZiZmInCiAgICAgICAgICAgICAgICAgICwgJ3BhZGRpbmcnOicycHggNXB4JwogICAgICAgICAgICAgICAgICAsICdib3R0b20nOi0yMgogICAgICAgICAgICAgICAgICAsICdib3JkZXInOicxcHggc29saWQgI2RkZCcKICAgICAgICAgICAgICAgICAgLCAnYm9yZGVyLXJhZGl1cyc6JzRweCcKICAgICAgICAgICAgICAgIH0pLmluc2VydEJlZm9yZSgkY20uZmluZCgnLnptLWNvbW1lbnQtYm94LWZ0JykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGlaaGlodS5RdWlja0Jsb2NrKXsKICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmFkZFF1aWNrQmxvY2tJbkNvbW1lbnRMaXN0KCRidXR0b25zTCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIHJldHVybiB0aGlzOwp9CgovKioKICogQGNsYXNzIE5vdGk3CiAqLwpmdW5jdGlvbiBOb3RpNyhpWmhpaHUpIHsKICAgIGlmICggdHlwZW9mIGlaaGlodSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWlaaGlodSB8fCAhaVpoaWh1LmNvbmZpZ1snTm90aTcnXSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaVpoaWh1Lk5vdGk3ID0gdGhpczsKICAgIAogICAgdGhpcy4kbm90aTcgPSAkKCcjemgtdG9wLW5hdi1saXZlLW5ldycpOwogICAgdGhpcy4kZnJhbWUgPSAkKCcuem0tbm90aTctZnJhbWUnLHRoaXMuJG5vdGk3KTsKICAgIHRoaXMuJGNvbnRlbnQgPSAkKCcuem0tbm90aTctY29udGVudC1ib2R5Jyx0aGlzLiRub3RpNyk7CiAgICB0aGlzLiRmb290ZXIgPSAkKCcuem0tbm90aTctcG9wdXAtZm9vdGVyJyx0aGlzLiRub3RpNyk7CiAgICB0aGlzLiR0YWIgPSAkKCcuem0tbm90aTctcG9wdXAtdGFiLWNvbnRhaW5lcicsJyN6aC10b3AtbmF2LWxpdmUtbmV3LWlubmVyJyk7CgogICAgdGhpcy5jc3MgPSAKICAgICAgICBbJyN6aC10b3AtbmF2LWxpdmUtbmV3IC56bS1ub3RpNy1wb3B1cC1mb290ZXIgYVt1bnJlYWRvbmx5PSIxIl17Y29sb3I6IzIyNTU5OSAhaW1wb3J0YW50O3RleHQtc2hhZG93OjAgMCAxcHggIzIyNTU5OTt9JwogICAgICAgICwnJ10uam9pbignXG4nKTsKICAgIHRoaXMuZW5oYW5jZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaVpoaWh1Lk5vdGk3LiR0YWIuZmluZCgnLnptLW5vdGk3LXBvcHVwLXRhYi1pdGVtJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICB1dGlscy5vYnNlcnZlRE9NQXR0ck1vZGlmaWVkKGUsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdmFyICRlPSQoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgICAgIGlmKCRlLmlzKCcuem0tbm90aTctcG9wdXAtdGFiLWl0ZW0uY3VycmVudCcpKXsKICAgICAgICAgICAgICAgIAl2YXIgY3VycmVudENsYXNzPSRlLmF0dHIoJ2NsYXNzJykKICAgICAgICAgICAgICAgIAkgICwgJGJGaWx0ZXJSZWFkPSQoJy5pemgtZmlsdGVyLXJlYWQnLGlaaGlodS5Ob3RpNy4kZm9vdGVyKTsKICAgICAgICAgICAgICAgIAlpZihjdXJyZW50Q2xhc3MhPSRiRmlsdGVyUmVhZC5hdHRyKCdjdXJyZW50Q2xhc3MnKSl7CiAgICAgICAgICAgICAgICAJICAgICRiRmlsdGVyUmVhZC5hdHRyKHsndW5yZWFkT25seSc6JycsJ2N1cnJlbnRDbGFzcyc6Y3VycmVudENsYXNzfSk7CiAgICAgICAgICAgICAgICAJfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBpWmhpaHUuTm90aTcuJGZvb3Rlci5hcHBlbmQoCiAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgJ2NsYXNzJzonaXpoLWZpbHRlci1yZWFkJwogICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAsICd1bnJlYWRPbmx5JzonJwogICAgICAgICAgICAgICwgY2xpY2s6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdW5yZWFkT25seT10aGlzLmdldEF0dHJpYnV0ZSgndW5yZWFkT25seScpPT0nMScKICAgICAgICAgICAgICAgICAgICAgICwgJGNvbnRlbnRWaXNpYmxlPWlaaGlodS5Ob3RpNy4kY29udGVudC5maWx0ZXIoJzp2aXNpYmxlJykKICAgICAgICAgICAgICAgICAgICAgICwgJHNjcm9sbGVyPSRjb250ZW50VmlzaWJsZS5jbG9zZXN0KCcuemgtc2Nyb2xsZXItaW5uZXInKQogICAgICAgICAgICAgICAgICAgICAgLCAkaXRlbXM9JGNvbnRlbnRWaXNpYmxlLmZpbmQoJy56bS1ub3RpNy1jb250ZW50LWl0ZW0nKQogICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICB1bnJlYWRPbmx5PSF1bnJlYWRPbmx5OwogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd1bnJlYWRPbmx5Jyx1bnJlYWRPbmx5PycxJzonJyk7CiAgICAgICAgICAgICAgICAgICAgaWYodW5yZWFkT25seSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY3JvbGxlci5hdHRyKCdzY3JvbGxUb3AnLCRzY3JvbGxlclswXS5zY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAkaXRlbXMubm90KCcudW5yZWFkJykuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gcGFyc2VJbnQoJHNjcm9sbGVyLmF0dHIoJ3Njcm9sbFRvcF91bnJlYWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFpc05hTihzY3JvbGxUb3ApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjcm9sbGVyLnNjcm9sbFRvcChzY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAkc2Nyb2xsZXIuYXR0cignc2Nyb2xsVG9wX3VucmVhZCcsJHNjcm9sbGVyWzBdLnNjcm9sbFRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtcy5ub3QoJy51bnJlYWQnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBwYXJzZUludCgkc2Nyb2xsZXIuYXR0cignc2Nyb2xsVG9wJykpOwogICAgICAgICAgICAgICAgICAgICAgICBpZighaXNOYU4oc2Nyb2xsVG9wKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY3JvbGxlci5zY3JvbGxUb3Aoc2Nyb2xsVG9wKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0pLnRleHQoJ+makOiXj+W3suivuycpCiAgICAgICAgKTsKICAgIH07CgogICAgcmV0dXJuIHRoaXM7Cn0KCi8qKgogKiBAY2xhc3MgUXVpY2tCbG9jawogKi8KZnVuY3Rpb24gUXVpY2tCbG9jayhpWmhpaHUpIHsKICAgIGlmICggdHlwZW9mIGlaaGlodSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWlaaGlodSB8fCAhaVpoaWh1LmNvbmZpZ1snUXVpY2tCbG9jayddKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpWmhpaHUuUXVpY2tCbG9jayA9IHRoaXM7CiAgICAKLyoKICAgIHZhciBjc3NfUXVpY2tCbG9jayA9IHsKICAgICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOictMTQ2cHggLTIwMnB4JwogICAgICAgICAgLCAnd2lkdGgnOjE2CiAgICAgICAgICAsICdoZWlnaHQnOjE2CiAgICAgIAl9CiAgICA7CiovCiAgICB0aGlzLlBlbmRpbmcgPSB7VXNlcnM6JywnLENvdW50OjB9OwogICAgdGhpcy5CbG9ja2luZyA9IHtVc2VyczonLCcsQ291bnQ6MH07CiAgICB0aGlzLlVuZm9sbG93ZWQgPSB7VXNlcnM6JywnLENvdW50OjB9OwogICAgdGhpcy5SZWZvbGxvd2VkID0ge1VzZXJzOicsJyxDb3VudDowfTsKICAgIHRoaXMuVXNlcnMyQiA9IFtdCiAgICB0aGlzLlVzZXJzMkJCUSA9IFtdCiAgICB0aGlzLmNzcyA9IAogICAgICAgIFsnLml6aF9ibG9ja0NhcnR7YmFja2dyb3VuZC1jb2xvcjojMDc3MUMxO3Bvc2l0aW9uOmZpeGVkO3JpZ2h0OjA7ei1pbmRleDo5O3BhZGRpbmc6MCAzMHB4IDAgNjBweDtib3JkZXI6MXB4IHNvbGlkICMwNzcxQzE7Ym9yZGVyLWxlZnQtd2lkdGg6MTBweDtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjZweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmRve2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTpibG9jazttYXJnaW46MnB4O21pbi13aWR0aDo4MHB4O3dpZHRoOjEwMCU7aGVpZ2h0OjIwcHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0LnBlbmRpbmcgLmRvOmFmdGVye3RleHQtZGVjb3JhdGlvbjpibGluaztjb2xvcjpyZWQ7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC5kbzphZnRlcntwb3NpdGlvbjpyZWxhdGl2ZTtjb250ZW50OmF0dHIoaXpoX251bTJCKTt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmRvIC5idXR0b257Y29sb3I6I2ZmZjt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmZyYW1le292ZXJmbG93LXk6YXV0bztvdmVyZmxvdy14OmhpZGRlbjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjVweDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZy10b3A6NXB4O30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAubGlzdHtkaXNwbGF5OmJsb2NrO21hcmdpbjoycHg7d2lkdGg6MTAwJTtwYWRkaW5nLXJpZ2h0OjVweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmxpc3QgLnJlbHtib3JkZXItd2lkdGg6MCAycHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjojZmZmO3dpZHRoOjI0cHg7aGVpZ2h0OjE4cHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC5saXN0LmlfZm8gLnJlbHtib3JkZXItbGVmdC1jb2xvcjojMjU5O2JhY2tncm91bmQtcG9zaXRpb246LTEyMHB4IC0xODRweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmxpc3QuZm9faSAucmVse2JvcmRlci1yaWdodC1jb2xvcjojMjU5O2JhY2tncm91bmQtcG9zaXRpb246LTEyMHB4IC0xNjRweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmxpc3QuaV9mby5mb19pIC5yZWx7YmFja2dyb3VuZC1wb3NpdGlvbjotNzhweCAtMjAwcHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkJ7ZGlzcGxheTpibG9jazttYXJnaW46MnB4IDA7cGFkZGluZzowIDQwcHggMCA2MHB4O30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAudXNlcjJCIGkuemctaWNvbntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7bWFyZ2luLXRvcDo1cHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkIgLm5hbWV7ZGlzcGxheTpibG9jaztjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwMDt3aGl0ZS1zcGFjZTpub3dyYXA7cGFkZGluZzoycHggNXB4O2JvcmRlci1yYWRpdXM6M3B4O30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAubGlzdCAudXNlcjJCLnVuZm8gLm5hbWV7YmFja2dyb3VuZC1jb2xvcjojZjAwO30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAudXNlcjJCIC5kZWx7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tbGVmdDotNC41ZW07fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkIgaS5zYXl7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tbGVmdDotNDRweDtib3JkZXItcmFkaXVzOjZweCA2cHggMCA2cHg7Ym9yZGVyOjFweCBzb2xpZCAjOTk5O3BhZGRpbmc6MCA1cHggMCAzcHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkIgaS5zYXlfMXtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi1sZWZ0Oi0xMHB4O2hlaWdodDo2cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO3dpZHRoOjZweDttYXJnaW4tdG9wOjE3cHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzk5OTt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLnVzZXIyQiBpLnNheV8ye2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luLWxlZnQ6LTlweDtoZWlnaHQ6NnB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjt3aWR0aDo2cHg7bWFyZ2luLXRvcDoxN3B4O2JvcmRlci1yYWRpdXM6MCAwIDAgNnB4O2JvcmRlcjoxcHggc29saWQgIzk5OTtib3JkZXItd2lkdGg6MCAwIDFweCAxcHh9JwogICAgICAgICwnLml6aC1xdWljay1ibG9ja3twb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDo0ZW07bWFyZ2luLXRvcDoxLjVlbTt3aGl0ZS1zcGFjZTpub3dyYXA7fScKICAgICAgICAsJy5pemgtcXVpY2stYmxvY2sgW2NsYXNzXj1pemgtcXVpY2stYmxvY2tde3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7d2hpdGUtc3BhY2U6bm93cmFwO30nCiAgICAgICAgLCcuaXpoLXF1aWNrLWJsb2NrOmFmdGVye2NvbnRlbnQ6YXR0cihpemhfbnVtMkIpO21hcmdpbi10b3A6MWVtO2Rpc3BsYXk6YmxvY2s7fScKICAgICAgICAsJy56bS1jb21tZW50LWhkIC5pemgtcXVpY2stYmxvY2stcGVuZHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjQwcHg7fScKICAgICAgICAsJycKICAgICAgICBdLmpvaW4oJ1xuJyk7CiAgICB0aGlzLnVuYmxvY2tBbGwgPSBmdW5jdGlvbigpewogICAgICAgICQoJy5ibG9ja2VkLXVzZXJzID4gLml0ZW0tY2FyZCcpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgdmFyIHVpZD0kKGUpLmF0dHIoJ2RhdGEtaWQnKTsKICAgICAgICAgICAgJC5wb3N0KCcvc2V0dGluZ3MvdW5ibG9ja3VzZXInLCQucGFyYW0oewogICAgICAgICAgICAgICAgX3hzcmY6JCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKQogICAgICAgICAgICAgICwgdWlkOnVpZAogICAgICAgICAgICB9KSxmdW5jdGlvbihyKXsKICAgICAgICAgICAgCS8vY29uc29sZS5sb2cocik7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoJICB9OwoJICB0aGlzLmRvVW5mb2xsb3cgPSBmdW5jdGlvbigpewogICAgICAgIHZhciAkZSA9IGlaaGlodS5RdWlja0Jsb2NrLlVzZXJzMkJCUS5zaGlmdCgpCiAgICAgICAgaWYodHlwZW9mICRlID09PSAndW5kZWZpbmVkJykgcmV0dXJuCgogICAgICAgIHZhciB1aWQ9JGUuYXR0cigndWlkJyk7CiAgICAgICAgJC5wb3N0KCcvbm9kZS9NZW1iZXJGb2xsb3dCYXNlVjInCiAgICAgICAgICAsICQucGFyYW0oewogICAgICAgICAgICAgICAgbWV0aG9kOid1bmZvbGxvd19tZW1iZXInCiAgICAgICAgICAgICAgLCBwYXJhbXM6SlNPTi5zdHJpbmdpZnkoeydoYXNoX2lkJzp1aWR9KQogICAgICAgICAgICAgICwgX3hzcmY6JCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAsIGZ1bmN0aW9uKHIpewogICAgICAgICAgICAgICAgICB2YXIgcXVlcnk9ZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuZGF0YSkKICAgICAgICAgICAgICAgICAgICAsIHBhcmFtcz11dGlscy5nZXRQYXJhbUluUXVlcnkocXVlcnksJ3BhcmFtcycpCiAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgZXZhbCgncGFyYW1zPScrcGFyYW1zKTsKICAgICAgICAgICAgICAgICAgdmFyIGJpZD0nZmItJytwYXJhbXMuaGFzaF9pZAogICAgICAgICAgICAgICAgICAgICwgd2hvPWJpZCsnLCcKICAgICAgICAgICAgICAgICAgICAsIHVuZm9sbG93ZWQ9aVpoaWh1LlF1aWNrQmxvY2suVW5mb2xsb3dlZAogICAgICAgICAgICAgICAgICAgICwgcmVmb2xsb3dlZD1pWmhpaHUuUXVpY2tCbG9jay5SZWZvbGxvd2VkCiAgICAgICAgICAgICAgICAgICAgLCAkY2FydERJVj0kKCcjaXpoX2Jsb2NrQ2FydCcpCiAgICAgICAgICAgICAgICAgICAgLCAkdXNlcj0kY2FydERJVi5maW5kKCcudXNlcjJCW3VpZD0nK3BhcmFtcy5oYXNoX2lkKyddJykKICAgICAgICAgICAgICAgICAgICAsICRsaXN0PSR1c2VyLmNsb3Nlc3QoJy5saXN0JykKICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAkdXNlci5wcmVwZW5kVG8oJGxpc3QubmV4dCgpLm5leHQoKSk7CiAgICAgICAgICAgICAgICAgIGlmKHVuZm9sbG93ZWQuVXNlcnMuaW5kZXhPZignLCcrd2hvKTwwKQogICAgICAgICAgICAgICAgICAgICAgdW5mb2xsb3dlZC5Vc2VycyArPSB3aG87CiAgICAgICAgICAgICAgICAgIGlmKHJlZm9sbG93ZWQuVXNlcnMuaW5kZXhPZignLCcrd2hvKT49MCkKICAgICAgICAgICAgICAgICAgICAgIHJlZm9sbG93ZWQuVXNlcnMgPSByZWZvbGxvd2VkLnJlcGxhY2UoJywnK3dobywnLCcpOwogICAgICAgICAgICB9CiAgICAgICAgKS5hbHdheXMoZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpewogICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5kb1VuZm9sbG93KCkKICAgICAgICB9KTsKCSAgfTsKICAgIHRoaXMuZG9RdWlja0Jsb2NrID0gZnVuY3Rpb24oKXsKICAgICAgICB2YXIgJGUgPSBpWmhpaHUuUXVpY2tCbG9jay5Vc2VyczJCQlEuc2hpZnQoKQogICAgICAgIGlmKHR5cGVvZiAkZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybgoKICAgICAgICB2YXIgYmxvY2tpbmcgPSBpWmhpaHUuUXVpY2tCbG9jay5CbG9ja2luZwogICAgICAgICAgLCBocmVmID0gJGUuYXR0cignaHJlZicpCiAgICAgICAgICAsIHdobyA9IGhyZWYuc3BsaXQoJy8nKS5wb3AoKSsnLCcKICAgICAgICA7CiAgICAgICAgaWYodHlwZW9mIGJsb2NraW5nID09PSAndW5kZWZpbmVkJyB8fCAhYmxvY2tpbmcpewogICAgICAgICAgICBibG9ja2luZyA9IGlaaGlodS5RdWlja0Jsb2NrLkJsb2NraW5nID0geyBVc2VyczonLCcsIENvdW50OjAgfTsKICAgICAgICB9ZWxzZSBpZihibG9ja2luZy5Vc2Vycy5pbmRleE9mKCcsJyt3aG8pID49IDApewogICAgICAgICAgICByZXR1cm47IC8vIEFscmVhZHkgYmxvY2tpbmcKICAgICAgICB9CiAgICAgICAgdmFyICRjYXJ0RElWPSQoJyNpemhfYmxvY2tDYXJ0Jyk7CiAgICAgICAgJGNhcnRESVYuYWRkQ2xhc3MoJ2Jsb2NraW5nJyk7CiAgICAgICAgYmxvY2tpbmcuVXNlcnMgKz0gd2hvOwogICAgICAgIGJsb2NraW5nLkNvdW50ICsrOwogICAgICAgICQucG9zdChocmVmKycvYmxvY2snLCQucGFyYW0oewogICAgICAgICAgICBhY3Rpb246J2FkZCcKICAgICAgICAgICwgX3hzcmY6JCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKSAKICAgICAgICB9KSxmdW5jdGlvbihyKXsKICAgICAgICAgICAgdmFyIGhyZWY9dGhpcy51cmwucmVwbGFjZSgnL2Jsb2NrJywnJykKICAgICAgICAgICAgICAsIHVzZXJJRD1ocmVmLnNwbGl0KCcvJykucG9wKCkKICAgICAgICAgICAgICAsIHdobz0nLCcrdXNlcklEKycsJwogICAgICAgICAgICAgICwgYmxvY2tpbmc9aVpoaWh1LlF1aWNrQmxvY2suQmxvY2tpbmcKICAgICAgICAgICAgOwoKICAgICAgICAgICAgaWYoMD09LS1ibG9ja2luZy5Db3VudCkkY2FydERJVi5yZW1vdmVDbGFzcygncGVuZGluZycpOwogICAgCiAgICAgICAgICAgIGlmKGJsb2NraW5nLlVzZXJzLmluZGV4T2Yod2hvKSA8IDApCiAgICAgICAgICAgICAgICByZXR1cm47IC8vIE5vIHRoaXMgdXNlciBpbiBwZW5kaW5nCiAgICAgICAgICAgICAgCiAgICAgICAgICAgIGJsb2NraW5nLlVzZXJzID0gYmxvY2tpbmcuVXNlcnMucmVwbGFjZSh3aG8sJywnKTsKICAgICAgICAgICAgJCgnI2l6aF9ibG9ja0NhcnQgLnVzZXIyQltocmVmPSInK2hyZWYrJyJdJykuZmluZCgnLmRlbCcpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgICQoJ2FbaHJlZiQ9IicraHJlZisnIl0nKS5jc3MoJ3RleHQtZGVjb3JhdGlvbicsJ2xpbmUtdGhyb3VnaCcpOwogICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUil7CiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmRvUXVpY2tCbG9jaygpCiAgICAgICAgfSk7CiAgCX07CiAgICB0aGlzLnJlc2l6ZUJsb2NrQ2FydCA9IGZ1bmN0aW9uKCRjYXJ0RElWKXsKICAgICAgICBmdW5jdGlvbiBwYXJzZUNzc1B4KCRpdGVtLCBuYW1lKSB7CiAgICAgICAgICAgIHZhciBtID0gJGl0ZW0uY3NzKG5hbWUpOwogICAgICAgICAgICBpZiAobSAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG0ucmVwbGFjZSgncHgnLCcnKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHZhciAkdXNlckRJViA9ICRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkInKTsKICAgICAgICB2YXIgJHRpdGxlQm94ID0gJCgnI2l6aF9ibG9ja0NhcnQgLmRvJyk7CiAgICAgICAgdmFyIGggPSBwYXJzZUNzc1B4KCRjYXJ0RElWLmZpbmQoJ2Rpdi5mcmFtZScpLCdwYWRkaW5nVG9wJykgCiAgICAgICAgICAgICAgICArICgkdXNlckRJVi5oZWlnaHQoKSArIHBhcnNlQ3NzUHgoJHVzZXJESVYsJ21hcmdpblRvcCcpKSAqICR1c2VyRElWLmxlbmd0aCAKICAgICAgICAgICAgICAgICsgJHRpdGxlQm94LmhlaWdodCgpCiAgICAgICAgICAgICAgICArIHBhcnNlQ3NzUHgoJHRpdGxlQm94LCAnbWFyZ2luVG9wJykKICAgICAgICAgICAgICAgICsgcGFyc2VDc3NQeCgkdGl0bGVCb3gsICdtYXJnaW5Cb3R0b20nKTsKICAgICAgICAKICAgICAgICBpZihoK2laaGlodS4kbWFpbi5vZmZzZXQoKS50b3A8aVpoaWh1LiR3aW4uaGVpZ2h0KCkpewogICAgICAgICAgICAkY2FydERJVi5jc3MoeydoZWlnaHQnOmgsJ2JvdHRvbSc6Jyd9KTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJGNhcnRESVYuY3NzKHsnaGVpZ2h0JzonJywnYm90dG9tJzowfSk7CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuZ2V0Q2FydERJVj1mdW5jdGlvbigpewogICAgICAgIHZhciAkY2FydERJVj0kKCcjaXpoX2Jsb2NrQ2FydCcpOwogICAgICAgIGlmKCEkY2FydERJVi5sZW5ndGgpewogICAgICAgICAgICAkY2FydERJVj0kKCc8ZGl2PicsIHsgaWQ6ICdpemhfYmxvY2tDYXJ0JywgJ2NsYXNzJzogJ2l6aF9ibG9ja0NhcnQnIH0pLmNzcyh7CiAgICAgICAgICAgICAgICAndG9wJzppWmhpaHUuJG1haW4ub2Zmc2V0KCkudG9wCiAgICAgICAgICAgIH0pLmFwcGVuZCgKICAgICAgICAgICAgICAgICQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonZG8nCiAgICAgICAgICAgICAgICAgICwgJ2l6aF9udW0yQic6MAogICAgICAgICAgICAgICAgICAsICd0aXRsZSc6J+S4i+S4uuOAjOWAmeWuoeOAjeWIl+ihqFxu54K55Ye75bem5LiK6KeS5Y+v5pS26LW3L+WxleW8gFxu5pWw5a2X5Li65Lq654qv5oC75pWw77yI57qi6Imy6KGo56S65LuN5pyJ5Lq654qv5q2j5b6F5YWl5YiX77yJJwogICAgICAgICAgICAgICAgfSkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOididXR0b24gZGVsQWxsJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0aXRsZTon5riF56m644CM5YCZ5a6h44CN5YiX6KGoJwogICAgICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkY2FydERJVj0kKCcjaXpoX2Jsb2NrQ2FydCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmNzcygnYm90dG9tJywnJykuZmluZCgnLmxpc3QnKS5lbXB0eSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5wYXJlbnROb2RlKS5hdHRyKCdpemhfbnVtMkInLCcwJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhcnRESVYuY3NzKCdoZWlnaHQnLCcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLnRleHQoJ+Wkp+i1picpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzonYmxvY2snCiAgICAgICAgICAgICAgICAgICAgICAsICdwb3NpdGlvbic6J2Fic29sdXRlJwogICAgICAgICAgICAgICAgICAgICAgLCAnbGVmdCc6MjQKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGlucHV0PicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOid1bmZvJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0eXBlOidjaGVja2JveCcKICAgICAgICAgICAgICAgICAgICAgICwgdGl0bGU6J+mAieS4reWQju+8jOWwhuaIkeWFs+azqOS5i+S6uuagh+WHuu+8jOaUueS7peaUvumAkO+8iOWPlua2iOWFs+azqO+8ieiuuuWkhCcKICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGNhcnRESVY9JCh0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJHVzZXJzPSQoJy5mcmFtZSAubGlzdC5pX2ZvIC51c2VyMkInLCRjYXJ0RElWKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkYWN0aW9uPSQoJy5hY3Rpb24nLHRoaXMucGFyZW50Tm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5jaGVja2VkKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZXJzLmFkZENsYXNzKCd1bmZvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb24udGV4dCgn5pS+6YCQJykuY3NzKCdwYWRkaW5nJywnMCAyZW0gMCAwJykuYXR0cigndGl0bGUnLCflr7nliJfooajlhoXmiJHlhbPms6jkuYvkurrlj5bmtojlhbPms6gnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZXJzLnJlbW92ZUNsYXNzKCd1bmZvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb24udGV4dCgn5pS255uRJykuY3NzKCdwYWRkaW5nJywnMCAwIDAgMmVtJykuYXR0cigndGl0bGUnLCflsIbkuIvliJfkurrniq/pgJDkuIDliqDlhaXpu5HlkI3ljZUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOidibG9jaycKICAgICAgICAgICAgICAgICAgICAgICwgJ2Zsb2F0JzonbGVmdCcKICAgICAgICAgICAgICAgICAgICAgICwgJ2hlaWdodCc6MjIKICAgICAgICAgICAgICAgICAgICAgICwgJ2xpbmUtaGVpZ2h0JzoyMgogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0aXRsZTon6YCJ5Lit5ZCO77yM5bCG5oiR5YWz5rOo55qE5Lq65qCH5Ye677yM5YeG5aSH44CM5Y+W5raI5YWz5rOo44CNJwogICAgICAgICAgICAgICAgICAgIH0pLnRleHQoJ+S7jui9uycpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzonYmxvY2snCiAgICAgICAgICAgICAgICAgICAgICAsICdmbG9hdCc6J2xlZnQnCiAgICAgICAgICAgICAgICAgICAgICAsICdtYXJnaW4tcmlnaHQnOjIwCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOididXR0b24gYWN0aW9uJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0aXRsZTon5bCG5LiL5YiX5Lq654qv6YCQ5LiA5Yqg5YWl6buR5ZCN5Y2VJwogICAgICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjYXJ0RElWPSQodGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCgnLnVuZm8nLHRoaXMucGFyZW50Tm9kZSkuaXMoJzpjaGVja2VkJykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5saXN0LmlfZm8gLnVzZXIyQicsJGNhcnRESVYpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suVXNlcnMyQkJRLnB1c2goJChlKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5kb1VuZm9sbG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubGlzdCAudXNlcjJCJywkY2FydERJVikuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5Vc2VyczJCQlEucHVzaCgkKGUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmRvUXVpY2tCbG9jaygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkudGV4dCgn5pS255uRJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOidibG9jaycKICAgICAgICAgICAgICAgICAgICAgICwgJ2Zsb2F0JzoncmlnaHQnCiAgICAgICAgICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6MjAKICAgICAgICAgICAgICAgICAgICAgICwgJ21hcmdpbi1yaWdodCc6LTEwCiAgICAgICAgICAgICAgICAgICAgICAsICdwYWRkaW5nJzonMCAwIDAgMmVtJwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAkKCc8YT4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonemctaWNvbiB6Zy1pY29uLWRvdWJsZS1hcnJvdycKICAgICAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGNhcnRESVY9JCgnI2l6aF9ibG9ja0NhcnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkY2FydERJVi5hdHRyKCdtaW5pJykhPScxJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmZpbmQoJy5mcmFtZScpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhcnRESVYuY3NzKHsnaGVpZ2h0JzonJywnYm90dG9tJzonJ30pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2FydERJVi5hdHRyKCdtaW5pJywnMScpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2FydERJVi5maW5kKCcuZnJhbWUnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLnJlc2l6ZUJsb2NrQ2FydCgkY2FydERJVik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmF0dHIoJ21pbmknLCcwJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6J2Fic29sdXRlJwogICAgICAgICAgICAgICAgICAgICAgLCAnbGVmdCc6MAogICAgICAgICAgICAgICAgICAgICAgLCAndG9wJzo1CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAkKCc8ZGl2PicseydjbGFzcyc6J2ZyYW1lJ30KICAgICAgICAgICAgICAgICkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2xpc3QgaV9mbyBmb19pJwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2PicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidsaXN0IGlfZm8nCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2xpc3QgZm9faScKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdj4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonbGlzdCcKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApLmFwcGVuZFRvKGlaaGlodS4kYm9keSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJGNhcnRESVYKICAgIH0KICAgIHRoaXMuaW4yQmxvY2tDYXJ0ID0gZnVuY3Rpb24odXJsLHJldHJpZWRDb3VudCl7CiAgICAgICAgdmFyICRlID0gaVpoaWh1LlF1aWNrQmxvY2suVXNlcnMyQi5zaGlmdCgpIHx8IG51bGwKICAgICAgICAgICwgJGNhcnRESVYgPSBpWmhpaHUuUXVpY2tCbG9jay5nZXRDYXJ0RElWKCkKCiAgICAgICAgJGNhcnRESVYuYWRkQ2xhc3MoJ3BlbmRpbmcnKTsKICAgICAgICBpZih0eXBlb2YgcmV0cmllZENvdW50ID09ICd1bmRlZmluZWQnKQogICAgICAgICAgICByZXRyaWVkQ291bnQgPSAwCgogICAgICAgIC8vY29uc29sZS5sb2cocmV0cmllZENvdW50KQogICAgICAgIGlmICghJGUgfHwgJGUubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgaWYoKHVybHx8JycpPT0nJyl7CiAgICAgICAgICAgICAgICAkY2FydERJVi5yZW1vdmVDbGFzcygncGVuZGluZycpCiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJC5hamF4KFsnJyx1cmxdLmpvaW4oJycpLHsKICAgICAgICAgICAgICAgICAgICB0eXBlOidHRVQnCiAgICAgICAgICAgICAgICAgICwgbWF4UmV0cnlDb3VudDogMwogICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUil7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEucGF5bG9hZCxmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5hZGRVc2VyMkIoZSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmluMkJsb2NrQ2FydChkYXRhLnBhZ2luZy5uZXh0KQogICAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbihkYXRhLHRleHRTdGF0dXMsalhIUil7CiAgICAgICAgICAgICAgICAgICAgaWYgKCsrcmV0cmllZENvdW50IDwgdGhpcy5tYXhSZXRyeUNvdW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suaW4yQmxvY2tDYXJ0KHVybCxyZXRyaWVkQ291bnQpCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLnJlbW92ZUNsYXNzKCdwZW5kaW5nJykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgdmFyIGhyZWYgPSAkZS5hdHRyKCdocmVmJykKICAgICAgICAgICwgdXNlcm5hbWUgPSBocmVmLnNwbGl0KCcvJykucG9wKCkKICAgICAgICAgICwgd2hvID0gdXNlcm5hbWUrJywnCiAgICAgICAgOwoKICAgICAgICBpZigkY2FydERJVi5maW5kKCcudXNlcjJCW2hyZWY9IicraHJlZisnIl0nKS5sZW5ndGgpewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkLmFqYXgoJy9ub2RlL01lbWJlclByb2ZpbGVDYXJkVjI/JyskLnBhcmFtKHtwYXJhbXM6SlNPTi5zdHJpbmdpZnkoeyd1cmxfdG9rZW4nOnVzZXJuYW1lfSl9KSwgewogICAgICAgICAgICB0eXBlOiAnR0VUJwogICAgICAgICAgLCB1c2VyMkI6ICRlCiAgICAgICAgICAsIG1heFJldHJ5Q291bnQ6IDMKICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKXsKICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suYWRkVXNlcjJCKGRhdGEpCiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmluMkJsb2NrQ2FydCh1cmwpCiAgICAgICAgfSkuZmFpbChmdW5jdGlvbihkYXRhLHRleHRTdGF0dXMsalhIUil7CiAgICAgICAgICAgIGlmICgrK3JldHJpZWRDb3VudCA8IHRoaXMubWF4UmV0cnlDb3VudCl7CiAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5Vc2VyczJCLnVuc2hpZnQodGhpcy51c2VyMkIpCiAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5pbjJCbG9ja0NhcnQodXJsLHJldHJpZWRDb3VudCkKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIH0KICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24oZGF0YSx0ZXh0U3RhdHVzLGpYSFIpewogICAgICAgICAgICAkKCcjaXpoX2Jsb2NrQ2FydCcpLnJlbW92ZUNsYXNzKCdwZW5kaW5nJyk7CiAgICAgICAgfSk7CiAgICB9OwogICAgdGhpcy5hZGRVc2VyMkI9ZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgaWYgKGRhdGEgPT09ICcnKSByZXR1cm4KICAgICAgICB2YXIgJGh0bWw9JChkYXRhLnJlcGxhY2UodXRpbHMuUmVnZXhTcmNQaWMsICcnKSkKICAgICAgICAgICwgaXNaSFBDPSRodG1sLmlzKCcuemgtcHJvZmlsZS1jYXJkJykKICAgICAgICAgICwgJGF2YXRhckxpbms9aXNaSFBDPyRodG1sLmZpbmQoJy5hdmF0YXItbGluazpmaXJzdCcpOiRodG1sLmZpbmQoJy56bS1pdGVtLWxpbmstYXZhdGFyOmZpcnN0JykKICAgICAgICAgICwgaHJlZj0kYXZhdGFyTGluay5hdHRyKCdocmVmJykKICAgICAgICBpZigoaHJlZnx8JycpPT0nJylyZXR1cm4KCiAgICAgICAgdmFyIHVzZXJJRD1ocmVmLnN1YnN0cig4KQogICAgICAgICAgLCB1c2VyTmFtZT1pc1pIUEM/JGF2YXRhckxpbmsudGV4dCgpOiRhdmF0YXJMaW5rLmF0dHIoJ3RpdGxlJykKICAgICAgICAgICwgJGJ0bkZvbGxvdz0kaHRtbC5maW5kKCdidXR0b25bZGF0YS1mb2xsb3ddJykKICAgICAgICAgICwgaGFzaElEPSEkYnRuRm9sbG93Lmxlbmd0aD8nJzokYnRuRm9sbG93LmF0dHIoJ2RhdGEtaWQnKQogICAgICAgICAgLCBmXz0kYnRuRm9sbG93Lmxlbmd0aCYmJGJ0bkZvbGxvdy5pcygnLnpnLWJ0bi11bmZvbGxvdycpCiAgICAgICAgICAsIF9mPSRidG5Gb2xsb3cubGVuZ3RoJiYkYnRuRm9sbG93LmlzKCdbZGF0YS1mb2xsb3dtZT0xXScpCiAgICAgICAgICAsIGNzc0Y9X2Z8fGZfPyd6Zy1pY29uIHJlbCAnOicnCiAgICAgICAgICAsICRjYXJ0RElWPWlaaGlodS5RdWlja0Jsb2NrLmdldENhcnRESVYoKQogICAgICAgICAgLCAkY2FydD0kY2FydERJVi5maW5kKCcubGlzdCcpCiAgICAgICAgICAsIHdobz0nLCcrdXNlcklEKycsJwogICAgICAgIDsKCiAgICAgICAgaWYoaGFzaElEPT0nJyl7CiAgICAgICAgICAgIHJldHVybjsgLy8gVXNlciBibG9ja2VkIG9yIHlvdSBibG9ja2VkCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKCRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkJbaHJlZj0iJytocmVmKyciXScpLmxlbmd0aCl7CiAgICAgICAgICAgIHJldHVybjsgLy8gVXNlciBhbHJlYWR5IGluIGJsb2NrIGxpc3QKICAgICAgICB9CgogICAgICAgIHZhciAkdXNlcjJCPSQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAnY2xhc3MnOid1c2VyMkInKyhmXyYmJGNhcnRESVYuZmluZCgnLmRvIC51bmZvOmNoZWNrZWQnKS5sZW5ndGg/JyB1bmZvJzonJykKICAgICAgICAgICAgICAsICdocmVmJzpocmVmCiAgICAgICAgICAgICAgLCAndWlkJzpoYXNoSUQKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmFwcGVuZCgKICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2J1dHRvbiBkZWwnCiAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHVzZXI9JCh0aGlzKS5jbG9zZXN0KCcudXNlcjJCJykKICAgICAgICAgICAgICAgICAgICAgICAgICAsICRjYXJ0RElWPSQoJyNpemhfYmxvY2tDYXJ0JykKICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAkdXNlci5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bTJCPSRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkInKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmNoaWxkcmVuKCcuZG8nKS5hdHRyKCdpemhfbnVtMkInLG51bTJCPT0wPycwJzpudW0yQj45OTk/JzFrKyc6bnVtMkIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZihudW0yQikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLnJlc2l6ZUJsb2NrQ2FydCgkY2FydERJVik7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmNzcygnaGVpZ2h0JywnJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkudGV4dCgn6LWmJykKICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAkKCc8aT4nLHsKICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidzYXknCiAgICAgICAgICAgICAgICAgICwgJ2RhdGEtdGlwJzoncCR0JCcrdXNlcklECiAgICAgICAgICAgICAgICB9KS50ZXh0KCflhqTmnoknKQogICAgICAgICAgICApLmFwcGVuZCgkKCc8aT4nLHsnY2xhc3MnOidzYXlfMSd9KQogICAgICAgICAgICApLmFwcGVuZCgkKCc8aT4nLHsnY2xhc3MnOidzYXlfMid9KQogICAgICAgICAgICApLmFwcGVuZCgkKCc8aT4nLHsnY2xhc3MnOmNzc0Z9KQogICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J25hbWUnCiAgICAgICAgICAgICAgICAgICwgaHJlZjpocmVmCiAgICAgICAgICAgICAgICAgICwgdGFyZ2V0OidfYmxhbmsnCiAgICAgICAgICAgICAgICB9KS50ZXh0KHVzZXJOYW1lKQogICAgICAgICAgICApLnNob3coKQogICAgICAgIDsKICAgICAgICBpZihmXyYmX2YpewogICAgICAgICAgICAkY2FydC5lcSgwKS5hcHBlbmQoJHVzZXIyQik7CiAgICAgICAgfWVsc2UgaWYoZl8pewogICAgICAgICAgICAkY2FydC5lcSgxKS5hcHBlbmQoJHVzZXIyQik7CiAgICAgICAgfWVsc2UgaWYoX2YpewogICAgICAgICAgICAkY2FydC5lcSgyKS5hcHBlbmQoJHVzZXIyQik7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICRjYXJ0LmVxKDMpLmFwcGVuZCgkdXNlcjJCKTsKICAgICAgICB9CiAgICAgICAgdmFyIG51bTJCPSRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkInKS5sZW5ndGg7CiAgICAgICAgJGNhcnRESVYuY2hpbGRyZW4oJy5kbycpLmF0dHIoJ2l6aF9udW0yQicsbnVtMkI9PTA/JzAnOm51bTJCPjk5OTk/JzEwaysnOm51bTJCKTsKICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5yZXNpemVCbG9ja0NhcnQoJGNhcnRESVYpOwogICAgfQogICAgdGhpcy5hZGRRdWlja0Jsb2NrID0gZnVuY3Rpb24oJGEpewogICAgICAgIHZhciAkdm90ZUluZm89JCgnLnptLWl0ZW0tdm90ZS1pbmZvJywkYSkKICAgICAgICBpZigkdm90ZUluZm8ubGVuZ3RoKXsKICAgICAgICAgICAgdmFyICR2b3RlcnM9JHZvdGVJbmZvLmNoaWxkcmVuKCcudm90ZXJzJykKICAgICAgICAgICAgaWYoJHZvdGVycy5sZW5ndGgpewogICAgICAgICAgICAgICAgdmFyIHM9WyfvvIwnLCR2b3RlSW5mby5hdHRyKCdkYXRhLXZvdGVjb3VudCcpLCfkuKrkuZ/kuI3og73lv43vvIzmnpzmlq3mkpUnXS5qb2luKCcnKQogICAgICAgICAgICAgICAgICAsIGFpZD0kYS5hdHRyKCdkYXRhLWFpZCcpfHwkYS5jaGlsZHJlbignW2l0ZW1wcm9wPSJaUmVhY3RvciJdJykuYXR0cignZGF0YS1pZCcpCiAgICAgICAgICAgICAgICAgICwgdXJsPVsnLycsJGEuYXR0cignZGF0YS10eXBlJyk9PSdwJz8ncG9zdCc6J2Fuc3dlcicsJy8nLGFpZCwnL3ZvdGVyc19wcm9maWxlJ10uam9pbignJykKICAgICAgICAgICAgICAgICQoJzxhPicse2hyZWY6J2phdmFzY3JpcHQ6OycsJ2NsYXNzJzondGV4dCd9KS50ZXh0KHMpLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgdmFyICR0PSRhLmZpbmQoJy5hdXRob3ItaW5mbyA+IGEubmFtZSwuem0taXRlbS1hbnN3ZXItYXV0aG9yLWluZm8gPiBhLmF1dGhvci1saW5rJykKICAgICAgICAgICAgICAgICAgICBpZigkdCYmJHQubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suVXNlcnMyQi5wdXNoKCR0KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5pbjJCbG9ja0NhcnQodXJsKQogICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oJHZvdGVJbmZvKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuYWRkUXVpY2tCbG9ja0luT25lQ29tbWVudCA9IGZ1bmN0aW9uKCRjbUl0ZW0pewogICAgICAgIHZhciAkd2hlcmU9JCgnLnptLWNvbW1lbnQtaGQnLCRjbUl0ZW0pOwogICAgICAgIGlmKCR3aGVyZS5maW5kKCcuaXpoLXF1aWNrLWJsb2NrLXBlbmQnKS5sZW5ndGgpcmV0dXJuOwogICAgICAgICQoJzxhPicsewogICAgICAgICAgICAnY2xhc3MnOidpemgtcXVpY2stYmxvY2stcGVuZCBpemgtYnV0dG9uJwogICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgLCAnZGF0YS10aXAnOidzJGwk5bCG5q2k5Lq65YiX5YWl5YCZ5a6h5ZCN5Y2V5Lul5b6F5pS255uRJwogICAgICAgIH0pLnRleHQoJ+WAmeWuoScpLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciAkZSA9ICQodGhpcykubmV4dCgpCiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLlVzZXJzMkIucHVzaCgkZSkKICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suaW4yQmxvY2tDYXJ0KCk7CiAgICAgICAgfSkucHJlcGVuZFRvKCR3aGVyZSkuaGlkZSgpOwogICAgfTsKICAgIHRoaXMuYWRkUXVpY2tCbG9ja0luQ29tbWVudExpc3QgPSBmdW5jdGlvbigkd2hlcmUpewogICAgICAgIC8vIFJlZ2lvbjog5b+r6YCf5bGP6JS9CiAgICAgICAgdmFyICRjbT0kd2hlcmUuaXMoJy56bS1jb21tZW50LWJveCcpPyR3aGVyZTokd2hlcmUuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94JykKICAgICAgICAgICwgJHU9JCgnLnptLWl0ZW0tY29tbWVudCcsJGNtKQogICAgICAgIDsKICAgICAgICAkdS5lYWNoKGZ1bmN0aW9uKGksZSl7CiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmFkZFF1aWNrQmxvY2tJbk9uZUNvbW1lbnQoJChlKSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyICRidG5RdWlja0Jsb2NrPSQoJzxhPicsewogICAgICAgICAgICAgICAgJ2NsYXNzJzonaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCBpemgtYnV0dG9uJwogICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkdCTlvIDlp4vku47or4TorrrogIXkuK3pgInmi6nlsY/olL3lr7nosaEnCiAgICAgICAgICAgIH0pLnRleHQoJ+W/q+mAn+Wxj+iUvScpLmNzcyh7J21hcmdpbi1sZWZ0Jzo3fSkucHJlcGVuZFRvKCR3aGVyZSkuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2V0QXR0cmlidXRlKCdvbicpPT0nMScpewogICAgICAgICAgICAgICAgICAgICQoJy56bS1jb21tZW50LWhkIC5pemgtcXVpY2stYmxvY2stcGVuZCcpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoeydkYXRhLXRpcCc6J3MkdCTlvIDlp4vku47or4TorrrogIXkuK3pgInmi6nlsY/olL3lr7nosaEnLCdvbic6JzAnfSkucmVtb3ZlQ2xhc3MoJ29uJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICQoJy56bS1jb21tZW50LWhkIC5pemgtcXVpY2stYmxvY2stcGVuZCcpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoeydkYXRhLXRpcCc6J3MkdCTnu5PmnZ/ku47or4TorrrogIXkuK3pgInmi6nlsY/olL3lr7nosaEnLCdvbic6JzEnfSkuYWRkQ2xhc3MoJ29uJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgOwogICAgICAgIGlmKCRjbS5pcygnLmVtcHR5JykpewogICAgICAgICAgICAkYnRuUXVpY2tCbG9jay5oaWRlKCk7CiAgICAgICAgfQogICAgICAgIC8vIFJlZ2lvbiBlbmQKICAgIH07CiAgICAKICAgIGlaaGlodS4kYm9keS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAkKGV2ZW50LnRhcmdldCkuZmlsdGVyKCcjemgtdG9vbHRpcCcpLmJpbmQoJ0RPTU5vZGVJbnNlcnRlZCcsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICB2YXIgJGE9JChldmVudC50YXJnZXQpLmZpbHRlcignI3poLXRvb2x0aXAtcGVvcGxlJykuZmluZCgnYVtuYW1lPWZvY3VzXScpCiAgICAgICAgICAgICAgLCBiaWQ9JGEuYXR0cignaWQnKQogICAgICAgICAgICAgICwgd2hvPScsJytiaWQrJywnCiAgICAgICAgICAgIDsKICAgICAgICAgICAgaWYoJGEuaXMoJy56Zy1idG4tdW5mb2xsb3cnKSYmaVpoaWh1LlF1aWNrQmxvY2suVW5mb2xsb3dlZC5Vc2Vycy5pbmRleE9mKHdobyk+PTApewogICAgICAgICAgICAgICAgJGEudGV4dCgn5YWz5rOoJykucmVtb3ZlQ2xhc3MoJ3pnLWJ0bi11bmZvbGxvdycpLmFkZENsYXNzKCd6Zy1idG4tZm9sbG93Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJGEuaXMoJy56Zy1idG4tZm9sbG93JykmJmlaaGlodS5RdWlja0Jsb2NrLlJlZm9sbG93ZWQuVXNlcnMuaW5kZXhPZih3aG8pPj0wKXsKICAgICAgICAgICAgICAgICRhLnRleHQoJ+WPlua2iOWFs+azqCcpLnJlbW92ZUNsYXNzKCd6Zy1idG4tZm9sbG93JykuYWRkQ2xhc3MoJ3pnLWJ0bi11bmZvbGxvdycpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiB0aGlzOwp9CgovKioKICogQGNsYXNzIFF1aWNrRmF2bwogKi8KZnVuY3Rpb24gUXVpY2tGYXZvKGlaaGlodSkgewogICAgaWYgKCB0eXBlb2YgaVpoaWh1ID09PSAndW5kZWZpbmVkJyB8fCAhaVpoaWh1IHx8ICFpWmhpaHUuY29uZmlnWydRdWlja0Zhdm8nXSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaVpoaWh1LlF1aWNrRmF2byA9IHRoaXM7CiAgICAKICAgIHRoaXMuRGVmYXVsdENvdW50ID0gNDsKICAgIHRoaXMuUGlubmVkTGlzdCA9IGlaaGlodS5jb25maWdbJ1F1aWNrRmF2b1Bpbm5lZCddOwogICAgdGhpcy5jc3MgPSAKICAgICAgICBbJy5pemgtUGluNFF1aWNrRmF2b3twYWRkaW5nOjNweCA1cHggMDtmbG9hdDpyaWdodDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6NHB4O21hcmdpbi1yaWdodDoyZW07bGluZS1oZWlnaHQ6MS4yNTt9JwogICAgICAgICwnLml6aC1QaW40UXVpY2tGYXZvIC56bS1pdGVtLXRvcC1idG57dmlzaWJpbGl0eTp2aXNpYmxlO21hcmdpbjowIDRweDtmbG9hdDpyaWdodDt9JwogICAgICAgICwnZGl2Lml6aF9mYXZ7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDo5OTk5O2Rpc3BsYXk6bm9uZTtib3JkZXI6MXB4IHNvbGlkICM5OTk5OTk7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6NXB4IDVweCA1cHggMDttYXJnaW4tbGVmdDotMXB4O30nCiAgICAgICAgLCdkaXYuaXpoX2ZhdiAudGl0bGV7cGFkZGluZzowIDVweDtiYWNrZ3JvdW5kLWNvbG9yOiMwODc0YzQ7Y29sb3I6I2ZmZjtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxNXB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6M3B4IDNweCAwIDA7fScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2e2Rpc3BsYXk6YmxvY2s7Y2xlYXI6Ym90aDtmbG9hdDtsZWZ0O3BhZGRpbmc6MCAzNnB4IDAgMjRweDtsaW5lLWhlaWdodDoyO30nCiAgICAgICAgLCdkaXYuaXpoX2ZhdiBhLmZhdiBpe3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi10b3A6MC41ZW07fScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2IGkuc3Bpbm5lci1ncmF5e2xlZnQ6MDt9JwogICAgICAgICwnZGl2Lml6aF9mYXYgYS5mYXYgaS56LWljb24tY29sbGVjdHtsZWZ0OjEwcHg7dmlzaWJpbGl0eTpoaWRkZW47YmFja2dyb3VuZC1wb3NpdGlvbjotNTZweCAtMzZweDt9JwogICAgICAgICwnZGl2Lml6aF9mYXYgYS5mYXYuc2VsZWN0ZWQgaS56LWljb24tY29sbGVjdHt2aXNpYmlsaXR5OnZpc2libGU7fScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2OmhvdmVye3RleHQtZGVjb3JhdGlvbjpub25lfScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2IHNwYW57ZmxvYXQ6cmlnaHQ7ZGlzcGxheTpibG9jazttYXJnaW4tcmlnaHQ6LTMycHh9JwogICAgICAgICwnLm1ldGEtaXRlbS5vbntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjEwMDAwO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICM5OTk5OTk7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO21hcmdpbjotMXB4IC04cHggLTFweCAtMXB4O3BhZGRpbmc6MCA3cHg7Ym9yZGVyLXJhZGl1czoycHggMnB4IDNweCAzcHg7fScKICAgICAgICAsJyddLmpvaW4oJ1xuJyk7CiAgICB0aGlzLmFkZFF1aWNrRmF2byA9IGZ1bmN0aW9uKCR2LCRhKXsKICAgICAgICBpZigkdi5sZW5ndGgpewogICAgICAgICAgICBpZigkYS5jaGlsZHJlbignLml6aF9mYXYnKS5sZW5ndGg8PTApewogICAgICAgICAgICAgICAgJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICdpemhfZmF2JyB9KQogICAgICAgICAgICAgICAgCS5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnc3Bpbm5lci1ncmF5JyB9KSkKICAgICAgICAgICAgICAgIAkuYXBwZW5kKCcmbmJzcDvliqDovb3kuK0uLi4mbmJzcDsnKQogICAgICAgICAgICAgICAgCS5iaW5kKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpewoJICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNob3coKS5wYXJlbnQoKS5maW5kKCcubWV0YS1pdGVtW25hbWU9ZmF2b10nKS5hZGRDbGFzcygnb24nKTsKICAgICAgICAgICAgICAgIAl9KQogICAgICAgICAgICAgICAgCS5iaW5kKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCl7CgkgICAgICAgICAgICAgICAgICAgICQodGhpcykuaGlkZSgpLnBhcmVudCgpLmZpbmQoJy5tZXRhLWl0ZW1bbmFtZT1mYXZvXScpLnJlbW92ZUNsYXNzKCdvbicpOwoJICAgICAgICAgICAgICAgIH0pCgkgICAgICAgICAgICAuYXBwZW5kVG8oJGEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR2LmJpbmQoJ21vdXNlZW50ZXInLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgJGE9aVpoaWh1LmdldEl0ZW0oJCh0aGlzKSkKICAgICAgICAgICAgICAgICAgLCAkbT0kKHRoaXMpLmFkZENsYXNzKCdvbicpLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKQogICAgICAgICAgICAgICAgICAsIGFpZD0kYS5hdHRyKCdkYXRhLWFpZCcpCiAgICAgICAgICAgICAgICAgICwgJG9wPSQodGhpcykub2Zmc2V0UGFyZW50KCkKICAgICAgICAgICAgICAgICAgLCBib3R0b20xPXBhcnNlSW50KCRvcC5jc3MoJ21hcmdpbi1ib3R0b20nKSkKICAgICAgICAgICAgICAgICAgLCBib3R0b20yPXBhcnNlSW50KCRhLmNzcygncGFkZGluZy1ib3R0b20nKSkKICAgICAgICAgICAgICAgICAgLCBwb3M9JCh0aGlzKS5wb3NpdGlvbigpCiAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAkYS5jaGlsZHJlbignLml6aF9mYXYnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdib3R0b20nOihpc05hTihib3R0b20xKT8wOmJvdHRvbTEpKyhpc05hTihib3R0b20yKT8wOmJvdHRvbTIpKyRvcC5oZWlnaHQoKS1wb3MudG9wCiAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOnBvcy5sZWZ0KyRtLnBvc2l0aW9uKCkubGVmdAogICAgICAgICAgICAgICAgfSkuc2hvdygpOwogICAgICAgICAgICAgICAgJC5nZXRKU09OKCcvY29sbGVjdGlvbnMvanNvbicsJC5wYXJhbSh7YW5zd2VyX2lkOmFpZH0pLGZ1bmN0aW9uKHJlc3VsdCxzdGF0dXMseGhyKXsKICAgICAgICAgICAgICAgICAgICB2YXIgYWlkPXRoaXMudXJsLnN1YnN0cih0aGlzLnVybC5pbmRleE9mKCdhbnN3ZXJfaWQ9JykrMTApCiAgICAgICAgICAgICAgICAgICAgICAsIHNlbD1wYWdlSXMuUXVlc3Rpb24/Jy56bS1pdGVtLWFuc3dlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBhZ2VJcy5Ib21lPycuZmVlZC1pdGVtJwogICAgICAgICAgICAgICAgICAgICAgICAgICA6cGFnZUlzLkFuc3dlcj8nLnptLWl0ZW0tYW5zd2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICA6JycKICAgICAgICAgICAgICAgICAgICAgICwgJGE9JChzZWwrJ1tkYXRhLWFpZD0nK2FpZCsnXScpCiAgICAgICAgICAgICAgICAgICAgICAsICR2PSRhLmNoaWxkcmVuKCcuaXpoX2ZhdicpLmVtcHR5KCkuYXBwZW5kKCQoJzxkaXY+Jyx7J2NsYXNzJzondGl0bGUnLHRpdGxlOifku6XkuIvkuLrmnIDov5HpgInmi6nnmoTmlLbol4/lpLknfSkuYXBwZW5kKCflv6vpgJ/mlLbol48nKSkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoJyc9PXNlbClyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgdmFyIGZhdkFsbD1yZXN1bHQubXNnWzBdCiAgICAgICAgICAgICAgICAgICAgICAsIGZhdlNlbD1yZXN1bHQubXNnWzFdCiAgICAgICAgICAgICAgICAgICAgICAsIG51bT1pWmhpaHUuUXVpY2tGYXZvLkRlZmF1bHRDb3VudAogICAgICAgICAgICAgICAgICAgICAgLCBmYXY9bmV3IEFycmF5KCkKICAgICAgICAgICAgICAgICAgICAgICwgZmF2Tm9ybWFsPW5ldyBBcnJheSgpCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICQuZWFjaChmYXZBbGwsZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJRD1lWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCBwaW5uZWQ9aVpoaWh1LlF1aWNrRmF2by5QaW5uZWRMaXN0W2ZJRF0KICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICBpZihwaW5uZWQpewogICAgICAgICAgICAgICAgICAgICAgICAgIGZhdi5wdXNoKGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICBmYXZOb3JtYWwucHVzaChlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIG51bSAtPSBmYXYubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGlmKG51bSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICBmYXY9ZmF2LmNvbmNhdChmYXZOb3JtYWwuc2xpY2UoMCxudW0pKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZmF2Tm9ybWFsLmxlbmd0aD0wOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKGZhdi5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZT1mYXYuc2hpZnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICwgZklEPWVbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZOYW1lPWVbMV0KICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICBmYXZOb3JtYWxbZklEXT1mTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRmPSQoJzxhLz4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidmYXYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDo7JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGFpZDphaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBmaWQ6ZklECiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50ZXh0KGZOYW1lKS5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1PScvY29sbGVjdGlvbi8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRmPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGk9JGYuY2hpbGRyZW4oJzpmaXJzdCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRpLmhhc0NsYXNzKCdzcGlubmVyLWdyYXknKSlyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSs9JGYuaGFzQ2xhc3MoJ3NlbGVjdGVkJyk/J3JlbW92ZSc6J2FkZCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGkuYXR0cignY2xhc3MnLCdzcGlubmVyLWdyYXknKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnBvc3QodSwkLnBhcmFtKHtfeHNyZjokKCdpbnB1dFtuYW1lPV94c3JmXScpLnZhbCgpLGFuc3dlcl9pZDokKHRoaXMpLmF0dHIoJ2FpZCcpLGZhdmxpc3RfaWQ6JCh0aGlzKS5hdHRyKCdmaWQnKX0pLGZ1bmN0aW9uKHJlc3VsdCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Q9dGhpcy51cmwuc3Vic3RyaW5nKHRoaXMudXJsLmxhc3RJbmRleE9mKCcvJykrMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZpZD11dGlscy5nZXRQYXJhbUluUXVlcnkodGhpcy5kYXRhLCdmYXZsaXN0X2lkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGFpZD11dGlscy5nZXRQYXJhbUluUXVlcnkodGhpcy5kYXRhLCdhbnN3ZXJfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc2VsPXBhZ2VJcy5RdWVzdGlvbj8nLnptLWl0ZW0tYW5zd2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBhZ2VJcy5Ib21lPycuZmVlZC1pdGVtJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOicnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkdmk9Jyc9PXNlbD9udWxsOiQoc2VsKydbZGF0YS1haWQ9JythaWQrJ10gLml6aF9mYXYgYVtmaWQ9JytmaWQrJ10nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaW5jPTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCcnPT1zZWwpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhY3Q9PSdyZW1vdmUnJiZyZXN1bHQubXNnPT0nT0snKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2aS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYz0tMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoYWN0PT0nYWRkJyYmcmVzdWx0Lm1zZy5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZpLmFkZENsYXNzKCdzZWxlY3RlZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jPTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaW5jIT0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2aS5jaGlsZHJlbignc3BhbicpLnRleHQocGFyc2VJbnQoJHZpLmNoaWxkcmVuKCdzcGFuJykudGV4dCgpKStpbmMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2aS5jaGlsZHJlbignOmZpcnN0JykuYXR0cignY2xhc3MnLCd6LWljb24tY29sbGVjdCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkucHJlcGVuZCgkKCc8aS8+Jyx7J2NsYXNzJzonei1pY29uLWNvbGxlY3QnfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4vPicpLnRleHQoZVszXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAkZi5hcHBlbmRUbygkdi8qLmNoaWxkcmVuKHBpbm5lZD8nLnBpbm5lZCc6Jy5ub3JtYWwnKSovKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICQuZWFjaChmYXZTZWwsZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmF2Tm9ybWFsW2VdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHYuZmluZCgnYS5mYXZbZmlkPScrZSsnXScpLmFkZENsYXNzKCdzZWxlY3RlZCcpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkdi5iaW5kKCdtb3VzZWxlYXZlJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyICRhPWlaaGlodS5nZXRJdGVtKCQodGhpcykucmVtb3ZlQ2xhc3MoJ29uJykpOwogICAgICAgICAgICAgICAgJGEuY2hpbGRyZW4oJy5pemhfZmF2JykuaGlkZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9OwoKICAgIGlaaGlodS4kYm9keS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKCQl2YXIgJGU9JChldmVudC50YXJnZXQpOwoJCWlmKCRlLmlzKCcubW9kYWwtZGlhbG9nJykpewoJCQkkZS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKCQkJCXZhciAkZT0kKGV2ZW50LnRhcmdldCkKICAgICAgICAgICAgICAgICAgLCAkZmF2TGlzdD0kZS5maW5kKCcuem0tZmF2by1saXN0LWNvbnRlbnQnKQogICAgICAgICAgICAgICAgOwoJCQkJaWYoJGZhdkxpc3QubGVuZ3RoKXsKCQkJCQl2YXIgJGZhdkl0ZW1zPSRmYXZMaXN0LmNoaWxkcmVuKCcuem0tZmF2by1saXN0LWl0ZW0tbGlua1tkYXRhLWxpZF0nKQogICAgICAgICAgICAgICAgICAgICAgLCBmdW5jUGluPWZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBpbm5lZD1lLmNoZWNrZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkZT0kKGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGY9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1pdGVtLWxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgO2lmKCEkZi5sZW5ndGgpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZD0kZS5hdHRyKCdsaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRjaGVja3M9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1jb250ZW50JykuZmluZCgnLml6aC1QaW40UXVpY2tGYXZvIC50X2pjaGtib3gnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWU9NTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjc3NTdGFydD17cG9zaXRpb246J3JlbGF0aXZlJywnYmFja2dyb3VuZC1jb2xvcic6JyMwODc0QzQnLCd6LWluZGV4JzonMTAwJ30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjc3NFbmQ9e3Bvc2l0aW9uOicnLCdiYWNrZ3JvdW5kLWNvbG9yJzonJywnei1pbmRleCc6Jyd9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgZnVuY1JvbGxVcD1mdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGI9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1pdGVtLWxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGE9JGIucHJldigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRhLmxlbmd0aHx8KCRhLmhhc0NsYXNzKCdwaW5uZWQnKSYmcGFyc2VJbnQoJGEuYXR0cignZGF0YS1saWQnKSk8cGFyc2VJbnQoJGIuYXR0cignZGF0YS1saWQnKSkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYi5hbmltYXRlKHtib3R0b206JGEub3V0ZXJIZWlnaHQoKX0sewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246dGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc3RlcDpmdW5jdGlvbihub3cpeyRiLmNzcyhjc3NTdGFydCk7fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY29tcGxldGU6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYi5jc3MoJC5leHRlbmQoe2JvdHRvbTowfSxjc3NFbmQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYi5pbnNlcnRCZWZvcmUoJGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNSb2xsVXAoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZ1bmNSb2xsRG93bj1mdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGE9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1pdGVtLWxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGI9JGEubmV4dCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRiLmxlbmd0aHx8KCEkYi5oYXNDbGFzcygncGlubmVkJykmJnBhcnNlSW50KCRiLmF0dHIoJ2luZGV4JykpPnBhcnNlSW50KCRhLmF0dHIoJ2luZGV4JykpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGEuYW5pbWF0ZSh7dG9wOiRiLm91dGVySGVpZ2h0KCl9LHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOnRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHN0ZXA6ZnVuY3Rpb24obm93KXskYS5jc3MoY3NzU3RhcnQpO30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGNvbXBsZXRlOmZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGEuY3NzKCQuZXh0ZW5kKHt0b3A6MH0sY3NzRW5kKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGEuaW5zZXJ0QWZ0ZXIoJGIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNSb2xsRG93bigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwaW5uZWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmLmFkZENsYXNzKCdwaW5uZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jUm9sbFVwKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZi5yZW1vdmVDbGFzcygncGlubmVkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY1JvbGxEb3duKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tGYXZvLlBpbm5lZExpc3RbbGlkXT1waW5uZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5zZXRDZmcoJ1F1aWNrRmF2b1Bpbm5lZCcsaVpoaWh1LlF1aWNrRmF2by5QaW5uZWRMaXN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDsKCQkJCQkkZmF2SXRlbXMuZWFjaChmdW5jdGlvbihpLGUpewoJCQkJCQl2YXIgbGlkPWUuZ2V0QXR0cmlidXRlKCdkYXRhLWxpZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkcGluPSQoJzxhLz4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdjbGFzcyc6J2l6aC1QaW40UXVpY2tGYXZvJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdsaWQnOmxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkYiTkv53mjIHlnKjjgIzlv6vpgJ/mlLbol4/jgI3oj5zljZXpobbpg6jmmL7npLonCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmQoJCgnPHNwYW4vPicpLmFwcGVuZCgn572u6aG2JykuYWRkKCc8aS8+Jyx7J2NsYXNzJzonem0taXRlbS10b3AtYnRuJ30pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJCgnLnpnLWdyYXknLGUpKS5hdHRyKCdpbmRleCcsaSkKICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSgnaW5kZXgnLGkpOwogICAgICAgICAgICAgICAgICAgICAgICAkcGluLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQ9IXRoaXMuY2hlY2tlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNQaW4odGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNoZWNrZWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJ3NwYW4nKS50ZXh0KCflj5bmtojnva7pobYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCdpJykuYWRkQ2xhc3MoJ3ptLWl0ZW0tdG9wLWJ0bi1jYW5jZWwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJ3NwYW4nKS50ZXh0KCfnva7pobYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCdpJykucmVtb3ZlQ2xhc3MoJ3ptLWl0ZW0tdG9wLWJ0bi1jYW5jZWwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50LnByZXZlbnREZWZhdWx0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGU9dHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSlbMF0uY2hlY2tlZD1mYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1LlF1aWNrRmF2by5QaW5uZWRMaXN0W2xpZF0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBpbi5jbGljaygpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgkJCQkJfSk7CgkJCQl9CgkJCX0pOwoJCX0KCX0pOwoKICAgIHJldHVybiB0aGlzOwp9CgovKioKICogQGNsYXNzIFNlYXJjaGluZ0xpc3QKICovCmZ1bmN0aW9uIFNlYXJjaGluZ0xpc3QoaVpoaWh1KSB7CiAgICBpZiAoIHR5cGVvZiBpWmhpaHUgPT09ICd1bmRlZmluZWQnIHx8ICFpWmhpaHUpIHsKICAgICAgICByZXR1cm4gbnVsbAogICAgfQogICAgaVpoaWh1LlNlYXJjaGluZ0xpc3QgPSB0aGlzCiAgICAKICAgIHRoaXMuJHRvcFNlYXJjaCA9ICQoJyN6aC10b3Atc2VhcmNoLWZvcm0nKQogICAgdGhpcy4kdG9wU2VhcmNoSW5wdXQgPSAkKCcjemgtdG9wLXNlYXJjaC1mb3JtID4gaW5wdXQjcScpCiAgICBpZiAoIXRoaXMuJHRvcFNlYXJjaC5sZW5ndGgpIHJldHVybgoKICAgIHRoaXMuU2VhcmNoRW5naW5lT3V0c2lkZUxpc3QgPSB7CiAgICAgICAgJ2dvb2dsZSc6IHtpY29uOidodHRwczovL3d3dy5nb29nbGUuY29tL2Zhdmljb24uaWNvJyx1cmw6J2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vP3E9c2l0ZTp6aGlodS5jb20lMjB7MH0jcT1zaXRlOnpoaWh1LmNvbSt7MH0nfQogICAgICAsICdiYWlkdSc6IHtpY29uOidodHRwOi8vd3d3LmJhaWR1LmNvbS9mYXZpY29uLmljbycsdXJsOidodHRwOi8vd3d3LmJhaWR1LmNvbS9zP3dkPXNpdGU6emhpaHUuY29tJTIwezB9J30KICAgIH0KCiAgICB1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKHRoaXMuJHRvcFNlYXJjaFswXSxmdW5jdGlvbihldmVudCl7CiAgICAgICAgdmFyIF9hID0gZXZlbnQuYWRkZWROb2RlcyB8fCBbXQogICAgICAgIGlmICghX2EubGVuZ3RoKSByZXR1cm4KICAgICAgICB1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKF9hWzBdLGZ1bmN0aW9uKGV2ZW50KXtjb25zb2xlLmxvZyhpWmhpaHUuY29uZmlnWydTZWFyY2hFbmdpbmVPdXRzaWRlJ10pCiAgICAgICAgICAgIHZhciBfYSA9IGV2ZW50LmFkZGVkTm9kZXMgfHwgW251bGxdCiAgICAgICAgICAgICAgLCAkaXRlbSA9ICQoX2FbMF0pCiAgICAgICAgICAgICAgLCBzZW9LZXkgPSBpWmhpaHUuY29uZmlnWydTZWFyY2hFbmdpbmVPdXRzaWRlJ10gfHwgJ2JhaWR1JwogICAgICAgICAgICAgICwgc2VvID0gaVpoaWh1LlNlYXJjaGluZ0xpc3QuU2VhcmNoRW5naW5lT3V0c2lkZUxpc3Rbc2VvS2V5XSB8fCB7aWNvbjonJyx1cmw6Jyd9CiAgICAgICAgICAgICAgLCBzdHJTZWFyY2hVcmwgPSBzZW8udXJsLnJlcGxhY2UoL1x7MFx9L2csIGZ1bmN0aW9uKCl7cmV0dXJuIGlaaGlodS5TZWFyY2hpbmdMaXN0LiR0b3BTZWFyY2hJbnB1dC52YWwoKX0pCiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlb0tleSkKICAgICAgICAgICAgaWYgKCRpdGVtLmlzKCcuYWMtcm93W3JvbGU9b3B0aW9uXScpKXsKICAgICAgICAgICAgICAgIHZhciAkYSA9ICRpdGVtLmNoaWxkcmVuKCdhJykKICAgICAgICAgICAgICAgICAgLCBocmVmID0gJGEuYXR0cignaHJlZicpCiAgICAgICAgICAgICAgICAgICwgY3NzID0gJ2Zsb2F0OnJpZ2h0O2JhY2tncm91bmQtcG9zaXRpb246LTI4NHB4IC0ycHg7JwogICAgICAgICAgICAgICAgICAsICRhTmV3ID0gJCgnPGE+Jywge2NsYXNzOid6Zy1pY29uJyxzdHlsZTpjc3MsaHJlZjpocmVmLHRhcmdldDonX2JsYW5rJyxjbGljazpmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgfX0pCiAgICAgICAgICAgICAgICBpZiAoaHJlZi5pbmRleE9mKCcvc2VhcmNoPycpID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJGFOZXcuY3NzKHttYXJnaW5Ub3A6JzAuNWVtJ30pCiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uYXBwZW5kKCQoJzxhPicsIHtjbGFzczonaWNvbicsc3R5bGU6J21hcmdpbi10b3A6MC41ZW07ZmxvYXQ6bGVmdCcsaHJlZjpzdHJTZWFyY2hVcmwsdGFyZ2V0OidfYmxhbmsnLGNsaWNrOmZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICB9fSkuYXBwZW5kKCQoJzxpbWc+Jywge2JvcmRlcjowLHNyYzpzZW8uaWNvbix3aWR0aDoxNixoZWlnaHQ6MTZ9KSkpCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhyZWYuaW5kZXhPZignL3F1ZXN0aW9uLycpIDwgMCkgewogICAgICAgICAgICAgICAgICAgICRhTmV3LmNzcyh7bWFyZ2luVG9wOictMS41ZW0nfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRpdGVtLmFwcGVuZCgkYU5ldykKICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICB9KQoKICAgIHJldHVybiB0aGlzCn0KCi8qKgogKiBAY2xhc3MgVG9wTmF2CiAqLwpmdW5jdGlvbiBUb3BOYXYoaVpoaWh1KSB7CiAgICBpZiAoIHR5cGVvZiBpWmhpaHUgPT09ICd1bmRlZmluZWQnIHx8ICFpWmhpaHUgfHwgIWlaaGlodS5jb25maWdbJ1RvcE5hdkF1dG9Gb2xkJ10pIHsKICAgICAgICByZXR1cm4gbnVsbAogICAgfQogICAgaVpoaWh1LlRvcE5hdiA9IHRoaXMKICAgIAogICAgdGhpcy4kdG9wTmF2ID0gJCgnYm9keSA+IC56dS10b3A6Zmlyc3QnKQogICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICB0aGlzLnN0eWxlLnRvcCA9ICcwJwogICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnaXpoLW1vdXNlb3ZlcicsICcxJykKICAgICAgICAgICAgJCgnI2l6aENTU19Ob3RpTnVtJykucmVtb3ZlKCkKICAgICAgICB9KQogICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpemgtbW91c2VvdmVyJywgJzAnKQogICAgICAgICAgICBpWmhpaHUuVG9wTmF2LmZ1bmNGb2xkKCkKICAgICAgICB9KQogICAgaWYgKCF0aGlzLiR0b3BOYXYubGVuZ3RoKSByZXR1cm4KCiAgICB0aGlzLnRvcE5hdkhlaWdodCA9IHRoaXMuJHRvcE5hdi5oZWlnaHQoKSAtIDUKCiAgICB0aGlzLmZ1bmNGb2xkID0gZnVuY3Rpb24oZXZlbnQpewogICAgICAgIHZhciBzY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IDAKICAgICAgICAgICwgX3NlbGYgPSBpWmhpaHUuVG9wTmF2CiAgICAgICAgICAsIGlzTW91c2VPdmVyID0gJzEnID09PSAoX3NlbGYuJHRvcE5hdi5hdHRyKCdpemgtbW91c2VvdmVyJykgfHwgJycpCiAgICAgICAgICAsICRoZWFkID0gJCgnaGVhZDpmaXJzdCcpCiAgICAgICAgICAsICRjc3NOb3RpTnVtID0gJCgnI2l6aENTU19Ob3RpTnVtJykKICAgICAgICAgICwgJGZsb2F0aW5nQmFyID0gJCgnYm9keSA+IC5nb29nLXNjcm9sbGZsb2F0ZXItZmxvYXRpbmcnKQogICAgICAgIGlmIChzY3JvbGxUb3AgPT09IDApIHsKICAgICAgICAgICAgX3NlbGYuJHRvcE5hdi5jc3Moe3RvcDowfSkKICAgICAgICB9IGVsc2UgaWYgKCFpc01vdXNlT3ZlcikgewogICAgICAgICAgICBpZiAoc2Nyb2xsVG9wIDwgX3NlbGYudG9wTmF2SGVpZ2h0KSB7CiAgICAgICAgICAgICAgICBfc2VsZi4kdG9wTmF2LmNzcyh7dG9wOi1zY3JvbGxUb3B9KQogICAgICAgICAgICAgICAgJGZsb2F0aW5nQmFyLmNzcyh7bWFyZ2luVG9wOi1zY3JvbGxUb3B9KQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3NlbGYuJHRvcE5hdi5jc3Moe3RvcDotX3NlbGYudG9wTmF2SGVpZ2h0fSkKICAgICAgICAgICAgICAgICRmbG9hdGluZ0Jhci5jc3Moe21hcmdpblRvcDotX3NlbGYudG9wTmF2SGVpZ2h0fSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2Nyb2xsVG9wID4gMjApIHsKICAgICAgICAgICAgICAgIGlmICghJGNzc05vdGlOdW0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnPHN0eWxlPicsIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdpemhDU1NfTm90aU51bScKICAgICAgICAgICAgICAgICAgICAgICwgdHlwZTogJ3RleHQvY3NzJwogICAgICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKCdoZWFkOmZpcnN0JykudGV4dCgnI3poLXRvcC1uYXYtY291bnQsI3poLXRvcC1uYXYtbmV3LXBte3Bvc2l0aW9uOmFic29sdXRlO3RvcDo0MHB4O2JvcmRlci1yYWRpdXM6MCAhaW1wb3J0YW50fS50b3AtbmF2LXByb2ZpbGUgLnp1LXRvcC1uYXYtdXNlcmluZm97b3ZlcmZsb3c6dmlzaWJsZSAhaW1wb3J0YW50fScpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkY3NzTm90aU51bS5yZW1vdmUoKQogICAgfQoKICAgIGlaaGlodS4kd2luLnNjcm9sbCh0aGlzLmZ1bmNGb2xkKQoKICAgIHRoaXMub25Ob2RlQWRkZWQgPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgaVpoaWh1LlRvcE5hdi5mdW5jRm9sZCgpCiAgICAgICAgJC5lYWNoKGV2ZW50LnJlbW92ZWROb2RlcywgZnVuY3Rpb24oaSwgZSl7CiAgICAgICAgICAgIHZhciAkZmxvYXRpbmdCYXIgPSAkKGUpLmZpbHRlcignLmdvb2ctc2Nyb2xsZmxvYXRlcicpLmNzcyh7bWFyZ2luVG9wOicnfSkKICAgICAgICB9KQogICAgfQoKICAgIHJldHVybiB0aGlzCn0KCmFsbExpbmtzID0gZnVuY3Rpb24oX25hbWUsIF9saXN0U2VsLCBfbGlzdE5hbWUpIHsKICAgIHRoaXMubmFtZSA9IF9uYW1lCiAgICB0aGlzLmxpc3RTZWwgPSBfbGlzdFNlbAogICAgdGhpcy5saXN0TmFtZSA9IF9saXN0TmFtZQogICAgdGhpcy5kbGdJRCA9ICdpemgtZGxnLScgKyBfbmFtZQogICAgdGhpcy4kZGxnID0gbnVsbAogICAgdmFyIF9pbml0aWFsVGl0bGUgPSBfbGlzdE5hbWUgKyAn5Zyw5Z2A5riF5Y2VJwogICAgICAsIF9yZXN1bHQgPSBuZXcgQXJyYXkoKQogICAgICAsIF9sb2FkVGltZXMgPSAwCgogICAgLy/liIbmnpDlhoXlrrkKICAgIHZhciBwcm9jZXNzTm9kZSA9IGZ1bmN0aW9uKGNvbnRlbnQsJGRsZyl7CiAgICAgIHZhciAkcUN1cnJlbnQgPSBudWxsOwogICAgICAkKCcuem0taXRlbS1hbnN3ZXInLCBjb250ZW50KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBpdGVtKXsKICAgICAgICB2YXIgJGEgPSAkKGl0ZW0pCiAgICAgICAgICAsICRxID0gJGEuY2xvc2VzdCgiLnptLWl0ZW0iKS5jaGlsZHJlbigiaDIiKS5jaGlsZHJlbigiYSIpCiAgICAgICAgOwogICAgICAgIGlmKCRxLmxlbmd0aCl7CiAgICAgICAgICAkcUN1cnJlbnQ9JHE7CiAgICAgICAgfWVsc2UgaWYoJHFDdXJyZW50KXsKICAgICAgICAgICRxPSRxQ3VycmVudDsKICAgICAgICB9ZWxzZXsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIGhyZWZRdWVzdGlvbiA9IHVybC5kYXRhLmF0dHJbImJhc2UiXSArICRxLmF0dHIoImhyZWYiKS5yZXBsYWNlKHVybC5kYXRhLmF0dHJbImJhc2UiXSwnJyk7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgdGl0bGU6ICRxLnRleHQoKSwKICAgICAgICAgICAgLy9xdWVzdGlvblVybDogaHJlZlF1ZXN0aW9uLAogICAgICAgICAgICBhbnN3ZXJVcmw6IGhyZWZRdWVzdGlvbiArICgkYS5wYXJlbnQoKS5pcygiLnptLWl0ZW0tZmF2IikgPyAiL2Fuc3dlci8iICsgJGEuYXR0cigiZGF0YS1hdG9rZW4iKSA6ICIiKSwKICAgICAgICAgICAgYW5zd2VyQXV0aG9yOiAkYS5maW5kKCcuem0taXRlbS1hbnN3ZXItYXV0aG9yLXdyYXAgYVtocmVmXj0iL3Blb3BsZSJdJykudGV4dCgpLnRyaW0oKSwKICAgICAgICAgICAgc3VtbWFyeTogJGEuZmluZCgiLnptLWl0ZW0tYW5zd2VyLXN1bW1hcnkiKS5jaGlsZHJlbigpLnJlbW92ZSgpLmVuZCgpLnRleHQoKSwKICAgICAgICAgICAgY29udGVudDogJGEuZmluZCgiLnptLWVkaXRhYmxlLWNvbnRlbnQiKS5odG1sKCkKICAgICAgICB9OwogICAgICAgIF9yZXN1bHQucHVzaChvYmopOwogICAgICAgIHZhciBzdHJUaXRsZSA9IHV0aWxzLmZvcm1hdFN0cignKiDjgIp7dGl0bGV944CLJiMxMzsqIHthbnN3ZXJBdXRob3J977yaJiMxMzsqIHtzdW1tYXJ5fScsIG9iaikKICAgICAgICAgICwgc3RyVVJMID0gdXRpbHMuZm9ybWF0U3RyKCd7YW5zd2VyVXJsfScsIG9iaikKICAgICAgICAgICwgJGxpID0gJCgnPGxpPicpLmFwcGVuZCgkKCc8YT4nLCB7IGhyZWY6IHN0clVSTCwgdGl0bGU6IHN0clRpdGxlIH0pLnRleHQoc3RyVVJMKSkuY3NzKHsgJ2xpc3Qtc3R5bGUtdHlwZSc6ICdub25lJyB9KQogICAgICAgICQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcycsJGRsZykuYXBwZW5kKCRsaSk7CiAgICAgICAgdmFyIGNvdW50PV9yZXN1bHQubGVuZ3RoOwogICAgICAgICQoJy5pemhpaHUtY29sbGVjdGlvbi1pbmZvJywkZGxnKS50ZXh0KCfvvIjliqrlipvliqDovb3kuK0uLi7lt7LlvpfliLDorrDlvZUgJyArIGNvdW50ICsgJyDmnaHvvIknKTsKICAgICAgfSk7CiAgICB9OwogICAgICAgIAogICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbihwYWdlV2FudCxwYWdlTm93LCRkbGcpewogICAgICBpZiAoIXBhZ2VOb3cpcGFnZU5vdz0xOwogICAgICBpZigkZGxnLmlzKCc6aGlkZGVuJykpewogICAgICAgIHZhciBjb3VudD1fcmVzdWx0Lmxlbmd0aDsKICAgICAgICAkKCcuaXpoaWh1LWNvbGxlY3Rpb24taW5mbycsJGRsZykudGV4dCgn77yI5Yqg6L296KKr57uI5q2iLi4u5bey5b6X5Yiw6K6w5b2VICcgKyBjb3VudCArICcg5p2h77yJJyk7CiAgICAgICAgJCgnI3poLWdsb2JhbC1zcGlubmVyJykuaGlkZSgpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICAKICAgICAgaWYocGFnZVdhbnQ9PTEpewogICAgICAgICQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcycsJGRsZykuZW1wdHkoKTsKICAgICAgICAkKCcjemgtZ2xvYmFsLXNwaW5uZXInKS5zaG93KCk7CiAgICAgICAgX3Jlc3VsdC5sZW5ndGg9MDsKICAgICAgICBfbG9hZFRpbWVzKys7CiAgICAgICAgJCgnLml6aGlodS1jb2xsZWN0aW9uLWluZm8nLCRkbGcpLnRleHQoJycpOwogICAgICB9CiAgICAgIHZhciAkcGFnZXI9JChfbGlzdFNlbCkucGFyZW50KCkuZmluZCgnLnptLWludml0ZS1wYWdlcicpCiAgICAgICAgLCAkbGFzdFBhZ2U9JHBhZ2VyLmNoaWxkcmVuKCdzcGFuJykubGFzdCgpLnByZXYoKQogICAgICAgICwgdG90YWxDb3VudD0kcGFnZXIubGVuZ3RoPT0wPzE6TnVtYmVyKCRsYXN0UGFnZS50ZXh0KCkpCiAgICAgIDsKICAgICAgaWYocGFnZVdhbnQ+dG90YWxDb3VudCl7CiAgICAgICAgJCgnLml6aGlodS1jb2xsZWN0aW9uLWluZm8nLCRkbGcpLnRleHQoJ++8iOWKoOi9veWujOaIkO+8jOWFseW+l+WIsOiusOW9lSAnICsgX3Jlc3VsdC5sZW5ndGggKyAnIOadoe+8iScpOwogICAgICAgICQoJyN6aC1nbG9iYWwtc3Bpbm5lcicpLmhpZGUoKTsKICAgICAgICAkKCcuc2VsQWxsJywkZGxnKS5jbGljaygpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHBhZ2VOZXh0PXBhZ2VXYW50KzE7CiAgICAgIGlmKHBhZ2VXYW50PT1wYWdlTm93KXsKICAgICAgICBwcm9jZXNzTm9kZSgkKF9saXN0U2VsKS5odG1sKCksJGRsZyk7CiAgICAgICAgaGFuZGxlcihwYWdlTmV4dCxwYWdlTm93LCRkbGcpCiAgICAgIH1lbHNlewogICAgICAgIHZhciBfdXJsPXVybC5kYXRhLmF0dHJbJ2Jhc2UnXSt1cmwuZGF0YS5hdHRyWydwYXRoJ10rJz9wYWdlPScrcGFnZVdhbnQ7CiAgICAgICAgJC5hamF4KF91cmwse3R5cGU6J2dldCcsY29udGV4dDp7bG9hZFRpbWVzOl9sb2FkVGltZXN9fSkuZG9uZShmdW5jdGlvbihyZXN1bHQpewogICAgICAgICAgaWYodGhpcy5sb2FkVGltZXMhPV9sb2FkVGltZXMpcmV0dXJuOwogICAgICAgICAgcHJvY2Vzc05vZGUocmVzdWx0LCRkbGcpOwogICAgICAgICAgaGFuZGxlcihwYWdlTmV4dCxwYWdlTm93LCRkbGcpCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CgogICAgLy/liJ3lp4vljJblvLnlh7rmoYYKICAgIHRoaXMuaW5pdERpYWxvZyA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy4kZGxnPSQoJyMnK3RoaXMuZGxnSUQpOwogICAgICAgIHZhciByZXRWYWw9MDx0aGlzLiRkbGcubGVuZ3RoOwogICAgICAgIGlmKCFyZXRWYWwpewogICAgICAgICAgICB0aGlzLiRkbGcgPSAkKCc8ZGl2PicsIHsgaWQ6IHRoaXMuZGxnSUQsICdjbGFzcyc6ICdtb2RhbC1kaWFsb2cgYWxsTGlua3MnLCB0YWJpbmRleDogJzAnLCBzdHlsZTogJ2Rpc3BsYXk6IG5vbmU7d2lkdGg6NTAwcHgnLCBuYW1lOiBfbmFtZSwgJ2xpc3RTZWwnOiBfbGlzdFNlbCB9KQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy10aXRsZSBtb2RhbC1kaWFsb2ctdGl0bGUtZHJhZ2dhYmxlJyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgeyAnY2xhc3MnOiAnbW9kYWwtZGlhbG9nLXRpdGxlLXRleHQnIH0pLnRleHQoX2luaXRpYWxUaXRsZSkpCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctdGl0bGUtdGV4dCBpemhpaHUtY29sbGVjdGlvbi1pbmZvJyB9KSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy10aXRsZS1jbG9zZScKICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3poLWdsb2JhbC1zcGlubmVyJykuaGlkZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubW9kYWwtZGlhbG9nLWJnJykuaGlkZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5tb2RhbC1kaWFsb2cnKS5oaWRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy1jb250ZW50JyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnemctc2VjdGlvbicgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICdpemhpaHUtY29sbGVjdGlvbi1saW5rcyB6Zy1mb3JtLXRleHQtaW5wdXQnLCB0YWJJbmRleDogJy0xJywgc3R5bGU6ICdoZWlnaHQ6MzAwcHg7b3ZlcmZsb3cteTpzY3JvbGw7b3V0bGluZTpub25lOycgfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxmb3JtPicsIHsgYWN0aW9uOiAnaHR0cDovL2lsb3ZlemhpaHUuZHVhcHAuY29tL3NhdmVNZS5weScsIG1ldGhvZDogJ3Bvc3QnLCB0YXJnZXQ6ICdfYmxhbmsnLCBzdHlsZTogJ2Rpc3BsYXk6bm9uZScgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZXh0YXJlYT4nLCB7IHN0eWxlOiAid2lkdGg6IDEwMCU7IiwgbmFtZTogImxpbmtzIiwgJ2NsYXNzJzogIml6aGlodS1jb2xsZWN0aW9uLWxpbmtzLXBvc3QiIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgbmFtZTogJ3RpdGxlJyB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnem0tY29tbWFuZCcgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICd6Zy1sZWZ0JyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnemctYnRuLWJsdWUgcmVsb2FkJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBocmVmOiAnamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRkID0gJCh0aGlzKS5jbG9zZXN0KCcubW9kYWwtZGlhbG9nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoMSwgTnVtYmVyKHVybC5kYXRhLnBhcmFtLnF1ZXJ5WydwYWdlJ10pLCAkZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRleHQoJ+mHjeaWsOiOt+WPlicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ3pnLWJ0bi1ibHVlIHNhdmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaHJlZjogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRsZyA9ICQodGhpcykuY2xvc2VzdCgnLm1vZGFsLWRpYWxvZy1jb250ZW50JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRsaW5rcyA9ICRkbGcuZmluZCgnLml6aGlodS1jb2xsZWN0aW9uLWxpbmtzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRsaW5rc1Bvc3QgPSAkZGxnLmZpbmQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcy1wb3N0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRsaW5rc1RpdGxlID0gJGxpbmtzUG9zdC5uZXh0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRmb3JtID0gJGxpbmtzUG9zdC5wYXJlbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgbGlua3MgPSAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rcy5maW5kKCdsaSBhJykuZWFjaChmdW5jdGlvbihpLCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rcyArPSBlLmdldEF0dHJpYnV0ZSgnaHJlZicpICsgJ1xuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGlua3NQb3N0LnZhbChsaW5rcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmtzVGl0bGUudmFsKCQoJyN6aC1mYXYtaGVhZC10aXRsZSwuem0tcHJvZmlsZS1oZWFkZXItbWFpbiAudGl0bGUtc2VjdGlvbiBhLm5hbWUnKS50ZXh0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtLnN1Ym1pdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGV4dCgn5L+d5a2YJykpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpCiAgICAgICAgICAgICAgICAuZHJhZ2dhYmxlKHsgaGFuZGxlOiAnLm1vZGFsLWRpYWxvZy10aXRsZS1kcmFnZ2FibGUnIH0pCgogICAgICAgICAgICBpZih0aGlzLiRkbGcubGVuZ3RoKQogICAgICAgICAgICAgICAgcmV0VmFsID0gdHJ1ZQoKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldFZhbAogICAgfQoKICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigkZCkgewogICAgICAgIGlmICgkKCcjemgtZ2xvYmFsLXNwaW5uZXI6dmlzaWJsZScpLmxlbmd0aCkgcmV0dXJuCiAgICAgICAgaWYgKCEkZCkgJGQgPSB0aGlzLiRkbGcKICAgICAgICBpZiAoISRkKSByZXR1cm4KICAgICAgICBpZiAoISQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcycsICRkKS5jaGlsZHJlbigpLmxlbmd0aCkgewogICAgICAgICAgICBoYW5kbGVyKDEsIE51bWJlcih1cmwuZGF0YS5wYXJhbS5xdWVyeVsncGFnZSddKSwgJGQpCiAgICAgICAgfQogICAgfQoKfQoKLyoqCiAqIOWbnuetlOmhtQogKi8KCiAgaWYocGFnZUlzLkFuc3dlcil7Cgp2YXIgJGxibFF1ZXN0aW9uTWV0YT0kKCcjemgtcXVlc3Rpb24tbWV0YS13cmFwJykvL3F1ZXN0aW9uX21ldGEKOwoKICAgIHZhciAkcXVlc3Rpb25XcmFwPSQoJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAnKTsKICAgICRxdWVzdGlvbldyYXAuY2hpbGRyZW4oJy5wYW5lbC1jb250YWluZXInKS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICB3aW5kb3cuaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJChldmVudC50YXJnZXQpKTsKICAgIH0pOwogICAgaWYod2luZG93LmlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgLy8kcXVlc3Rpb25XcmFwLmNoaWxkcmVuKCcubWV0YS1pdGVtW25hbWU9YWRkY29tbWVudF0nKS5wcmVwZW5kVG8oJHF1ZXN0aW9uV3JhcCk7CiAgICAgICAgd2luZG93LmlaaGlodS5Db21tZW50LnByb2Nlc3NDb21tZW50QnV0dG9uKCRxdWVzdGlvbldyYXApOwogICAgICAgIGlmKCEkKCcjaXpoX1F1ZXN0aW9uU2hhZG93JykubGVuZ3RoKXsKICAgICAgICAgICAgJCgnPGRpdj4nLHsnY2xhc3MnOidpemhfYm94U2hhZG93JyxpZDonaXpoX1F1ZXN0aW9uU2hhZG93J30pLmNzcyh7CiAgICAgICAgICAgICAgICAnei1pbmRleCc6ICctMScKICAgICAgICAgICAgICAsICdwb3NpdGlvbic6ICdyZWxhdGl2ZScKICAgICAgICAgICAgICAsICd0b3AnOiAtMjUKICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6IC0zMgogICAgICAgICAgICB9KS5wcmVwZW5kVG8oJ2JvZHk+Lnp1LW1haW46Zmlyc3QnKS5oaWRlKCk7CiAgICAgICAgfSAgIAogICAgfQoKICAgIC8vcHJvY2VzcyBlYWNoIGFuc3dlcgogICAgdmFyICRsaXN0QW5zd2Vycz0kKCcuem0taXRlbS1hbnN3ZXIsLmZlZWQtaXRlbScsJyN6aC1xdWVzdGlvbi1hbnN3ZXItd3JhcCcpOwogICAgaWYoJGxpc3RBbnN3ZXJzJiYkbGlzdEFuc3dlcnMubGVuZ3RoKXsKICAgICAgICAkbGlzdEFuc3dlcnMuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICB3aW5kb3cuaVpoaWh1LkFuc3dlci5wcm9jZXNzQW5zd2VyKCQoZSksbnVsbAogICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICwgZmFsc2UpOwogICAgICAgIH0pOwogICAgfQoKICAgICQoJyN6aC1xdWVzdGlvbi1hbnN3ZXItd3JhcCcpLmJpbmQoJ0RPTU5vZGVJbnNlcnRlZCcsZnVuY3Rpb24oZXZlbnQpewogICAgICAgIHZhciAkbmE9JChldmVudC50YXJnZXQpLmZpbHRlcignLnptLWl0ZW0tYW5zd2VyJyk7CiAgICAgICAgaWYoJG5hLmxlbmd0aCl7CiAgICAgICAgICAgIHdpbmRvdy5pWmhpaHUuQW5zd2VyLnByb2Nlc3NBbnN3ZXIoJG5hLG51bGwKICAgICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICAgLCBmYWxzZSk7CiAgICAgICAgfQogICAgfSk7CgogICAgdmFyICRjbT0kKCcuem0tY29tbWVudC1ib3gnLCRxdWVzdGlvbldyYXApOwogICAgaWYoJGNtLmxlbmd0aCAmJiAkY20uaXMoJzp2aXNpYmxlJykpewogICAgCXZhciBmb2N1c05hbWUgPSBpWmhpaHUuQ29tbWVudC5zY3JvbGxGb2N1c0NvbW1lbnRPblBhZ2VMb2FkKCRjbSk7CgogICAgCWlaaGlodS5Db21tZW50Lm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20oJGNtLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKSxmdW5jdGlvbigpewogICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5wcm9jZXNzQ29tbWVudCgkY20sIGZvY3VzTmFtZSk7CiAgICAgICAgfSk7CiAgICB9CiAgfQoKLyoqCiAqIOaUtuiXj+mhtQogKi8KICBpZihwYWdlSXMuQ29sbGVjdGlvbil7CiAgICAvL+a3u+WKoOaMiemSrgogICAgJCgnI3poLWxpc3QtbWV0YS13cmFwJykKICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6ICd6Zy1idWxsJyB9KS50ZXh0KCfigKInKSkKICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7IGhyZWY6ICdqYXZhc2NyaXB0OjsnLCBpZDogJ2dldEFsbExpbmtzJyB9KS50ZXh0KCflnLDlnYDmuIXljZUnKSk7CgogICAgdmFyIGJ0biA9ICQoJyNnZXRBbGxMaW5rcycpOwogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgIAogICAgLy/ms6jlhozngrnlh7vkuovku7YKICAgIGJ0bi5jbGljayhmdW5jdGlvbigpewogICAgICB2YXIgYWxsTGlua3NDb2xsZWN0aW9uPW5ldyBhbGxMaW5rcygnQ29sbGVjdGlvbnMnLCcjemgtbGlzdC1hbnN3ZXItd3JhcCcsJ+aUtuiXj+WkueWGheWuuScpOwoJICBpZighYWxsTGlua3NDb2xsZWN0aW9uLmluaXREaWFsb2coKSlyZXR1cm47CiAgICAgICQoJy5tb2RhbC1kaWFsb2ctYmcnKS5zaG93KCk7CiAgICAgIHZhciB5ID0gKCR3aW4uaGVpZ2h0KCkgLSBhbGxMaW5rc0NvbGxlY3Rpb24uJGRsZy53aWR0aCgpKSAvIDIKICAgICAgICAsIHggPSAoJHdpbi53aWR0aCgpIC0gYWxsTGlua3NDb2xsZWN0aW9uLiRkbGcud2lkdGgoKSkgLyAyCiAgICAgIDsKICAgICAgYWxsTGlua3NDb2xsZWN0aW9uLiRkbGcuY3NzKHsndG9wJzogeSwgJ2xlZnQnOiB4fSkuZmFkZUluKCdzbG93Jyk7CiAgICAgIGFsbExpbmtzQ29sbGVjdGlvbi5zdGFydCgpOwogICAgfSk7CiAgfQogIGlmKHBhZ2VJcy5BbnN3ZXJzKXsKICAgIC8v5re75Yqg5oyJ6ZKuCiAgICAkKCcuem0tcHJvZmlsZS1zZWN0aW9uLW5hbWUnKQogICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsgJ2NsYXNzJzogJ3pnLWJ1bGwnIH0pLnRleHQoJ+KAoicpKQogICAgICAuYXBwZW5kKCQoJzxhPicsIHsgaHJlZjogJ2phdmFzY3JpcHQ6OycsIGlkOiAnZ2V0QWxsTGlua3MnIH0pLnRleHQoJ+WcsOWdgOa4heWNlScpKTsKCiAgICB2YXIgYnRuID0gJCgnI2dldEFsbExpbmtzJyk7CiAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgCiAgICAvL+azqOWGjOeCueWHu+S6i+S7tgogICAgYnRuLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgIHZhciBhbGxMaW5rc0Fuc3dlcnM9bmV3IGFsbExpbmtzKCdBbnN3ZXJzJywnI3poLXByb2ZpbGUtYW5zd2VyLWxpc3QnLCfnlKjmiLflm57nrZQnKTsKCSAgaWYoIWFsbExpbmtzQW5zd2Vycy5pbml0RGlhbG9nKCkpcmV0dXJuOwogICAgICAkKCcubW9kYWwtZGlhbG9nLWJnJykuc2hvdygpOwogICAgICB2YXIgeSA9ICgkd2luLmhlaWdodCgpIC0gYWxsTGlua3NBbnN3ZXJzLiRkbGcud2lkdGgoKSkgLyAyCiAgICAgICAgLCB4ID0gKCR3aW4ud2lkdGgoKSAtIGFsbExpbmtzQW5zd2Vycy4kZGxnLndpZHRoKCkpIC8gMgogICAgICA7CiAgICAgIGFsbExpbmtzQW5zd2Vycy4kZGxnLmNzcyh7J3RvcCc6IHksICdsZWZ0JzogeH0pLmZhZGVJbignc2xvdycpOwogICAgICBhbGxMaW5rc0Fuc3dlcnMuc3RhcnQoKTsKICAgIH0pOwogIH0KCiAgaWYocGFnZUlzLk15Q29sbGVjdGlvbiYmd2luZG93LmlaaGlodS5RdWlja0Zhdm8pewogICAgdmFyICRmYXZJdGVtcz0kKCcjemgtZmF2bGlzdHMtd3JhcCcpLmNoaWxkcmVuKCcuem0taXRlbScpOwogICAgJGZhdkl0ZW1zLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgIH0pOwogIH0KCi8qCiAqIOmmlumhtQogKi8KICAgIHZhciAkdG9wc3Rvcnk9JCgnI2lzLXRvcHN0b3J5MicpCiAgICAgICwgaXNUb3BTdG9yeT0kdG9wc3RvcnkmJiR0b3BzdG9yeS5sZW5ndGgKICAgICAgLCBwcm9wRmVlZFR5cGU9J2RhdGEtdHlwZScvLzonZGF0YS1mZWVkdHlwZScKICAgICAgLCAkbGJsSG9tZVRpdGxlPSQoJyN6aC1ob21lLWxpc3QtdGl0bGUnKS8vYWN0aXZpdHlfY2FwdGlvbgogICAgICAsICRidG5OZXdBY3Rpdml0eT0kKCcjemgtbWFpbi1mZWVkLWZyZXNoLWJ1dHRvbicpLy9uZXdfYWN0aXZpdHkKICAgICAgLCAkZmVlZExpc3Q9JCgnLnpoLWdlbmVyYWwtbGlzdCcpLy9mZWVkX2xpc3QKICAgICAgLCAkdG9wTGlua0hvbWU9JCgnI3poLXRvcC1saW5rLWhvbWUnKQogICAgICAsICRmaWx0ZXI9Ly9pc1RvcFN0b3J5PwogICAgICAgICAgICAkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6J2l6aC1mZWVkcy1maWx0ZXInIH0pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicsIHsgJ2NsYXNzJzogJ2l6aC1idXR0b24gaXpoLWZlZWRzLWZpbHRlci1vcHRpb24nLCAnc2hvd0ZlZWRzJzogJ3EnIH0pCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uJyB9KSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCfpl67popgnKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdjbGFzcyc6ICdpemgtYnV0dG9uIGl6aC1mZWVkcy1maWx0ZXItb3B0aW9uJywgJ3Nob3dGZWVkcyc6ICdhJyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnemctaWNvbicgfSkpCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn5Zue562UJykKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyAnY2xhc3MnOiAnaXpoLWJ1dHRvbiBpemgtZmVlZHMtZmlsdGVyLW9wdGlvbicsICdzaG93RmVlZHMnOiAncCxyJywgJ2RhdGEtdGlwJzogJ3MkdCTkuJPmoI/jgIHlnIbmoYwnIH0pCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uJyB9KSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCflhbbku5YnKQogICAgICAgICAgICAgICAgKQogICAgICAsICRmaWx0ZXJJbmZvPSQoJzxhPicseydjbGFzcyc6J2l6aC1mZWVkcy1maWx0ZXItaW5mbyBub3RoaW5nJyxocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7J30pLm9uKCdjbGljaycsZnVuY3Rpb24oKXskZmlsdGVyLnRyaWdnZXIoJGZpbHRlci5pcygnOmhpZGRlbicpfHwkZmlsdGVyLmF0dHIoJ2RvaW5nJyk9PSdoaWRlJz8nc2hvdyc6J2hpZGUnKTt9KQogICAgICAsIFNob3dGZWVkcz1mdW5jdGlvbih0eXBlLGVuYWJsZSl7CiAgICAgICAgICAgIHZhciBpZD0iaXpoQ1NTX0ZpbHRlckZlZWRfIit0eXBlCiAgICAgICAgICAgICAgLCBuZD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkKICAgICAgICAgICAgOwogICAgICAgICAgICBpZihlbmFibGUpewogICAgICAgICAgICAgICAgaWYobmQpbmQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuZCk7CiAgICAgICAgICAgIH1lbHNlIGlmKGhlYWRzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICBpZighbmQpewogICAgICAgICAgICAgICAgICAgIG5kPV9kb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgICAgICAgICAgICAgICAgICBuZC50eXBlPSd0ZXh0L2Nzcyc7CiAgICAgICAgICAgICAgICAgICAgbmQuaWQ9aWQ7CiAgICAgICAgICAgICAgICAgICAgbmQuYXBwZW5kQ2hpbGQoX2RvYy5jcmVhdGVUZXh0Tm9kZSgnLmZlZWQtaXRlbVsnK3Byb3BGZWVkVHlwZSsnXj0iJyt0eXBlKyciXXtkaXNwbGF5Om5vbmV9JykpOwogICAgICAgICAgICAgICAgICAgIGhlYWRzWzBdLmFwcGVuZENoaWxkKG5kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8ve1JPVU5EVEFCTEVfQUREX1JFTEFURUQ6ICJyb3VuZHRhYmxlIixBUlRJQ0xFX1ZPVEVfVVA6ICJwb3N0X3ZvdGUiLEFSVElDTEVfQ1JFQVRFOiAicG9zdF9jcmVhdGUiLFJFQ09NTUVOREVEOiAiZmVlZF9yZWNvbW1lbmRlZCIsUVVFU1RJT05fRk9MTE9XOiAiZmVlZF9xdWVzdGlvbl9mb2xsb3ciLFFVRVNUSU9OX0NSRUFURTogImZlZWRfcXVlc3Rpb24iLEFOU1dFUl9WT1RFX1VQOiAiZmVlZF9hbnN3ZXJfdm90ZSIsQU5TV0VSX0NSRUFURTogImZlZWRfYW5zd2VyX2Fuc3dlciJ9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAsIHJlZnJlc2hGaWx0ZXJJbmZvPWZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBjb3VudD0kZmVlZExpc3QuY2hpbGRyZW4oJy5mZWVkLWl0ZW06aGlkZGVuJykubGVuZ3RoCiAgICAgICAgICAgICAgLCBpbmZvPScgPui/h+a7pOmAiemhuTwnCiAgICAgICAgICAgIDsKICAgICAgICAgICAgaWYoY291bnQpewogICAgICAgICAgICAgICAgaW5mbz0n77yIJytjb3VudCsn5p2h5Yqo5oCB6KKr6ZqQ6JeP77yJJzsKICAgICAgICAgICAgICAgICRmaWx0ZXJJbmZvLnJlbW92ZUNsYXNzKCdub3RoaW5nJykuY3NzKHtkaXNwbGF5OicnfSk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGZpbHRlckluZm8uYWRkQ2xhc3MoJ25vdGhpbmcnKTsKICAgICAgICAgICAgfSAgIAogICAgICAgICAgICAkZmlsdGVySW5mby50ZXh0KGluZm8pOwogICAgICAgIH0KICAgICAgLCBmZWVkc0NvbHVtbnM9ZnVuY3Rpb24oKXsgLy8gSW1wbGVtZW50ZWQgYnkgbW9ybGV5LCBtb2RpZmllZCBieSB1bm9negogICAgICAgICAgICAvL+WKqOaAgeeahOexu+WeiwogICAgICAgICAgICB2YXIgZmVlZFR5cGVzID0gLy9pc1RvcFN0b3J5PwogICAgICAgICAgICAgICAgW3sKICAgICAgICAgICAgICAgICBpbmRleDogMCwKICAgICAgICAgICAgICAgICBuYW1lOiAn5YWo6YOoJywKICAgICAgICAgICAgICAgICBjb2RlTmFtZTogJycKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBpbmRleDogMSwKICAgICAgICAgICAgICAgICBuYW1lOiAn6Zeu6aKYJywKICAgICAgICAgICAgICAgICBjb2RlTmFtZTogJ3EnCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgaW5kZXg6IDIsCiAgICAgICAgICAgICAgICAgbmFtZTogJ+WbnuetlCcsCiAgICAgICAgICAgICAgICAgY29kZU5hbWU6ICdhJwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGluZGV4OiAzLAogICAgICAgICAgICAgICAgIG5hbWU6ICfkuJPmoI8nLAogICAgICAgICAgICAgICAgIGNvZGVOYW1lOiAncCcKICAgICAgICAgICAgICAgIH1dOwogICAgICAgICAgICAKICAgICAgICAgICAgLy/oh6rlrprkuYkgQ1NTIOWIsCBoZWFkCiAgICAgICAgICAgIHZhciBzdHlsZXMgPSBbXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0eWxlcy5wdXNoKCcuemEtZmlsdGVye2Rpc3BsYXk6IGlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6MTBweDtjdXJzb3I6cG9pbnRlcjtjb2xvcjojOTk5O30nKTsKICAgICAgICAgICAgc3R5bGVzLnB1c2goJy56YS1maWx0ZXIuYWN0aXZle2NvbG9yOiMyNTk7fScpOwogICAgICAgICAgICBzdHlsZXMucHVzaCgnLnphLWZpbHRlcj4uemctbnVtLmhpZGV7ZGlzcGxheTpub25lO30nKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICQoJzxzdHlsZS8+JykudGV4dChzdHlsZXMuam9pbignJykpLmFwcGVuZFRvKCdoZWFkJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgJHpoSG9tZUxpc3RUaXRsZSA9ICRsYmxIb21lVGl0bGU7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL+agueaNruexu+Wei+a3u+WKoOi/h+a7pOaMiemSriDliLAgI3poLWhvbWUtbGlzdC10aXRsZQogICAgICAgICAgICB2YXIgZmlsdGVyQnRucyA9IFtdCiAgICAgICAgICAgICAgLCBpID0gZmVlZFR5cGVzLmxlbmd0aDsKICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgIGZpbHRlckJ0bnMucHVzaCgKICAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nKS5hZGRDbGFzcygnemEtZmlsdGVyJykKICAgICAgICAgICAgICAgICAuYXR0cigndHlwZUluZGV4JywgZmVlZFR5cGVzW2ldLmluZGV4KQogICAgICAgICAgICAgICAgIC50ZXh0KGZlZWRUeXBlc1tpXS5uYW1lKQogICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgeyAnY2xhc3MnOiAnemctbnVtJyB9KS5hZGRDbGFzcygnaGlkZScpKQogICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCB0b2dnbGVGZWVkVHlwZSkKICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZpbHRlckJ0bnMucmV2ZXJzZSgpOwogICAgICAgICAgICBmaWx0ZXJCdG5zWzBdLmFkZENsYXNzKCdhY3RpdmUnKTsKCiAgICAgICAgICAgICR6aEhvbWVMaXN0VGl0bGUuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgIHJldHVybiAoZSE9bnVsbCYmKGUubm9kZVZhbHVlfHwnJykuaW5kZXhPZign5pyA5paw5Yqo5oCBJyk+PTApCiAgICAgICAgICAgIH0pLnJlbW92ZSgpCiAgICAgICAgICAgICR6aEhvbWVMaXN0VGl0bGUuZmluZCgnaScpLmVxKDApLmFmdGVyKGZpbHRlckJ0bnMpLnJlbW92ZSgpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyICR0YXJnZXRaZXJvID0gZmlsdGVyQnRuc1swXS5maW5kKCcuemctbnVtJykKICAgICAgICAgICAgICAsIGN1cmZlZWRUeXBlQ29kZU5hbWUgPSAnJwogICAgICAgICAgICAKICAgICAgICAgICAgZnVuY3Rpb24gdHlwZU1hdGNoKCRlbGVtKSB7CiAgICAgICAgICAgICBpZiAoY3VyZmVlZFR5cGVDb2RlTmFtZSA9PSAnJykgewogICAgICAgICAgICAgICAgICRlbGVtLnNob3coKTsKICAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA8PSAkZWxlbS5hdHRyKHByb3BGZWVkVHlwZSkuaW5kZXhPZihjdXJmZWVkVHlwZUNvZGVOYW1lKSkgewogICAgICAgICAgICAgICAgICRlbGVtLnNob3coKTsKICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgJGVsZW0uaGlkZSgpOwogICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvL+aMiemSruS6i+S7tgogICAgICAgICAgICBmdW5jdGlvbiB0b2dnbGVGZWVkVHlwZSgpIHsKICAgICAgICAgICAgIHZhciAkY2xpY2tlZCA9ICQodGhpcyk7CiAgICAgICAgICAgICAkY2xpY2tlZE51bSA9ICRjbGlja2VkLmZpbmQoJy56Zy1udW0nKTsKICAgICAgICAgICAgIC8vIOS6pOS6kuaViOaenAogICAgICAgICAgICAgZmlsdGVyQnRucy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgICRjbGlja2VkLmFkZENsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICBpZiAoJGNsaWNrZWQuYXR0cigndHlwZUluZGV4JykgPT0gMCkgewogICAgICAgICAgICAgICAgICQoJy56Zy1udW0nLCAnLnphLWZpbHRlcicpLnRleHQoJycpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgIHZhciB0b3RhbFVucmVhZCA9IChwYXJzZUludCgkdGFyZ2V0WmVyby50ZXh0KCkpIHx8IDApIC0gKHBhcnNlSW50KCRjbGlja2VkTnVtLnRleHQoKSkgfHwgMCk7CiAgICAgICAgICAgICAgICAgaWYgKHRvdGFsVW5yZWFkICE9IDApIHsKICAgICAgICAgICAgICAgICAgICAgJHRhcmdldFplcm8udGV4dCh0b3RhbFVucmVhZCk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgJHRhcmdldFplcm8udGV4dCgnJykuYWRkQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICRjbGlja2VkTnVtLnRleHQoJycpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICB9CiAgICAgICAgICAgICBjdXJmZWVkVHlwZUNvZGVOYW1lID0gZmVlZFR5cGVzWyRjbGlja2VkLmF0dHIoJ3R5cGVJbmRleCcpXS5jb2RlTmFtZTsKICAgICAgICAgICAgIC8vIOS/oeaBr+a1gei/h+a7pAogICAgICAgICAgICAgJCgnLmZlZWQtaXRlbScpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgdHlwZU1hdGNoKCQodGhpcykpOwogICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFR5cGVJbmRleEJ5Q29kZU5hbWUoY29kZU5hbWUpIHsKICAgICAgICAgICAgIHZhciBpID0gZmVlZFR5cGVzLmxlbmd0aDsKICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgICBpZiAoY29kZU5hbWUgPT0gZmVlZFR5cGVzW2ldLmNvZGVOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL+ebkeWQrOaOqOmAgQogICAgICAgICAgICB2YXIgaGFzTmV3RmVlZCA9IGZhbHNlOwogICAgICAgICAgICAvL2NyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZQogICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHsKICAgICAgICAgICAgIGlmICggISEgcGFyc2VJbnQoJGJ0bk5ld0FjdGl2aXR5LnRleHQoKSkpIHsKICAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtdXRhdGlvbikgewogICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIYXMgTmV3IEZlZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOacieaWsOaOqOmAgeWImeinpuWPkeS5iwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzTmV3RmVlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAkYnRuTmV3QWN0aXZpdHkudGV4dCgnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAkLndoZW4oJGJ0bk5ld0FjdGl2aXR5WzBdLmNsaWNrKCkpLmRvbmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzTmV3RmVlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy9wYXNzIGluIHRoZSB0YXJnZXQgbm9kZSwgYXMgd2VsbCBhcyB0aGUgb2JzZXJ2ZXIgb3B0aW9ucwogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKAogICAgICAgICAgICAgJGJ0bk5ld0FjdGl2aXR5WzBdLCB7CiAgICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlCiAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8v55uR5ZCs5o+S5YWlCiAgICAgICAgICAgICRmZWVkTGlzdC5vbigiRE9NTm9kZUluc2VydGVkIiwgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgdmFyICRzZWxmID0gJChlLnRhcmdldCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAgaWYgKCRzZWxmLmhhc0NsYXNzKCdmZWVkLWl0ZW0nKSkgewogICAgICAgICAgICAgICAgIGlmIChoYXNOZXdGZWVkKSB7CiAgICAgICAgICAgICAgICAgICAgICRzZWxmLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSBmaWx0ZXJCdG5zW2dldFR5cGVJbmRleEJ5Q29kZU5hbWUoJHNlbGYuYXR0cihwcm9wRmVlZFR5cGUpKV0uZmluZCgnLnpnLW51bScpOwogICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LnRleHQoKHBhcnNlSW50KCR0YXJnZXQudGV4dCgpKSB8fCAwKSArIDEpLnJlbW92ZUNsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRaZXJvLnRleHQoKHBhcnNlSW50KCR0YXJnZXRaZXJvLnRleHQoKSkgfHwgMCkgKyAxKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIHR5cGVNYXRjaCgkc2VsZik7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAsIGhvbWVGZWVkcz1mdW5jdGlvbihpemhIb21lRmVlZHNDb2x1bW5zKXsKICAgICAgICAgICAgaWYgKGl6aEhvbWVGZWVkc0NvbHVtbnMpewogICAgICAgICAgICAgICAgZmVlZHNDb2x1bW5zKCk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGZpbHRlci5jaGlsZHJlbignLml6aC1mZWVkcy1maWx0ZXItb3B0aW9uJykuYWRkQ2xhc3MoJ29uJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgIHZhciBpPTAKICAgICAgICAgICAgICAgICAgICAgICwgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgLCBmcz0kZS5hdHRyKCdzaG93RmVlZHMnKQogICAgICAgICAgICAgICAgICAgICAgLCBmYT1mcy5zcGxpdCgnLCcpCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICQoJy5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbltzaG93RmVlZHM9IicrZnMrJyJdJykudG9nZ2xlQ2xhc3MoJ29uJyk7CiAgICAgICAgICAgICAgICAgICAgZm9yKDtpPGZhLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgICAgICAgICBTaG93RmVlZHMoZmFbaV0sJGUuaXMoJy5vbicpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbHRlckluZm8oKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYoJHRvcExpbmtIb21lLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRmaWx0ZXIyPSQoJzxkaXY+JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3Moe3Bvc2l0aW9uOidhYnNvbHV0ZScsYm9yZGVyOicxcHggc29saWQgIzc3NycsYmFja2dyb3VuZENvbG9yOicjZmZmJ30pLmhpZGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkZmlsdGVyLmNsb25lKHRydWUsdHJ1ZSkuY3NzKHtkaXNwbGF5OidibG9jayd9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbignc2hvdycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuaXMoJzpoaWRkZW4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuY3NzKHtkaXNwbGF5OicnLG9wYWNpdHk6MH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYW5pbWF0ZSh7b3BhY2l0eToxfSwnc2xvdycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbignaGlkZScsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuZmFkZU91dCgnc2xvdycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgJHRvcExpbmtIb21lLmFmdGVyKCRmaWx0ZXIyKS5wYXJlbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXInLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZT0kKHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGY9JGUuY2hpbGRyZW4oKS5sYXN0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmLnRyaWdnZXIoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWx0ZXJJbmZvLmZpbHRlcignLm5vdGhpbmcnKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkZj0kZS5jaGlsZHJlbigpLmxhc3QoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGYudHJpZ2dlcignaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpbHRlckluZm8uZmlsdGVyKCcubm90aGluZycpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZigkbGJsSG9tZVRpdGxlLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgJGZpbHRlckluZm8uY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTonbm9uZScKICAgICAgICAgICAgICAgICAgICAgICwgdGV4dERlY29yYXRpb246J25vbmUnCiAgICAgICAgICAgICAgICAgICAgICAsIGN1cnNvcjoncG9pbnRlcicKICAgICAgICAgICAgICAgICAgICB9KS5pbnNlcnRCZWZvcmUoaXNUb3BTdG9yeT8kdG9wc3Rvcnk6JCgnI2ZlZWQtdmVyJykpOwogICAgICAgICAgICAgICAgICAgICRsYmxIb21lVGl0bGUuY3NzKHtvdmVyZmxvdzonaGlkZGVuJ30pCiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKCRmaWx0ZXIpCiAgICAgICAgICAgICAgICAgICAgICAgIC8vLmNoaWxkcmVuKCdpOmZpcnN0JykKICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRmPSRlLmNoaWxkcmVuKCcuaXpoLWZlZWRzLWZpbHRlci1pbmZvLm5vdGhpbmcnKS5zdG9wKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRmLmlzKCc6aGlkZGVuJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGYuY3NzKHtkaXNwbGF5OicnLG9wYWNpdHk6MH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZi5hbmltYXRlKHtvcGFjaXR5OjF9LCdmYXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkZj0kZS5jaGlsZHJlbignLml6aC1mZWVkcy1maWx0ZXItaW5mby5ub3RoaW5nJykuc3RvcCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZi5mYWRlT3V0KCdmYXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICRmaWx0ZXIuY3NzKHttYXJnaW5MZWZ0Oi0kZmlsdGVyLndpZHRoKCksZGlzcGxheTonbm9uZSd9KQogICAgICAgICAgICAgICAgICAgICAgICAub24oJ3Nob3cnLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRlLmF0dHIoJ2RvaW5nJyk9PT0nc2hvdycpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYXR0cignZG9pbmcnLCdzaG93Jykuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuaXMoJzpoaWRkZW4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5jc3Moe2Rpc3BsYXk6Jyd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYW5pbWF0ZSh7bWFyZ2luTGVmdDowfSwnc2xvdycsZnVuY3Rpb24oKXskKHRoaXMpLmNzcygnZGlzcGxheScsJycpLnJlbW92ZUF0dHIoJ2RvaW5nJyk7fSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignaGlkZScsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZT0kKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuYXR0cignZG9pbmcnKT09PSdoaWRlJylyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5hdHRyKCdkb2luZycsJ2hpZGUnKS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5hbmltYXRlKHttYXJnaW5MZWZ0Oi0kZmlsdGVyLndpZHRoKCl9LCdzbG93JyxmdW5jdGlvbigpeyQodGhpcykuY3NzKCdkaXNwbGF5Jywnbm9uZScpLnJlbW92ZUF0dHIoJ2RvaW5nJyk7fSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlcicsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlLnRyaWdnZXIoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUudHJpZ2dlcignaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICByZWZyZXNoRmlsdGVySW5mbygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgOwogICAgaWYocGFnZUlzLkhvbWV8fHBhZ2VJcy5EZWJ1dHMpewogICAgICAgICRmZWVkTGlzdC5maW5kKCcuZmVlZC1pdGVtJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICB3aW5kb3cuaVpoaWh1LkFuc3dlci5wcm9jZXNzQW5zd2VyKCQoZSksbnVsbAogICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICwgaXpoQXV0aG9yTGlzdAogICAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICAgICRmZWVkTGlzdC5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgdmFyICRpdGVtPSQoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgaWYoJGl0ZW0uaXMoJy5mZWVkLWl0ZW0nKSl7CiAgICAgICAgICAgICAgICB3aW5kb3cuaVpoaWh1LkFuc3dlci5wcm9jZXNzQW5zd2VyKCRpdGVtLG51bGwKICAgICAgICAgICAgICAgICAgLCAkYm9keS5hdHRyKCdpemhBdXRob3JSZWFyJyk9PScxJwogICAgICAgICAgICAgICAgICAsICRib2R5LmF0dHIoJ2l6aEF1dGhvckxpc3QnKT09JzEnCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgcmVmcmVzaEZpbHRlckluZm8oKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGlmIChwYWdlSXMuSG9tZSl7CiAgICAJdmFyIGJIb21lRmVlZHNDb2x1bW5zPXdpbmRvdy5pWmhpaHUuY29uZmlnWydIb21lRmVlZHNDb2x1bW5zJ10KICAgICAgICBpZiAoaXpoSG9tZU5vdGkmJiFiSG9tZUZlZWRzQ29sdW1ucwogICAgICAgICAmJiAkbGJsSG9tZVRpdGxlLmxlbmd0aAogICAgICAgICAmJiAkYnRuTmV3QWN0aXZpdHkubGVuZ3RoCiAgICAgICAgKXsKICAgICAgICAgICAgJGxibEhvbWVUaXRsZS5jc3MoewogICAgICAgICAgICAgICAgJ2Zsb2F0JzonbGVmdCcKICAgICAgICAgICAgICAsICdtYXJnaW4tYm90dG9tJzonMnB4JwogICAgICAgICAgICAgICwgJ2xpbmUtaGVpZ2h0JzonMzJweCcKICAgICAgICAgICAgICAsICd3aWR0aCc6JzEwMCUnCiAgICAgICAgICAgICAgfSkubmV4dCgpLmNzcygnY2xlYXInLCdib3RoJyk7CiAgICAgICAgICAgICRidG5OZXdBY3Rpdml0eS5jc3MoewogICAgICAgICAgICAgICAgJ2Zsb2F0JzoncmlnaHQnCiAgICAgICAgICAgICAgLCAnbWFyZ2luJzonMCcKICAgICAgICAgICAgICAsICdsaW5lLWhlaWdodCc6JzIycHgnCiAgICAgICAgICAgIH0pLmFwcGVuZFRvKCRsYmxIb21lVGl0bGUpOwogICAgICAgIH0KICAgICAgICBob21lRmVlZHMoYkhvbWVGZWVkc0NvbHVtbnMpOwogICAgfQoKCi8qKgogKiDpl67popjpobUKICovCgogIGlmKHBhZ2VJcy5RdWVzdGlvbil7CgogICAgdmFyICRsYmxRdWVzdGlvbk1ldGE9JCgnI3poLXF1ZXN0aW9uLW1ldGEtd3JhcCcpLy9xdWVzdGlvbl9tZXRhCiAgICAgICwgJGxpc3RBbnN3ZXJzPSQoJyN6aC1xdWVzdGlvbi1hbnN3ZXItd3JhcCwjemgtcXVlc3Rpb24tY29sbGFwc2VkLXdyYXAnKS5jaGlsZHJlbigpLy8kKCcuem0taXRlbS1hbnN3ZXInLCcjemgtc2luZ2xlLXF1ZXN0aW9uJykKICAgICAgLCBudW1BbnN3ZXJzQ291bnQ9JGxpc3RBbnN3ZXJzLmxlbmd0aAogICAgICAsICRidG5Db2xsYXBzZWRTd2l0Y2hlcj0kKCcjemgtcXVlc3Rpb24tY29sbGFwc2VkLXN3aXRjaGVyJykKICAgICAgLCBudW1Db2xsYXBzZWRDb3VudD0hJGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmxlbmd0aHx8JGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmlzKCc6aGlkZGVuJyk/MDpwYXJzZUludCgkKCcjemgtcXVlc3Rpb24tY29sbGFwc2VkLW51bScpLnRleHQoKSkKICAgICAgLCBudW1BbnN3ZXJzQ291bnRUb3RhbD1udW1BbnN3ZXJzQ291bnQrbnVtQ29sbGFwc2VkQ291bnQKICAgICAgLCAkcmVwbHk9JCgnI3poLXF1ZXN0aW9uLWFuc3dlci1mb3JtLXdyYXAnKS8vcmVwbHlfZm9ybQogICAgOwogICAgaWYoJGxibFF1ZXN0aW9uTWV0YS5sZW5ndGgpewogICAgICAgIHZhciBzPW5ldyBBcnJheSgpCiAgICAgICAgICAsICRhPSQoJzxhPicpCiAgICAgICAgICAsICRjPSQoJzxzcGFuPicseydjbGFzcyc6J3pnLWJ1bGwnfSkudGV4dCgn4oCiJykKICAgICAgICAgICwgJHA9JGxibFF1ZXN0aW9uTWV0YS5jaGlsZHJlbignLnptLW1ldGEtcGFuZWwnKS5jaGlsZHJlbignYS5tZXRhLWl0ZW06bGFzdCcpCiAgICAgICAgICAsICRtPSQoJy56dS1hbnN3ZXItZm9ybS1kaXNhYmxlZC13cmFwOnZpc2libGUgPiBhJywnI3poLXF1ZXN0aW9uLWFuc3dlci1mb3JtLXdyYXAnKQogICAgICAgIDsKICAgICAgICBpZigkbS5sZW5ndGgpewogICAgICAgICAgICBzLnB1c2goJG0uYXR0cignaHJlZicpKTsKICAgICAgICAgICAgJGEudGV4dCgn5oiR55qE5Zue562UJyk7CiAgICAgICAgfWVsc2UgaWYoJHJlcGx5Lmxlbmd0aCl7CiAgICAgICAgICAgIHZhciBpZD0nbmV3X2Fuc3dlcicKICAgICAgICAgICAgICAsICRiPSQoJzxhPicse25hbWU6aWR9KS5iZWZvcmUoJHJlcGx5LmNoaWxkcmVuKCkuZmlyc3QoKSk7CiAgICAgICAgICAgIHMucHVzaCgnI2RyYWZ0Jyk7CiAgICAgICAgICAgICRhLnRleHQoJ+aIkeimgeWbnuetlCcpOwogICAgICAgIH0KICAgICAgICAkYy5pbnNlcnRBZnRlcigkcCk7CiAgICAgICAgJGEuYXR0cignaHJlZicscy5qb2luKCcnKSkuYXR0cigndGFyZ2V0JywnX3NlbGYnKQogICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJGMpOwogICAgfQogICAgaWYgKGl6aEF1dGhvckxpc3QmJgogICAgICAgIG51bUFuc3dlcnNDb3VudFRvdGFsPjEwMCYmCiAgICAgICAgY29uZmlybSgn6L+Z5Liq6Zeu6aKY55qE5Zue562U5pWw6L6D5aSa77yM5piv5ZCm5pqC5pe25YWz6Zet44CMaVpoaWh1IOWbnuetlOebruW9leOAje+8nycpKXsKICAgICAgICAvLyQoJyNpemhDU1NfY29tbWVudCcpLnJlbW92ZSgpOwogICAgICAgIC8vcmV0dXJuOwogICAgICAgIGl6aEF1dGhvckxpc3Q9ZmFsc2U7CiAgICAgICAgJGJvZHkuYXR0cignaXpoQXV0aG9yTGlzdCcsJzAnKTsKICAgIH0KICAgIC8vY29uc29sZS5sb2coKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7CiAgICAKICAgIHZhciAkbGJsQW5zd2Vyc0NvdW50PSQoJyN6aC1xdWVzdGlvbi1hbnN3ZXItbnVtJykvL2Fuc3dlcnNfY291bnQKICAgICAgLCAkdW5vPSQoJzxkaXY+Jyx7J2NsYXNzJzondW5vJyxzdHlsZTonZmxvYXQ6bGVmdCd9KS8vaXpoX0F1dGhvcnNMaXN0CiAgICAgICwgJHBwVD0kKCc8c3Bhbj4nLHsnY2xhc3MnOidtZVQnLHN0eWxlOidkaXNwbGF5Om5vbmUnfSkvL2l6aF9BdXRob3JzTGlzdF9Ub3BTZWxmSW5kaWNhdG9yCiAgICAgICwgJGZybT0kKCc8ZGl2PicseydjbGFzcyc6J2ZyYW1lJ30pLy9pemhfQXV0aG9yc0xpc3RfZnJhbWUKICAgICAgLCAkcHBCPSQoJzxzcGFuPicseydjbGFzcyc6J21lQicsc3R5bGU6J2Rpc3BsYXk6bm9uZSd9KS8vaXpoX0F1dGhvcnNMaXN0X0JvdHRvbVNlbGZJbmRpY2F0b3IKICAgICAgLCAkcHA9JCgnPHVsPicseydjbGFzcyc6J3BwJ30pLy9pemhfQXV0aG9yc0xpc3RfVUwKICAgICAgLCAkcHBJPSQoJzxkaXY+JykKICAgIAogICAgOwoKICAgIHdpbmRvdy5pWmhpaHUuJHVub0Fuc3dlcnMgPSAkdW5vCi8qCiAgICAvL+etlOahiOaMieaXtumXtOaOkuW6jwogICAgaWYodXRpbHMuZ2V0Q2ZnKCdhbnN3ZXJfb3JkZXJCeVRpbWUnKSl7CiAgICAgIGNsaWVudC5jbGljaygnLnpoLWFuc3dlcnMtZmlsdGVyLXBvcHVwIGRpdltkYXRhLWtleT1hZGRlZF90aW1lXScpOwogICAgfQoqLyAgICAKICAgIHZhciAkcXVlc3Rpb25XcmFwPSQoJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAnKTsKICAgICRxdWVzdGlvbldyYXAuY2hpbGRyZW4oJy5wYW5lbC1jb250YWluZXInKS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICB3aW5kb3cuaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJChldmVudC50YXJnZXQpKTsKICAgIH0pOwogICAgaWYod2luZG93LmlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgLy8kcXVlc3Rpb25XcmFwLmNoaWxkcmVuKCcubWV0YS1pdGVtW25hbWU9YWRkY29tbWVudF0nKS5wcmVwZW5kVG8oJHF1ZXN0aW9uV3JhcCk7CiAgICAgICAgd2luZG93LmlaaGlodS5Db21tZW50LnByb2Nlc3NDb21tZW50QnV0dG9uKCRxdWVzdGlvbldyYXApOwogICAgICAgIGlmKCEkKCcjaXpoX1F1ZXN0aW9uU2hhZG93JykubGVuZ3RoKXsKICAgICAgICAgICAgJCgnPGRpdj4nLHsnY2xhc3MnOidpemhfYm94U2hhZG93JyxpZDonaXpoX1F1ZXN0aW9uU2hhZG93J30pLmNzcyh7CiAgICAgICAgICAgICAgICAnei1pbmRleCc6ICctMScKICAgICAgICAgICAgICAsICdwb3NpdGlvbic6ICdyZWxhdGl2ZScKICAgICAgICAgICAgICAsICd0b3AnOiAtMjUKICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6IC0zMgogICAgICAgICAgICB9KS5wcmVwZW5kVG8oJ2JvZHk+Lnp1LW1haW46Zmlyc3QnKS5oaWRlKCk7CiAgICAgICAgfSAgIAogICAgfQoKICAgIC8vcHJvY2VzcyBlYWNoIGFuc3dlcgogICAgaWYoJGxpc3RBbnN3ZXJzJiYkbGlzdEFuc3dlcnMubGVuZ3RoKXsKICAgICAgICBpZihpemhBdXRob3JMaXN0KXsKICAgICAgICAgICAgJHVuby5hcHBlbmRUbygkYmFubmVyKTsKICAgICAgICAgICAgJHBwVC5hcHBlbmRUbygkdW5vKTsKICAgICAgICAgICAgJGZybS5hcHBlbmRUbygkdW5vKTsKICAgICAgICAgICAgJHBwLmFwcGVuZFRvKCRmcm0pOwogICAgICAgICAgICAkcHBCLmFwcGVuZFRvKCR1bm8pOwogICAgICAgICAgICAvL3Vuby5hcHBlbmRDaGlsZChwcEkpOwogICAgICAgICAgICAkdW5vLiRlbmRPZkxhc3RBPSQoJzxsaT4nKS5hZGRDbGFzcygnZW5kT2ZMYXN0QScpLmFwcGVuZFRvKCRwcCkKICAgICAgICB9CiAgICAgICAgJGxpc3RBbnN3ZXJzLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgd2luZG93LmlaaGlodS5BbnN3ZXIucHJvY2Vzc0Fuc3dlcigkKGUpLCRwcAogICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICwgaXpoQXV0aG9yTGlzdCk7CiAgICAgICAgfSk7CiAgICAgICAgaWYoJHJlcGx5LmNoaWxkcmVuKCcuenUtYW5zd2VyLWZvcm0tZGlzYWJsZWQtd3JhcCcpLmlzKCc6aGlkZGVuJykpewogICAgICAgICAgICB2YXIgJHBwbGE9JCgnPGE+Jyx7aHJlZjonI2RyYWZ0Jyx0YXJnZXQ6J19zZWxmJ30pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nLCB7ICdjbGFzcyc6ICdwbHVzJyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JykpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsgJ2NsYXNzJzogJ25hbWUgZnVuYycgfSkudGV4dCgnLW5ldy0nKSkKICAgICAgICAgICAgICAsICRwcGw9JCgnPGxpPicpCiAgICAgICAgICAgICAgICAuYXBwZW5kKCRwcGxhKQogICAgICAgICAgICAgICAgLmFwcGVuZFRvKCRwcCkKICAgICAgICAgICAgOwogICAgICAgIH0KICAgIH0KICAgIHZhciByZXNpemVBdXRob3JMaXN0PWZ1bmN0aW9uKCRmKXsKICAgICAgICAvLyBBZGp1c3QgQXV0aG9yTGlzdCdzIHNpemUgYW5kIGxvY2F0ZSBpdHMgcG9zaXRpb24KICAgICAgICBpZighJGZ8fCEkZi5sZW5ndGgpcmV0dXJuOwogICAgICAgIHZhciBmcm09JGYuZ2V0KDApOwogICAgICAgIHZhciB3aWR0aD13aW5kb3cuaVpoaWh1LkFuc3dlci5wcFdpZHRoCiAgICAgICAgICAsIGhlaWdodD0kd2luLmhlaWdodCgpLSRtYWluLm9mZnNldCgpLnRvcC0zLSRmLnBvc2l0aW9uKCkudG9wOwogICAgICAgIGlmKGZybS5zY3JvbGxIZWlnaHQ+aGVpZ2h0KXsKICAgICAgICAgICAgJGYuaGVpZ2h0KGhlaWdodCk7CiAgICAgICAgICAgIHdpZHRoKz0yMDsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJGYuaGVpZ2h0KCcnKTsKICAgICAgICB9CiAgICAgICAgJGYud2lkdGgod2lkdGgpOwogICAgfTsKICAgIGlmKGlzTmFOKG51bUNvbGxhcHNlZENvdW50KSludW1Db2xsYXBzZWRDb3VudD0wOwogICAgaWYoJGxpc3RBbnN3ZXJzLmxlbmd0aHx8bnVtQ29sbGFwc2VkQ291bnQpewogICAgICAgIGlmKGl6aEF1dGhvckxpc3QpewogICAgICAgICAgICAkdW5vLmNzcyh7CiAgICAgICAgICAgICAgICAnZmxvYXQnOidub25lJwogICAgICAgICAgICAgICwgJ2xlZnQnOjktJHVuby53aWR0aCgpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZighJGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmxlbmd0aCYmIW51bUNvbGxhcHNlZENvdW50KQogICAgICAgICAgICAgICAgcmVzaXplQXV0aG9yTGlzdCgkZnJtKTsKICAgICAgICAgICAgJCgnPGRpdj4nLHsnY2xhc3MnOidtb2RhbC1kaWFsb2ctdGl0bGUnfSkuY3NzKHsKICAgICAgICAgICAgICAgICAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOjAKICAgICAgICAgICAgfSkuaW5zZXJ0QmVmb3JlKCRwcFQpOwogICAgICAgICAgICAkdW5vLm1vdXNlb3ZlcihmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmVzaXplQXV0aG9yTGlzdCgkKCcuZnJhbWUnLHRoaXMpKTsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCdsZWZ0JywnMCcpOwogICAgICAgICAgICB9KS5tb3VzZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ2xlZnQnLDktJCh0aGlzKS53aWR0aCgpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmKHdpbmRvdy5pWmhpaHUuQW5zd2VyLl9lKXsKICAgICAgICAgICAgICAgICR1bm8uY2hpbGRyZW4oJy5tZVQnKS5jc3MoJ2Rpc3BsYXknLDA+d2luZG93LmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0VG9wLSRmcm0uc2Nyb2xsVG9wKCk/Jyc6J25vbmUnKTsKICAgICAgICAgICAgICAgICR1bm8uY2hpbGRyZW4oJy5tZUInKS5jc3MoJ2Rpc3BsYXknLCRmcm0uaGVpZ2h0KCk8d2luZG93LmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0VG9wLSRmcm0uc2Nyb2xsVG9wKCkrd2luZG93LmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0SGVpZ2h0PycnOidub25lJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoJGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmxlbmd0aCl7CiAgICAgICAgICAgIGlmKG51bUNvbGxhcHNlZENvdW50PjApewogICAgICAgICAgICAgICAgJCgnI3poLXF1ZXN0aW9uLWNvbGxhcHNlZC13cmFwJykuc2hvdygpLmJpbmQoJ0RPTU5vZGVJbnNlcnRlZCcsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgIHZhciAkYT0kKGV2ZW50LnRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgaWYoJGEuaXMoJy56bS1pdGVtLWFuc3dlcicpKXsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmlaaGlodS5BbnN3ZXIucHJvY2Vzc0Fuc3dlcigkYSwkcHAKICAgICAgICAgICAgICAgICAgICAgICAgICAsICRib2R5LmF0dHIoJ2l6aEF1dGhvclJlYXInKT09JzEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkYm9keS5hdHRyKCdpemhBdXRob3JMaXN0Jyk9PScxJwogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAkKCcuem0taXRlbS1hbnN3ZXJbaXpoX3Byb2Nlc3NlZD0xXScsJyN6aC1xdWVzdGlvbi1jb2xsYXBzZWQtd3JhcCcpLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoY291bnQ9PW51bUNvbGxhcHNlZENvdW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZUF1dGhvckxpc3QoJGZybSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkYnRuQ29sbGFwc2VkU3dpdGNoZXJbMF0uY2xpY2soKTsKICAgICAgICB9CiAgICB9CgogICAgJCgnI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwJykuYmluZCgnRE9NTm9kZUluc2VydGVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgdmFyICRuYT0kKGV2ZW50LnRhcmdldCkuZmlsdGVyKCcuem0taXRlbS1hbnN3ZXInKTsKICAgICAgICBpZigkbmEubGVuZ3RoKXsKICAgICAgICAgICAgd2luZG93LmlaaGlodS5BbnN3ZXIucHJvY2Vzc0Fuc3dlcigkbmEsJHBwCiAgICAgICAgICAgICAgLCAkYm9keS5hdHRyKCdpemhBdXRob3JSZWFyJyk9PScxJwogICAgICAgICAgICAgICwgJGJvZHkuYXR0cignaXpoQXV0aG9yTGlzdCcpPT0nMScKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9KTsKICAgIC8vY29uc29sZS5sb2coKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7CgogICAgdmFyICRjbT0kKCcuem0tY29tbWVudC1ib3gnLCRxdWVzdGlvbldyYXApOwogICAgaWYoJGNtLmxlbmd0aCAmJiAkY20uaXMoJzp2aXNpYmxlJykpewogICAgICAgIHZhciBmb2N1c05hbWUgPSBpWmhpaHUuQ29tbWVudC5zY3JvbGxGb2N1c0NvbW1lbnRPblBhZ2VMb2FkKCRjbSk7CiAgICAKICAgICAgICBpWmhpaHUuQ29tbWVudC5tZXRhU2Nyb2xsVG9WaWV3Qm90dG9tKCRjbS5jbG9zZXN0KCcuem0taXRlbS1tZXRhJyksZnVuY3Rpb24oKXsKICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJGNtLCBmb2N1c05hbWUpOwogICAgICAgIH0pOwogICAgfQogIH0KCi8qKgogKiDphY3nva7nlYzpnaIKICovCgogICAgdmFyICRidG5TZXR0aW5ncyA9ICQoJzxsaT4nKQogICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicsIHsgaHJlZjogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnLCB0YWJpbmRleDogJy0xJyB9KQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uIHpnLWljb24tZGQtc2V0dGluZ3MgaXpoaWh1LXNldHRpbmdzJyB9KSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2laaGlodScpCiAgICAgICAgICAgICkuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciAkc2V0dGluZ3MgPSAkKCcjaXpoLWRsZy1zZXR0aW5ncycpCiAgICAgICAgICAgICAgICAkKCcubW9kYWwtZGlhbG9nLWJnJykuc2hvdygpCiAgICAgICAgICAgICAgICAkKCcuaXpoLW9wdGlvbicsICcjaXpoLWRsZy1zZXR0aW5ncycpLmVhY2goZnVuY3Rpb24oaSwgZSl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGUuZ2V0QXR0cmlidXRlKCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICwgdmFsdWUgPSB1dGlscy5nZXRDZmcoa2V5KQogICAgICAgICAgICAgICAgICAgICAgLCAkZSA9ICQoZSkKICAgICAgICAgICAgICAgICAgICBpZiAoJGUuaXMoJ2lucHV0OmNoZWNrYm94JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGUpLmlDaGVjaygnY2hlY2snKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGUuaXMoJ3NlbGVjdCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUudmFsdWUgPSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAkc2V0dGluZ3MuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnei1pbmRleCc6Jzk5JwogICAgICAgICAgICAgICAgICAsICdwb3NpdGlvbic6J2ZpeGVkJwogICAgICAgICAgICAgICAgICAsICd0b3AnOiAoJHdpbi5oZWlnaHQoKSAtICRzZXR0aW5ncy5oZWlnaHQoKSkgLyAyCiAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOiAoJHdpbi53aWR0aCgpIC0gJHNldHRpbmdzLndpZHRoKCkpIC8gMgogICAgICAgICAgICAgICAgfSkuZmFkZUluKCdzbG93JykKICAgICAgICAgICAgfSkuaW5zZXJ0QmVmb3JlKCQoJ3VsI3RvcC1uYXYtcHJvZmlsZS1kcm9wZG93biBsaTpsYXN0JykpCiAgICAgICwgJGRsZ1NldHRpbmdzID0gJCgnPGRpdj4nLCB7IGlkOiAnaXpoLWRsZy1zZXR0aW5ncycsICdjbGFzcyc6ICdtb2RhbC1kaWFsb2cnLCB0YWJpbmRleDogJzAnLCBzdHlsZTogJ2Rpc3BsYXk6bm9uZTt3aWR0aDo2MDBweCd9KQogICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnbW9kYWwtZGlhbG9nLXRpdGxlIG1vZGFsLWRpYWxvZy10aXRsZS1kcmFnZ2FibGUnIH0pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy10aXRsZS10ZXh0JyB9KS50ZXh0KCfphY3nva7pgInpobknKSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctdGl0bGUtY2xvc2UnCiAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tb2RhbC1kaWFsb2ctYmcnKS5oaWRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2l6aC1kbGctc2V0dGluZ3MnKS5maXJzdCgpLmhpZGUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICApCiAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctY29udGVudCcgfSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnemctc2VjdGlvbicgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JywgeyAnY2xhc3MnOiAndF9zZXRfdGInLCBib3JkZXI6IDAsIGNlbGxzcGFjaW5nOiAwLCBjZWxscGFkZGluZzogNSwgd2lkdGg6ICcxMDAlJyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGhlYWQ+Jywge30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+Jywge30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgY29sc3BhbjogNiwgYWxpZ246ICdsZWZ0JyB9KS50ZXh0KCfvvIjmm7TmlLnlkI7orr7nva7lsIbnq4vliLvkv53lrZjvvIzkvYblj6rmnInlvZPpobXpnaLlho3mrKHmiZPlvIDml7bmiY3kvJrnlJ/mlYjvvIknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJLnByZXBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJJCgnPGI+JykudGV4dCgn5Yqf6IO95byA5YWzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRib2R5PicsIHt9KQovKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5Zyo6aaW6aG155u05o6l5rWP6KeI5bi45Y676K+d6aKYJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICIifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0SG9tZVRvcGljcyIsIG5hbWU6ICJIb21lVG9waWNzIiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBjb2xzcGFuOiA0LCBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+aUueWPmOe9kemhteagt+W8j+WkluingicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JCog6aaW6aG16ZqQ6JeP5aSn5aS05YOPPGJyLz4qIOe8qei/m+aKleelqOaMiemSru+8iOmXrumimC/lm57nrZTpobXvvIk8YnIvPiog5oyJ6ZKu5Zu+5qCH5Yqo55S7ICJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRIb21lTGF5b3V0IiwgbmFtZTogIkhvbWVMYXlvdXQiIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn6Ieq5Yqo5pS26LW35a+86Iiq5qCPJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICJzJHQkKiDmu5rliqjpobXpnaLoh7PkuIvmlrnml7bvvIzoh6rliqjmlLbotbfpobbpg6jlr7zoiKrmoI8gIn0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aW5wdXQ+JywgeyB0eXBlOiAiY2hlY2tib3giLCAnY2xhc3MnOiAiaXpoLW9wdGlvbiIsIGlkOiAiaVpoaWh1X3NldFRvcE5hdkF1dG9Gb2xkIiwgbmFtZTogIlRvcE5hdkF1dG9Gb2xkIiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBjb2xzcGFuOiA0LCBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+iwg+aVtOmmlumhteOAjOaWsOWKqOaAgeOAjeaPkOmGkuaMiemSricpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOaMquWIsCBUaW1lbGluZSDlj7PkuIrop5I8YnIvPuS4juagh+mimOOAjOacgOaWsOWKqOaAgeOAjeW5s+ihjCJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRIb21lTm90aSIsIG5hbWU6ICJIb21lTm90aSIgfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+Jywge30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgY29sc3BhbjogNCwgYWxpZ246ICdsZWZ0JyB9KS50ZXh0KCflvIDlkK/jgIzpppbpobXliIbmoI/jgI0nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpPicsIHsgJ2NsYXNzJzogJ2ljb24gaWNvbi1oZWxwJywgJ2RhdGEtdGlwJzogInMkdCTlsIbpppbpobXliqjmgIHliIbnsbvljZXni6zmmL7npLrvvJo8YnIvPumXrumimOOAgeWbnuetlOOAgeS4k+agjyJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRIb21lRmVlZHNDb2x1bW5zIiwgbmFtZTogIkhvbWVGZWVkc0NvbHVtbnMiIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5bCG55So5oi35L+h5oGv5oyq5Yiw5Zue562U5LiL5pa5JykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICIifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0QXV0aG9yUmVhciIsIG5hbWU6ICJBdXRob3JSZWFyIiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+W8gOWQr+OAjOWPs+iIt+ivhOiuuuOAjScpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOWcqOmhtemdouWPs+S+p+a1ruWKqOaYvuekuuaJk+W8gOeahOivhOiuuuWIl+ihqDxici8+5Zyo6aaW6aG144CB6Zeu6aKY44CB5Zue562U6aG15Lit55Sf5pWIIn0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aW5wdXQ+JywgeyB0eXBlOiAiY2hlY2tib3giLCAnY2xhc3MnOiAiaXpoLW9wdGlvbiIsIGlkOiAiaVpoaWh1X3NldFJpZ2h0Q29tbWVudCIsIG5hbWU6ICJTaG93Q29tbWVudCIgfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyB3aWR0aDogMSwgbm93cmFwOiAnbm93cmFwJywgYWxpZ246ICdsZWZ0JyB9KS50ZXh0KCflhbPpl63ml7boh6rliqjljbflsY/oh7Plr7nlupTmnaHnm64nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpPicsIHsgJ2NsYXNzJzogJ2ljb24gaWNvbi1oZWxwJywgJ2RhdGEtdGlwJzogInMkdCTku4Xlr7nlj7PoiLfor4TorrrnlJ/mlYgifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0UmlnaHRDb21tZW50X0F1dG9TY3JvbGxQYWdlV2hlbkNsb3NpbmciLCBuYW1lOiAiUmlnaHRDb21tZW50X0F1dG9TY3JvbGxQYWdlV2hlbkNsb3NpbmciIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5byA5ZCv44CM5b+r6YCf5bGP6JS944CN77yI5Yqg5YWl6buR5ZCN5Y2VL+WPlua2iOWFs+azqO+8ieWKn+iDvScpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOWcqOi1nuWQjOWIl+ihqOOAgeivhOiuuuWIl+ihqOS4reS9v+eUqCJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRRdWlja0Jsb2NrIiwgbmFtZTogIlF1aWNrQmxvY2siIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5byA5ZCv44CM5b+r6YCf5pS26JeP44CN6I+c5Y2VJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICJzJHQk6byg5qCH56e75LiK44CM5pS26JeP44CN5oyJ6ZKu5pe25pi+56S6In0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aW5wdXQ+JywgeyB0eXBlOiAiY2hlY2tib3giLCAnY2xhc3MnOiAiaXpoLW9wdGlvbiIsIGlkOiAiaVpoaWh1X3NldFF1aWNrRmF2byIsIG5hbWU6ICJRdWlja0Zhdm8iIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5byA5ZCv44CM5Zue562U55uu5b2V44CNJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICJzJHQk5Zyo6Zeu6aKY6aG16Z2i5bem5L6n5o6p6JeP77yM6byg5qCH56e75LiK5pe25bGV5byAPGJyLz7lubblnKjlj7PkvqfljbPml7bmmL7npLrlm57nrZTpooTop4gifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0QXV0aG9yTGlzdCIsIG5hbWU6ICJBdXRob3JMaXN0IiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBjb2xzcGFuOiA0LCBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+mAieaLqeOAjOWklumDqOaQnOe0ouW8leaTjuOAjScpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOS9oOaHgueahCJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNlbGVjdD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0U2VhcmNoRW5naW5lT3V0c2lkZSIsIG5hbWU6ICJTZWFyY2hFbmdpbmVPdXRzaWRlIn0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8b3B0aW9uPicsIHsgdmFsdWU6J2dvb2dsZScgfSkudGV4dCgnR29vZ2xlJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8b3B0aW9uPicsIHsgdmFsdWU6J2JhaWR1JyB9KS50ZXh0KCfnmb7luqYnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnemctbGVmdCcgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn5b2T5YmN54mI5pys77yaJyt2ZXJzaW9uKyfvvJsnKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCfmnIDlkI7mm7TmlrDvvJonK3VwZGF0ZURhdGUpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGJyPicpKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCfliLbkvZzvvJonKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicsIHsgJ2RhdGEtdGlwJzogInAkdCR1bm9nengiLCBocmVmOiAiL3Blb3BsZS91bm9nengiIH0pLnRleHQoJ0DpkqLnm4Xpg63lrZAnKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn77yMJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdkYXRhLXRpcCc6ICJwJHQkbGl1eW9uZzI1IiwgaHJlZjogIi9wZW9wbGUvbGl1eW9uZzI1IiB9KS50ZXh0KCdA5aSp54yqKOWImOWLhyknKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn77yMJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdkYXRhLXRpcCc6ICJwJHQkbHVveHIiLCBocmVmOiAiL3Blb3BsZS9sdW94ciIgfSkudGV4dCgnQHl1a2lyb2NrJykpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ++8jCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyAnZGF0YS10aXAnOiAicCR0JG1vcmxheSIsIGhyZWY6ICIvcGVvcGxlL21vcmxheSIgfSkudGV4dCgnQOWiqOejiicpKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxicj4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn5oSf6LCi77yaJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdkYXRhLXRpcCc6ICJwJHQkUGV0ZXJEZW5nIiwgaHJlZjogIi9wZW9wbGUvUGV0ZXJEZW5nIiB9KS50ZXh0KCdA6YKT5paH5Y2aJykpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ++8jCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyAnZGF0YS10aXAnOiAicCR0JGNha3ZmY3d6IiwgaHJlZjogIi9wZW9wbGUvY2FrdmZjd3oiIH0pLnRleHQoJ0DmsLTkupHpgLgnKSkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ3ptLWNvbW1hbmQnIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyBpZDogJ2l6aFJlZnJlc2gnLCAnY2xhc3MnOiAnemctYnRuLWJsdWUnLCBocmVmOiAnamF2YXNjcmlwdDp2b2lkKDApOycgfSkudGV4dCgn5Yi35paw572R6aG1JykpCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApLmFwcGVuZFRvKF9kb2MuYm9keSkuZHJhZ2dhYmxlKHtoYW5kbGU6ICcubW9kYWwtZGlhbG9nLXRpdGxlLWRyYWdnYWJsZSd9KQoKICAgICQoJy5pemgtb3B0aW9uJywgJGRsZ1NldHRpbmdzKS5lYWNoKGZ1bmN0aW9uKGksIGUpewogICAgICAgIHZhciBrZXkgPSBlLmdldEF0dHJpYnV0ZSgnbmFtZScpCiAgICAgICAgICAsICRjaGsgPSAkKGUpLmZpbHRlcignaW5wdXQ6Y2hlY2tib3gnKS5pQ2hlY2soewogICAgICAgICAgICAgICAgY2hlY2tib3hDbGFzczogJ2ljaGVja2JveF9zcXVhcmUtYmx1ZScKICAgICAgICAgICAgICAsIGluY3JlYXNlQXJlYTogJzIwJScgLy8gb3B0aW9uYWwKICAgICAgICAgICAgfSkuYmluZCgnaWZDaGFuZ2VkJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5jaGVja2VkCiAgICAgICAgICAgICAgICB1dGlscy5zZXRDZmcoa2V5LCB2YWx1ZSkKICAgICAgICAgICAgfSkKICAgICAgICAgICwgJHNlbCA9ICQoZSkuZmlsdGVyKCdzZWxlY3QnKS5iaW5kKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHV0aWxzLnNldENmZyhrZXksIHRoaXMudmFsdWUpCiAgICAgICAgICAgIH0pCiAgICB9KQogICAgJCgnI2l6aFJlZnJlc2gnKS5jbGljayhmdW5jdGlvbigpewogICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpCiAgICB9KQoKLyoKICog6K6+572uLeWxj+iUvQogKi8KaWYgKHBhZ2VJcy5TZXR0aW5nc0ZpbHRlcil7CiAgICB2YXIgYWxsPVtdCiAgICAgICwgJHNlY0Jsb2NrZWRVc2VycyA9ICQoJyNzZWN0aW9uLWJsb2NrZWQtdXNlcnMnKQogICAgICAsICRzZWNCbG9ja2VkVXNlcnNUaXRsZSA9ICRzZWNCbG9ja2VkVXNlcnMuY2hpbGRyZW4oJy5zZXR0aW5ncy1zZWN0aW9uLXRpdGxlOmZpcnN0JykuY2hpbGRyZW4oJ2gyOmZpcnN0JykKICAgICAgLCAkcG5sVW5CbG9ja2VkVXNlcnMgPSAkKCc8ZGl2PicpLmFwcGVuZFRvKCRzZWNCbG9ja2VkVXNlcnNUaXRsZSkuY3NzKHsKICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcKICAgICAgICB9KQogICAgICAsICRsYkZpbHRlckJsb2NrZWRVc2VycyA9ICQoJzxsYWJlbC8+JykuYXBwZW5kVG8oJHBubFVuQmxvY2tlZFVzZXJzKS5jc3MoewogICAgICAgICAgICBmbG9hdDogJ2xlZnQnCiAgICAgICAgfSkKICAgICAgLCAkdGJGaWx0ZXJCbG9ja2VkVXNlcnMgPSAkKCc8aW5wdXQvPicsIHsKICAgICAgICAgICAgJ2NsYXNzJzogJ3pnLWZvcm0tdGV4dC1pbnB1dCB6Zy1tcjE1JwogICAgICAgICAgLCBwbGFjZWhvbGRlcjogJ+eUqOaIt+WQjeaIluaYteensCcKICAgICAgICB9KS5hcHBlbmRUbygkcG5sVW5CbG9ja2VkVXNlcnMpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgdmFyIGt3PXRoaXMudmFsdWUKICAgICAgICAgICAgICAsIG49MAogICAgICAgICAgICAgICwgJGxpc3RCbG9ja2VkVXNlcnM9JHNlY0Jsb2NrZWRVc2Vycy5maW5kKCcuYmxvY2tlZC11c2VycyA+IC5pdGVtID4gLmJvZHkgPiBhJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgIHZhciAkYSA9ICQoZSkKICAgICAgICAgICAgICAgICAgICAgICwgaHJlZiA9IGUuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJycKICAgICAgICAgICAgICAgICAgICAgICwgdGV4dCA9IGUuaW5uZXJIVE1MCiAgICAgICAgICAgICAgICAgICAgICAsIG5vdE1hdGNoID0gKGhyZWYuaW5kZXhPZihrdykgPCAwICYmIHRleHQuaW5kZXhPZihrdykgPCAwKQogICAgICAgICAgICAgICAgICAgIGlmKCFub3RNYXRjaCl7CiAgICAgICAgICAgICAgICAgICAgICAgIG4rKwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkYS5jbG9zZXN0KCcuaXRlbScpLmNzcygnZGlzcGxheScsIG5vdE1hdGNoID8gJ25vbmUnIDogJycpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAkbGJGaWx0ZXJCbG9ja2VkVXNlcnMudGV4dChbbj9uKycgJzon5pegJywn5Lq65Yy56YWN77yaJ10uam9pbignJykpCiAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0JwogICAgICAgIH0pLnRyaWdnZXIoJ2tleXVwJykKICAgICAgLCBmdW5jVW5ibG9jaz1mdW5jdGlvbigpewogICAgICAgICAgICBpZihhbGwubGVuZ3RoPT0wKXtyZXR1cm59CiAgICAgICAgICAgIHZhciBlPWFsbC5zaGlmdCgpCiAgICAgICAgICAgICQucG9zdCgnL3NldHRpbmdzL3VuYmxvY2t1c2VyJywgJC5wYXJhbSh7CiAgICAgICAgICAgICAgICBfeHNyZjogJCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKQogICAgICAgICAgICAgICwgdWlkOiBlLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpCiAgICAgICAgICAgIH0pKS5kb25lKGZ1bmN0aW9uKHJlc3VsdCl7CiAgICAgICAgICAgICAgICAkKGUpLnJlbW92ZSgpCiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVzdWx0KXsKICAgICAgICAgICAgICAgIGFsbC5wdXNoKGUpCiAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbihyZXN1bHQpewogICAgICAgICAgICAgICAgJGxiRmlsdGVyQmxvY2tlZFVzZXJzLnRleHQoW2FsbC5sZW5ndGg/YWxsLmxlbmd0aCsnICc6J+aXoCcsJ+S6uuWMuemFje+8middLmpvaW4oJycpKQogICAgICAgICAgICAgICAgZnVuY1VuYmxvY2soKQogICAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgLCBoPSR0YkZpbHRlckJsb2NrZWRVc2Vycy5vdXRlckhlaWdodCgpCiAgICAgICwgJGJ0VW5CbG9ja2VkVXNlcnMgPSAkKCc8aW5wdXQvPicsIHsKICAgICAgICAgICAgJ2NsYXNzJzogJ3pnLWJ0biB6Zy1idG4tdW5mb2xsb3cnCiAgICAgICAgICAsIHR5cGU6ICdidXR0b24nCiAgICAgICAgICAsIHZhbHVlOiAn5Y+W5raI5bGP6JS9JwogICAgICAgIH0pLmFwcGVuZFRvKCRwbmxVbkJsb2NrZWRVc2Vycykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAkKCcjc2VjdGlvbi1ibG9ja2VkLXVzZXJzID4gLnNldHRpbmdzLWl0ZW0gPiAuc2V0dGluZ3MtaXRlbS1jb250ZW50ID4gLmJsb2NrZWQtdXNlcnMgPiAuaXRlbScpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgIHZhciAkZSA9ICQoZSkKICAgICAgICAgICAgICAgIGlmKCRlLmlzKCc6dmlzaWJsZScpKXsKICAgICAgICAgICAgICAgICAgICBhbGwucHVzaChlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgICBmdW5jVW5ibG9jaygpCiAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0JwogICAgICAgIH0pLmhlaWdodChoKQogICAgJGxiRmlsdGVyQmxvY2tlZFVzZXJzLmNzcygnbGluZS1oZWlnaHQnLCBoKydweCcpCn0KCnZhciBmaXJzdFJ1biA9IHBhcnNlSW50KHV0aWxzLmdldFZhbHVlKCdpemhfZnInLCcxJykpOwoKZnVuY3Rpb24gX0ZSc2hvdygpewppZihmaXJzdFJ1bj4wICYmIGRvY3VtZW50LmRvbWFpbj09J3poaWh1LmNvbScpewogICAgdmFyIHRib3hsZWZ0PTA7CiAgICB2YXIgYWNjaXRlbTE9ICQoJyN6aC10b3AtaW5uZXIgZGl2LnRvcC1uYXYtcHJvZmlsZSAuenUtdG9wLW5hdi11c2VyaW5mbycpOwogICAgaWYoYWNjaXRlbTEubGVuZ3RoPjApewogICAgICAgIHRib3hsZWZ0ID0gYWNjaXRlbTEub2Zmc2V0KCkubGVmdDsKICAgIH0KICAgIGlmKHRib3hsZWZ0PjApewogICAgICAgICQoJzxkaXY+JywgeyBpZDogJ2laaGlodV90Ym94JywgJ2NsYXNzJzogJ3RfZnJzaG93JyB9KS5hcHBlbmRUbygnYm9keS56aGknKS5oaWRlKCkKICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ3RfdHh0c2hvdyB0X3Rib3gnIH0pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCfmhJ/osKLkvb/nlKgnKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8Yj4nKS50ZXh0KCdpWmhpaHUnKSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGJyIC8+JykpCiAgICAgICAgICAgICAgICAuYXBwZW5kKCfmgqjlj6/pgJrov4foj5zljZXjgJBpWmhpaHXjgJHlr7nlip/og73ov5vooYzorr7nva4nKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YnIgLz4nKSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHM+JykKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpPicpKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApOwogICAgICAgICQoJyNpWmhpaHVfdGJveCcpLmNzcygnbGVmdCcsdGJveGxlZnQtMTAwKS5zaG93KCkubW91c2VlbnRlcihmdW5jdGlvbigpewogICAgICAgICAgICB1dGlscy5zZXRWYWx1ZSgnaXpoX2ZyJywnMCcpOwogICAgICAgICAgICAvL19NZW51KCk7CiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9Cn0KICAgIApzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICBfRlJzaG93KCk7Cn0sMTAwMCk7CgoKICBjb25zb2xlLmxvZygnaVpoaWh1ICcrdmVyc2lvbisnIHN0YXJ0ZWQuJyk7CiAgLy9jb25zb2xlLmxvZyh3aW5kb3cuaVpoaWh1KTsKICAvL2NvbnNvbGUubG9nKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpOwovL30pOwo="},{"name":"AC-baidu： 优化百度、搜狗、谷歌搜索结果之重定向去除+去广告+favicon","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["http://www.baidu.com/*","https://www.baidu.com/*","http://www.sogou.com/*","https://www.sogou.com/*","/^https?://\\w+.bing.com/.*/","/^https?\\:\\/\\/encrypted.google.[^\\/]+/","/^https?\\:\\/\\/www.google.[^\\/]+/","https://*.zhidao.baidu.com/*","https://zhidao.baidu.com/*","*.zhihu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":["www.baidu.com","tieba.baidu.com","bbs.feng.com","news.yesky.com","www.ting30.com","sanwen8.cn","265g.com","tgbus.com","25pp.com","*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970031},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E7%BB%95%E8%BF%87%E7%99%BE%E5%BA%A6%E9%87%8D%E5%AE%9A%E5%90%91%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5/code/AC-Baidu%EF%BC%9A%E7%BB%95%E8%BF%87%E7%99%BE%E5%BA%A6%E9%87%8D%E5%AE%9A%E5%90%91%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5.user.js","uuid":"0154b68a-7b61-47fd-a1cc-d8a9e790a9fc","source":""},{"name":"去百度搜索置顶推广 (ECMA6)","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*www.baidu.com*","*zhidao.baidu.com/search*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970034},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/10019-%E5%8E%BB%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BD%AE%E9%A1%B6%E6%8E%A8%E5%B9%BF-ecma6/code/%E5%8E%BB%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BD%AE%E9%A1%B6%E6%8E%A8%E5%B9%BF%20(ECMA6).user.js","uuid":"04fcae1e-06d5-4d59-adcb-c10136e7649b","source":""},{"name":"百度云插件+APIKey","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/(pan|yun)\\.baidu\\.com.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970037},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey/code/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6+APIKey.user.js","uuid":"7963ccef-66f9-42b1-9a24-051c91bf1363","source":""},{"name":"百度网盘助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://yun.baidu.com","http://yun.baidu.com/#*","http://pan.baidu.com/share/manage*","http://pan.baidu.com/disk/recyclebin*","http://yun.baidu.com/pcloud/album/info*"],"orig_includes":["http://pan.baidu.com/*","http://yun.baidu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970040},"enabled":false,"position":6,"file_url":"https://greasyfork.org/scripts/16584-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B.user.js","uuid":"236df2cb-8862-465a-b20c-ba8c72e32de9","source":""},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":true,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://localhost.cuwcl4c/*","http://jixunmoe.github.io/*","http://123564.com/*","http://m.123564.com/*","http://5xfile.com/*","http://www.5xfile.com/*","http://yun.baidu.com/*","http://pan.baidu.com/*","http://howfile.com/*","http://*.howfile.com/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://namipan.cc/*","http://*.namipan.cc/*","http://10pan.cc/*","http://*.10pan.cc/*","http://66yp.cc/*","http://*.66yp.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://hiyp.cc/*","http://*.hiyp.cc/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://webhd.xuite.net/*","http://sync.hamicloud.net/*","http://www.yimuhe.com/*","http://douban.fm/*","https://douban.fm/*","http://moe.fm/*","http://music.163.com/*","https://music.163.com/*","http://www.1ting.com/*","http://www.23356.com/*","http://www.app-echo.com/*","http://web.kugou.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"CUWCL4C":"s{\"version\":1,\"bDiaplayLog\":true,\"bUseCustomRules\":false,\"dAria_auth\":0,\"dAria_port\":6800,\"dUriType\":0,\"sAria_dir\":\"D:\\\\Download\\\\\",\"sAria_host\":\"127.0.0.1\",\"sAria_pass\":\"\",\"sAria_user\":\"\",\"sCustomRule\":\"\"}"},"ts":1503129970044},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"2ccb66a7-336a-448e-9c55-34179839c35d","source":""},{"name":"Popup Search","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*/test/*.html*","http://acid3.acidtests.org/*","http://www.acfun.tv/*","http://www.sf-express.com/*"],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["youdao.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"Baidu_st":"n1","Bing_st":"n1","Copy_st":"n0","Ctrl_st":"n0","Dis_st":"n1","Fade_st":"n1","Focus_st":"n1","Google_st":"n1","Iframe_st":"n0","Open_st":"n0","Site_st":"n1","Tab_st":"n1","UpdateAlert":"n6"},"ts":1503129970048},"enabled":false,"position":8,"file_url":"https://greasyfork.org/scripts/340-popup-search/code/Popup%20Search.user.js","uuid":"30c9e9e5-0d00-4814-8156-fe7fe0ab9f15","source":""},{"name":"Super_preloaderPlus_one","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http*://mail.google.com/*","http*://maps.google*","http*://www.google.com/reader*","http*://www.google.com/calendar*","https://docs.google.com/*","http*://app.yinxiang.com/*","http*://www.dropbox.com/*","http*://www.toodledo.com/*","http://cloud.feedly.com/*","http://weibo.com/*","http://w.qq.com/*","http://web2.qq.com/*","http://openapi.qzone.qq.com/*","http://*cloud.vip.xunlei.com/*","http*://www.wumii.com/*","http://pan.baidu.com/*","http://yun.baidu.com/*","http://www.cnbeta.com/*","http://www.youku.com/","http://v.youku.com/*","http://www.iqiyi.com/*","http://www.duokan.com/reader/*"],"orig_includes":["http*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["tripadvisor.cn"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970053},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/10433-super-preloaderplus-one/code/Super_preloaderPlus_one.user.js","uuid":"e8fe4eac-7cc7-4787-bea7-4e107072dca4","source":""},{"name":"gwdang","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*.jd.com/*","https://*.jd.com/*","http://*.jd.hk/*","https://*.jd.hk/*","http://*.taobao.com/*","https://*.taobao.com/*","http://*.tmall.com/*","https://*.tmall.com/*","https://*.tmall.hk/*","http://*.yixun.com/*","http://*.51buy.com/*","http://*.yhd.com/*","http://*.suning.com/*","https://*.suning.com/*","http://*.dangdang.com/*","http://*.gome.com.cn/*","http://*.newegg.cn/*","http://*.paipai.com/*","https://*.amazon.com/*","https://*.amazon.cn/*","https://*.amazon.*/*","http://www.kjt.com/*","http://www.kaola.com/*","http://www.tcl.com/*","http://shop.hisense.com/*","http://*.oppo.com/*","http://shop.vivo.com.cn/*","http://www.ebay.com/*","http://t.dianping.com/*","http://*.nuomi.com/*","http://*.meituan.com/*","https://yao.95095.com/*","http://*.feiniu.com/*","http://*.meilishuo.com/*","http://*.mogujie.com/*","http://shop.coolpad.cn/*","http://*.sephora.cn/*","http://*.yesmywine.com/*","http://*.yiguo.com/*","http://*.wanggou.com/*","http://mall.jia.com/*","http://weigou.baidu.com/*","http://*.mi.com/*","http://shop.letv.com/*","http://*.handu.com/*","http://*.taoshu.com/*","http://*.1688.com/*","http://*.muyingzhijia.com/*","http://*.vmall.com/*","http://*.xiji.com/*","http://*.xijie.com/*","http://www.yougou.com/*","http://www.okbuy.com/*","http://*.001town.com/*","http://*.01goo.com/*","http://*.03l.cn/*","http://*.133china.com/*","http://*.139shop.com/*","http://yxp.163.com/*","http://*.168dg.com/*","http://*.186mall.com/*","http://*.18to82.com/*","http://*.1j.cn/*","http://*.22shop.com/*","http://*.24dq.com/*","http://*.24quan.com/*","http://*.258sd.com/*","http://*.2688.com/*","http://*.360buy.com/*","http://*.360hqb.com/*","http://*.360kxr.com/*","http://*.360mart.com/*","http://*.365goba.com/*","http://*.38hzt.com/*","http://*.39ty.com/*","http://*.4inlook.com/*","http://*.5188bag.com/*","http://*.51buy.com/*","http://51buy.com/","http://*.51dg.com/*","http://*.51eng.com/*","http://*.51sheyuan.com/*","http://*.51youpin.com/*","http://*.520eye.com/*","http://*.52shehua.com/*","http://*.5366.com/*","http://t.58.com/*","http://*.58hua.com/*","http://*.5lux.com/*","http://*.5yth.com/*","http://*.6919.com/*","http://*.6sbuy.com/*","http://*.77toy.com/*","http://*.7caihua.com/*","http://*.7cv.com/*","http://*.7sev.com/*","http://*.80ebus.com/*","http://*.8801.net/*","http://*.919it.com/*","http://*.929.cn/*","http://*.942radio.com/*","http://b2c.958shop.com/*","http://*.96128.com/*","http://*.99pto.com/*","http://*.99read.com/*","http://*.9dadao.com/*","http://*.9you.com/*","http://*.afffff.com/*","http://*.ai356.com/*","http://*.aibang.com/*","http://*.aidai.com/*","http://*.aiju.com/*","http://*.aim36.com/*","http://*.aimer.com.cn/*","http://*.aiyingshi.com/*","http://*.aizhigu.com.cn/*","http://*.amazon.cn/*","http://*.anni.com/*","http://*.apabi.com/*","http://*.augshow.com/*","http://*.autosup.com/*","http://*.baiyjk.com/*","http://*.bbesports.com/*","http://*.bookuu.com/*","http://*.bearbuy.com.cn/*","http://*.beautyplus.cn/*","http://*.beifabook.com/*","http://*.benq.com.cn/*","http://*.best1.com/*","http://*.biaoshang.hk/*","http://*.binggo.com/*","http://*.bloves.com/*","http://*.bobomobi.com/*","http://*.bookschina.com/*","http://*.boqii.com/*","http://*.buding.com/*","http://*.buy007.com/*","http://*.buy361.cn/*","http://*.buyfine.net/*","http://*.buynow.com.cn/*","http://*.caistv.com/*","http://*.caomeipai.com/*","http://*.car339.com.cn/*","http://*.car6688.com/*","http://*.carrefour.com.cn/*","http://*.cdream.com/*","http://*.ceetop.com/*","http://*.chashu.cn/*","http://*.chedangjia.com/*","http://*.chengdecs.com/*","http://*.china-gift.com/*","http://*.china-pub.com/*","http://emall.chinapay.com/*","http://*.chinayrs.com/*","http://*.chris-tina.com/*","http://*.clady.com/*","http://*.clinique.com.cn/*","http://*.cncard.com/*","http://*.cnfse.com/*","http://*.colebuy.com/*","http://*.conslive.com/*","http://*.coo8.com/*","http://*.cosize.com/*","http://*.cosme-de.com/*","http://*.ctrip.com/*","http://*.cw100.com/*","http://*.d1.com.cn/*","http://*.daisonghua.com/*","http://*.dangdang.com/*","http://*.daoyao.com/*","http://*.woyo.com/*","http://*.dazhe.cn/*","http://*.dazhongdianqi.com.cn/*","http://*.dianpu.com/*","http://*.didatuan.com/*","http://*.disiqu.cn/*","http://*.dixintong.com/*","http://*.doulaimai.com/*","http://*.dsgoo.com/*","http://*.dtoto.com/*","http://*.duhub.com/*","http://*.duoding.com/*","http://*.e-giordano.com/*","http://*.e-lining.com/*","http://*.e-my.com.cn/*","http://*.easy361.com/*","http://*.ebaimi.com/*","http://*.eboxbuy.com/*","http://*.ebtea.com/*","http://*.ecosme.cn/*","http://*.efeihu.com/*","http://*.ehaier.com/*","http://*.ejia.com/*","http://*.enet.com.cn/*","http://*.enjoyeye.com/*","http://*.epetbar.com/*","http://*.et5155.com/*","http://*.f508.com/*","http://*.fclub.cn/*","http://*.flowerby.com/*","http://*.flowercn.com/*","http://*.gap.cn/*","http://*.godida.com/*","http://*.gome.com.cn/*","http://*.goocctv.cn/*","http://*.goodjd.com/*","http://*.goodnourish.cn/*","http://*.gou3618.com/*","http://*.gouduo.com/*","http://*.gouwulian.com/*","http://*.gouxie.com/*","http://*.goyahome.com/*","http://*.guobuy.com/*","http://*.guopi.com/*","http://*.guuoo.com/*","http://*.hany.cn/*","http://*.happigo.com/*","http://*.hit168.com.cn/*","http://*.hitao.com/*","http://*.homeold.cn/*","http://*.homevv.com/*","http://*.hongkouzi.com/*","http://*.hopebook.net/*","http://*.huachu.com.cn/*","http://*.huimeifang.cn/*","http://*.hw2008.cn/*","http://*.icaifeng.com/*","http://*.icson.com/*","http://*.ideemall.com/*","http://*.ihush.com/*","http://*.iloveyou.com.cn/*","http://*.ilovezuan.com/*","http://*.imeelee.com/*","http://*.inoble.com.cn/*","http://*.inshion.com/*","http://*.ishop.cn/*","http://*.it88.com.cn/*","http://*.itzm.com/*","http://*.iyuyou.com/*","http://*.jiajiajk.com/*","http://*.jiaju.com/*","http://*.jiatx.com/*","http://*.jiayougo.com/*","http://*.jinbaidu.com/*","http://*.jmeishop.com/*","http://*.joyran.com/*","http://*.jsbcmall.com/*","http://*.jtlhome.com/*","http://*.jumei.com/*","http://*.junph.com/*","http://*.justonline.cn/*","http://*.jxdyf.com/*","http://*.k121.com/*","http://*.kadang.com/*","http://*.keede.com.cn/*","http://*.kela.cn/*","http://*.kuaishubao.com/*","http://*.kxtkx.com/*","http://*.ladypk.com/*","http://*.laeibelle.com/*","http://*.lafaso.com/*","http://*.lamiu.com/*","http://*.lancome.com.cn/*","http://*.lashou.com/*","http://*.ledaojia.com/*","http://*.leftlady.com/*","http://*.lenovo.com.cn/*","http://*.lens2005.com/*","http://*.letao.com/*","http://*.leyou.com/*","http://*.leyou.com.cn/*","http://*.lijiababy.com.cn/*","http://*.lijigou.com/*","http://*.likebuy.com/*","http://*.likeface.com/*","http://*.lingshi.com/*","http://*.liqunshop.com/*","http://*.liyi99.com/*","http://*.locknlock.com.cn/*","http://*.lovo.cn/*","http://*.luckigo.com/*","http://*.lusen.com/*","http://*.lyceem.com/*","http://*.m18.com/*","http://*.maichawang.com/*","http://*.maimaike.cn/*","http://*.mamabb.com/*","http://*.mamahao.cn/*","http://*.mangocity.com/*","http://*.manzuo.com/*","http://*.masamaso.com/*","http://*.maxfunbuy.com/*","http://*.maywon.com/*","http://*.mbaobao.com/*","http://*.meici.com/*","http://*.meilele.com/*","http://*.meilieasy.com/*","http://*.meituan.com/*","http://*.menglu.com/*","http://*.mengmai.com/*","http://*.minibuy.com/*","http://*.mmgw.cn/*","http://*.mmuses.com/*","http://*.mobi001.com/*","http://*.mokamall.com/*","http://*.momoyoyo.com/*","http://*.montrosechina.com/*","http://*.mooiee.com/*","http://*.moonbasa.com/*","http://*.motostore.com.cn/*","http://*.mpshow.com.cn/*","http://*.naccoo.com/*","http://*.naguu.com/*","http://*.nayao.com/*","http://*.newegg.com.cn/*","http://*.newgo5.com/*","http://*.nmlch.com/*","http://*.no5.com.cn/*","http://*.nokia.com.cn/*","http://*.nonmin88.com/*","http://*.obuy.cn/*","http://*.ofcard.com/*","http://*.ogage.cn/*","http://*.okbig.com/*","http://*.okbuy.com/*","http://*.okddy.com/*","http://*.okgolf.cn/*","http://*.olomo.com/*","http://*.olympus.com.cn/*","http://*.olymsports.com/*","http://*.ono.com.cn/*","http://*.orange3c.com/*","http://*.ouku.com/*","http://*.ourtasty.com/*","http://*.outice.com/*","http://*.oyego.com/*","http://*.paixie.net/*","http://*.palcent.com/*","http://*.ocj.com.cn/*","http://*.pb89.com/*","http://*.pcarm.com/*","http://*.petyoo.com/*","http://*.pgbao.com/*","http://*.piaoliang100.com/*","http://*.pirateship.com.cn/*","http://*.popyj.com/*","http://*.pupai.cn/*","http://*.purcotton.com/*","http://*.qianxun.com/*","http://*.qingci.com/*","http://*.qinqinbaby.com/*","http://*.qmango.com/*","http://*.qumei.com/*","http://*.quwan.com/*","http://*.qxian.com/*","http://*.rayi.cn/*","http://*.redbaby.com.cn/*","http://*.robam.com/*","http://*.salala.com.cn/*","http://*.samsclub.cn/*","http://*.sanfo.com/*","http://*.sapo.com.hk/*","http://*.sasa.com/*","http://*.sasacity.com/*","http://*.sawbuy.com/*","http://*.shanghai-sports.com/*","http://*.shentop.com/*","http://*.shishangqiyi.com/*","http://*.shjdq.com/*","http://*.shnn.com/*","http://*.shopin.net/*","http://*.shoubiao.com.cn/*","http://*.sigo.cn/*","http://mall.sina.com.cn/*","http://*.sinobuy.cn/*","http://*.skcoo.com/*","http://*.skomart.com/*","http://*.snyun.com/*","http://*.sonmai.cn/*","http://*.sport2008.com.cn/*","http://*.strawberrynet.com/*","http://*.suning.com/*","http://*.sz-esun.com/*","http://*.tao3c.com/*","http://item.taobao.com/*","http://*.taoxie.cn/*","http://*.the365.com/*","http://*.thinkshop.cn/*","http://*.tian10.com/*","http://*.tiantian.com/*","http://*.junph.com/*","http://*.tieyou.com/*","http://detail.tmall.com/*","http://*.togj.com/*","http://*.tooogooo.com/*","http://*.toy90.com/*","http://*.toys365.com/*","http://*.tpy100.com/*","http://*.tuniu.com/*","http://*.tztart.com/*","http://*.ugou.cn/*","http://*.uipmall.com/*","http://*.uiyi.cn/*","http://*.ushan.cn/*","http://*.uushouji.com/*","http://*.uya100.com/*","http://*.vaakav.com/*","http://*.vafox.com/*","http://*.vancl.com/*","http://*.vcotton.com/*","http://*.veedl.com/*","http://*.vegoos.com/*","http://*.venusveil.com/*","http://*.veryok.cn/*","http://*.viccol.com/*","http://*.vipshop.com/*","http://*.vipstore.com/*","http://*.vivian.cn/*","http://*.vjia.com/*","http://*.vnasi.com/*","http://*.voipyeah.com/*","http://*.w1.cn/*","http://*.waipowang.com/*","http://*.wangshanghai.com/*","http://*.wg365.com/*","http://*.winenice.com/*","http://*.wl.cn/*","http://*.womai.com/*","http://*.woye.com/*","http://*.wtaotao.com/*","http://*.wumeiwang.com/*","http://*.x-playboy.com/*","http://*.xiaokang.com/*","http://*.xiaozhuren.com/*","http://*.xinbaigo.com/*","http://*.xindou.com/*","http://*.xing800.com/*","http://*.xinhuabookstore.com/*","http://*.xiu.com/*","http://*.xtpo.cn/*","http://*.xzuan.com/*","http://*.yaja.com.cn/*","http://*.yaofang.cn/*","http://*.yasai.cn/*","http://*.yeecare.com/*","http://buy.yesky.com/*","http://*.yesmytea.com/*","http://*.yesmywine.com/*","http://*.yide.com/*","http://*.yifu.com/*","http://*.yihaodian.com/*","http://*.yintai.com/*","http://*.yinyuehe.net/*","http://*.yjcs.cn/*","http://*.yobrand.com/*","http://*.yoger.com.cn/*","http://*.yoho.cn/*","http://*.yongle.com.cn/*","http://*.yougou.com/*","http://*.youjk.com/*","http://*.yoyo18.com/*","http://*.yumaoclub.com/*","http://*.yyosso.com/*","http://*.zbird.com/*","http://*.zgcbb.com/*","http://*.zm7.cn/*","http://*.zopo.com/*","http://*.ibuying.com/*","http://*.33go.com.cn/*","http://*.xijie.com/*","http://*.nop.cn/*","http://*.asyp.com/*","http://*.sparty.cn/*","http://*.yizhedian.com/*","http://*.lvhezi.com/*","http://*.aishangbaobao.com/*","http://*.sportica.cn/*","http://*.jstsilk.cn/*","http://*.camel.com.cn/*","http://*.cottonpop.net/*","http://*.hyj.com/*","http://*.myxiequ.com/*","http://*.mfplaza.com/*","http://*.do93.com/*","http://*.3guo.cn/*","http://*.yaqifushi.com/*","http://*.trura.com/*","http://*.lbaobao.cn/*","http://*.xiutuan.com/*","http://*.usashopcn.com/*","http://*.ihaveu.com/*","http://*.vipku.com/*","http://*.vipchina.com/*","http://*.fanrry.cn/*","http://*.lesunvip.com/*","http://*.nala.com.cn/*","http://*.miqi.cn/*","http://*.meiribuy.com/*","http://*.pufung.com/*","http://*.xiaoye.com/*","http://*.hmeili.com/*","http://*.oulybuy.com/*","http://*.meifenzi.com/*","http://*.caomeishop.com/*","http://*.meifu360.com/*","http://*.bapashop.com/*","http://*.bulangxiongdi.com/*","http://*.gusubuy.com/*","http://*.opearl.net/*","http://*.ruci.cn/*","http://*.rax.cn/*","http://*.jiuxian.com/*","http://*.maimaicha.com/*","http://*.pinwine.cn/*","http://*.meiweidao.com/*","http://*.okliang.com/*","http://*.365wine.com/*","http://*.jjlg.com.cn/*","http://*.bianlishe.com/*","http://*.epkmall.com/*","http://*.gdcct.com/*","http://*.500ccc.com/*","http://*.me361.com/*","http://*.malatamobile.com/*","http://*.trioo.com/*","http://*.oohdear.com/*","http://*.yaahe.cn/*","http://*.easeeyes.com/*","http://*.dbox.cn/*","http://*.haotehui.com/*","http://*.m6go.com/*","http://*.bianyigo.com/*","http://*.okjee.com/*","http://*.mygeek.cn/*","http://*.tbb.cn/*","http://*.ushare360.com/*","http://*.gqt168.com/*","http://*.konjoy.com/*","http://*.aoliz.com/*","http://*.jianianle.com/*","http://*.akajia.com/*","http://*.miqi.com.cn/*","http://*.lehuimai.com/*","http://*.lifevc.com/*","http://*www.ouku.com/","http://nuomi.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{},"ts":1503129970058},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7.user.js","uuid":"f0519c00-9284-40f7-9364-366314936404","source":""},{"name":"Search By Image","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":["<all_urls>"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"setting":"s{\"site_list\":{\"Google\":\"https://www.google.com/searchbyimage?image_url={%s}\",\"Baidu\":\"https://image.baidu.com/n/pc_search?queryImageUrl={%s}&fm=result_camera&uptype=paste&drag=1\",\"Bing\":\"https://www.bing.com/images/searchbyimage?cbir=sbi&iss=sbi&imgurl={%s}\",\"TinEye\":\"https://www.tineye.com/search?url={%s}\",\"Yandex\":\"https://yandex.ru/images/search?rpt=imageview&img_url={%s}\",\"Sogou\":\"https://pic.sogou.com/ris?query={%s}&flag=1&drag=0\",\"360 ShiTu\":\"http://st.so.com/stu?imgurl={%s}\",\"SauceNAO\":\"https://saucenao.com/search.php?db=999&url={%s}\",\"IQDB\":\"https://iqdb.org/?url={%s}\",\"3D IQDB\":\"https://3d.iqdb.org/?url={%s}\",\"WhatAnime\":\"https://whatanime.ga/?url={%s}\"},\"site_option\":[\"Google\",\"Baidu\",\"Bing\",\"TinEye\",\"Yandex\",\"Sogou\",\"360 ShiTu\",\"SauceNAO\",\"IQDB\",\"3D IQDB\",\"WhatAnime\",\"WhatAnime\"],\"hot_key\":\"ctrlKey\",\"server_url\":\"//sbi.ccloli.com/img/upload.php\"}","timestamp":"n1503276839048","version":"n4"},"ts":1503276839048},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/2998-search-by-image/code/Search%20By%20Image.user.js","uuid":"f268c154-06b1-4454-bba6-358d5c6dfc8c","source":""},{"name":"AntiAdware","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http*://*180upload.com/*","http*://*4upfiles.com/*","http*://*get*.adobe.com/*flashplayer/*","http*://*get*.adobe.com/*reader/*","http*://*afterdawn.com/software/*","http*://*akafile.com/akago.php","http*://*chip.de/downloads/*","http*://*clicknupload.com/*","http*://*cloudyvideos.com/*","http*://*coolrom.com/*/*","http*://*clipconverter.cc/download/*","http*://*dailyuploads.net/*","http*://*datafilehost.com/d/*","http*://*davvas.com/*","http*://*d-h.st/*","http*://*download.cnet.com/*","http*://*telecharger.cnet.com/*","http*://*descargar.cnet.com/*","http*://*de.download.cnet.com/*","http*://*filefactory.com/file/*","http*://*filescdn.com/*","http*://*filehippo.com/*download*","http*://*freewarefiles.com/downloads_counter.php*","http*://*google.*/earth/download/ge/agree.html","http*://*hugefiles.net/*","http*://*hulkload.com/*","http*://*kingfiles.net/*","http*://*letitbit.net/download/*","http*://*loveroms.com/*","http*://*up.media1fire.com/*","http*://*mightyupload.com/*","http*://*mp3fil.*/get/*","http*://*mp3juices.to/*","http*://*mp3olimp.net/*","http*://*mp3olimpz.com/*","http*://*opensubtitles.org/*/subtitles/*","http*://*revclouds.com/*","http*://*romhustler.net/download/*","http*://*romhustler.net/rom/*","http*://*secureupload.eu/*","http*://*sendspace.com/file/*","http*://*sharebeast.com/*","http*://*shared.com/*","http*://*softm8.com*","http*://*.softonic.*","http*://*sourceforge.net/*","http*://*tusfiles.net/*","http*://*unlimitzone.com/*","http*://*uploading.com/*","http*://*uplod.ws/*","http*://*uploads.to/*","http*://*uptobox.com/*","http*://*userscdn.com/*","http*://*ziddu.com/downloadfile/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970064},"enabled":true,"position":12,"file_url":"https://greasyfork.org/scripts/4294-antiadware/code/AntiAdware.user.js","uuid":"8c989ef2-7d71-45e1-a1ca-30b4ca4c647f","source":""},{"name":"Download YouTube Videos as MP4","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://www.youtube.com/embed/*","https://www.youtube.com/embed/*"],"orig_includes":["http://www.youtube.com/*","https://www.youtube.com/*"],"orig_matches":["http://www.youtube.com/*","https://www.youtube.com/*","http://s.ytimg.com/yts/jsbin/*","https://s.ytimg.com/yts/jsbin/*","http://manifest.googlevideo.com/*","https://manifest.googlevideo.com/*","http://*.googlevideo.com/videoplayback*","https://*.googlevideo.com/videoplayback*","http://*.youtube.com/videoplayback*","https://*.youtube.com/videoplayback*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"download-youtube-dash-enabled":"s0","download-youtube-script-url":"shttps://www.youtube.com/yts/jsbin/player-vflZ_L_3c/zh_CN/base.js","download-youtube-signature-code":"s-1,0,24,-3,0,54,-1"},"ts":1503129970064},"enabled":true,"position":13,"file_url":"https://greasyfork.org/scripts/1317-download-youtube-videos-as-mp4/code/Download%20YouTube%20Videos%20as%20MP4.user.js","uuid":"6c9f2d40-9259-49ab-b82f-5faf36f2dec4","source":""},{"name":"verycd补全下载链接","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://www.verycd.com/topics/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970064},"enabled":true,"position":14,"file_url":"https://greasyfork.org/scripts/301-verycd%E8%A1%A5%E5%85%A8%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/code/verycd%E8%A1%A5%E5%85%A8%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5.user.js","uuid":"d933daed-5656-4deb-8487-45b5264974f9","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICAgIHZlcnljZEB5d3poYWlxaUBnbWFpbC5jb20KLy8gQG5hbWUgICAgICAgICAgIHZlcnljZOihpeWFqOS4i+i9vemTvuaOpQovLyBAdmVyc2lvbiAgICAgICAgMS41LjMKLy8gQGF1dGhvciAgICAgICAgIHl3emhhaXFpQGdtYWlsLmNvbQovLyBAbmFtZXNwYWNlICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3l3emhhaXFpCi8vIEBkZXNjcmlwdGlvbiAgICDlnKggdmVyeWNkIOmhtemdouebtOaOpeaYvuekuuS4i+i9vemTvuaOpe+8jOWPr+mAmui/h+WkmuS4quermeeCueiOt+WPlu+8jOmYsuatouWkseaViOOAggovLyBkb3dubG9hZFVSTCAgICAgaHR0cDovL3VzZXJzY3JpcHRzLm9yZy9zY3JpcHRzL3NvdXJjZS8xNTg3NjQudXNlci5qcwovLyB1cGRhdGVVUkwgICAgICAgaHR0cDovL3VzZXJzY3JpcHRzLm9yZy9zY3JpcHRzL3NvdXJjZS8xNTg3NjQubWV0YS5qcwoKLy8gQGhvbWVwYWdlVVJMICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zMDEvCi8vIEBpbmNsdWRlICAgICAgICBodHRwOi8vd3d3LnZlcnljZC5jb20vdG9waWNzLyoKLy8gQHJlcXVpcmUgICAgICAgIGh0dHA6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTEuOS4xLm1pbi5qcwovLyBAZ3JhbnQgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50ICAgICAgICAgIEdNX2FkZFN0eWxlCi8vID09L1VzZXJTY3JpcHQ9PQoKdmFyIGRlYnVnID0gZmFsc2U7Cgp2YXIgeGJ1ZyA9IGRlYnVnID8gY29uc29sZS5kZWJ1Zy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24oKXt9LAogICAgeGxvZyA9IGRlYnVnID8gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSA6IGZ1bmN0aW9uKCl7fTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOS4gOS6m+i+heWKqeWHveaVsCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiQuZXh0ZW5kKHsKICAgIHRtcGw6IGZ1bmN0aW9uKHRlbXBsYXRlLCBkYXRhKXsKICAgICAgICByZXR1cm4gZG9ULnRlbXBsYXRlKHRlbXBsYXRlKS5hcHBseShudWxsLFtkYXRhXSk7CiAgICB9Cn0pOwoKLyogTGF1cmEgRG9rdG9yb3ZhIGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QgKi8KKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbygpe3ZhciBhPXsiJiI6IiYjMzg7IiwiPCI6IiYjNjA7IiwiPiI6IiYjNjI7IiwnIic6IiYjMzQ7IiwiJyI6IiYjMzk7IiwiLyI6IiYjNDc7In0sYj0vJig/ISM/XHcrOyl8PHw+fCJ8J3xcLy9nO3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzP3RoaXMucmVwbGFjZShiLGZ1bmN0aW9uKGMpe3JldHVybiBhW2NdfHxjfSk6dGhpc319ZnVuY3Rpb24gcChhLGIsYyl7cmV0dXJuKHR5cGVvZiBiPT09InN0cmluZyI/YjpiLnRvU3RyaW5nKCkpLnJlcGxhY2UoYS5kZWZpbmV8fGksZnVuY3Rpb24obCxlLGYsZyl7aWYoZS5pbmRleE9mKCJkZWYuIik9PT0wKWU9ZS5zdWJzdHJpbmcoNCk7aWYoIShlIGluIGMpKWlmKGY9PT0iOiIpe2EuZGVmaW5lUGFyYW1zJiZnLnJlcGxhY2UoYS5kZWZpbmVQYXJhbXMsZnVuY3Rpb24obixoLGQpe2NbZV09e2FyZzpoLHRleHQ6ZH19KTtlIGluIGN8fChjW2VdPWcpfWVsc2UobmV3IEZ1bmN0aW9uKCJkZWYiLCJkZWZbJyIrCmUrIiddPSIrZykpKGMpO3JldHVybiIifSkucmVwbGFjZShhLnVzZXx8aSxmdW5jdGlvbihsLGUpe2lmKGEudXNlUGFyYW1zKWU9ZS5yZXBsYWNlKGEudXNlUGFyYW1zLGZ1bmN0aW9uKGcsbixoLGQpe2lmKGNbaF0mJmNbaF0uYXJnJiZkKXtnPShoKyI6IitkKS5yZXBsYWNlKC8nfFxcL2csIl8iKTtjLl9fZXhwPWMuX19leHB8fHt9O2MuX19leHBbZ109Y1toXS50ZXh0LnJlcGxhY2UoUmVnRXhwKCIoXnxbXlxcdyRdKSIrY1toXS5hcmcrIihbXlxcdyRdKSIsImciKSwiJDEiK2QrIiQyIik7cmV0dXJuIG4rImRlZi5fX2V4cFsnIitnKyInXSJ9fSk7dmFyIGY9KG5ldyBGdW5jdGlvbigiZGVmIiwicmV0dXJuICIrZSkpKGMpO3JldHVybiBmP3AoYSxmLGMpOmZ9KX1mdW5jdGlvbiBtKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcKCd8XFwpL2csIiQxIikucmVwbGFjZSgvW1xyXHRcbl0vZywiICIpfXZhciBqPXt2ZXJzaW9uOiIxLjAuMSIsdGVtcGxhdGVTZXR0aW5nczp7ZXZhbHVhdGU6L1x7XHsoW1xzXFNdKz8oXH0/KSspXH1cfS9nLAppbnRlcnBvbGF0ZTovXHtcez0oW1xzXFNdKz8pXH1cfS9nLGVuY29kZTovXHtceyEoW1xzXFNdKz8pXH1cfS9nLHVzZTovXHtceyMoW1xzXFNdKz8pXH1cfS9nLHVzZVBhcmFtczovKF58W15cdyRdKWRlZig/OlwufFxbW1wnXCJdKShbXHckXC5dKykoPzpbXCdcIl1cXSk/XHMqXDpccyooW1x3JFwuXSt8XCJbXlwiXStcInxcJ1teXCddK1wnfFx7W15cfV0rXH0pL2csZGVmaW5lOi9ce1x7IyNccyooW1x3XC4kXSspXHMqKFw6fD0pKFtcc1xTXSs/KSNcfVx9L2csZGVmaW5lUGFyYW1zOi9eXHMqKFtcdyRdKyk6KFtcc1xTXSspLyxjb25kaXRpb25hbDovXHtce1w/KFw/KT9ccyooW1xzXFNdKj8pXHMqXH1cfS9nLGl0ZXJhdGU6L1x7XHt+XHMqKD86XH1cfXwoW1xzXFNdKz8pXHMqXDpccyooW1x3JF0rKVxzKig/Olw6XHMqKFtcdyRdKykpP1xzKlx9XH0pL2csdmFybmFtZToiaXQiLHN0cmlwOnRydWUsYXBwZW5kOnRydWUsc2VsZmNvbnRhaW5lZDpmYWxzZX0sdGVtcGxhdGU6dW5kZWZpbmVkLApjb21waWxlOnVuZGVmaW5lZH0scTtpZih0eXBlb2YgbW9kdWxlIT09InVuZGVmaW5lZCImJm1vZHVsZS5leHBvcnRzKW1vZHVsZS5leHBvcnRzPWo7ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09ImZ1bmN0aW9uIiYmZGVmaW5lLmFtZClkZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gan0pO2Vsc2V7cT1mdW5jdGlvbigpe3JldHVybiB0aGlzfHwoMCxldmFsKSgidGhpcyIpfSgpO3EuZG9UPWp9U3RyaW5nLnByb3RvdHlwZS5lbmNvZGVIVE1MPW8oKTt2YXIgcj17YXBwZW5kOntzdGFydDoiJysoIixlbmQ6IikrJyIsZW5kZW5jb2RlOiJ8fCcnKS50b1N0cmluZygpLmVuY29kZUhUTUwoKSsnIn0sc3BsaXQ6e3N0YXJ0OiInO291dCs9KCIsZW5kOiIpO291dCs9JyIsZW5kZW5jb2RlOiJ8fCcnKS50b1N0cmluZygpLmVuY29kZUhUTUwoKTtvdXQrPScifX0saT0vJF4vO2oudGVtcGxhdGU9ZnVuY3Rpb24oYSxiLGMpe2I9Ynx8ai50ZW1wbGF0ZVNldHRpbmdzO3ZhciBsPWIuYXBwZW5kP3IuYXBwZW5kOgpyLnNwbGl0LGUsZj0wLGc7YT1iLnVzZXx8Yi5kZWZpbmU/cChiLGEsY3x8e30pOmE7YT0oInZhciBvdXQ9JyIrKGIuc3RyaXA/YS5yZXBsYWNlKC8oXnxccnxcbilcdCogK3wgK1x0KihccnxcbnwkKS9nLCIgIikucmVwbGFjZSgvXHJ8XG58XHR8XC9cKltcc1xTXSo/XCpcLy9nLCIiKTphKS5yZXBsYWNlKC8nfFxcL2csIlxcJCYiKS5yZXBsYWNlKGIuaW50ZXJwb2xhdGV8fGksZnVuY3Rpb24oaCxkKXtyZXR1cm4gbC5zdGFydCttKGQpK2wuZW5kfSkucmVwbGFjZShiLmVuY29kZXx8aSxmdW5jdGlvbihoLGQpe2U9dHJ1ZTtyZXR1cm4gbC5zdGFydCttKGQpK2wuZW5kZW5jb2RlfSkucmVwbGFjZShiLmNvbmRpdGlvbmFsfHxpLGZ1bmN0aW9uKGgsZCxrKXtyZXR1cm4gZD9rPyInO31lbHNlIGlmKCIrbShrKSsiKXtvdXQrPSciOiInO31lbHNle291dCs9JyI6az8iJztpZigiK20oaykrIil7b3V0Kz0nIjoiJzt9b3V0Kz0nIn0pLnJlcGxhY2UoYi5pdGVyYXRlfHxpLGZ1bmN0aW9uKGgsCmQsayxzKXtpZighZClyZXR1cm4iJzt9IH0gb3V0Kz0nIjtmKz0xO2c9c3x8ImkiK2Y7ZD1tKGQpO3JldHVybiInO3ZhciBhcnIiK2YrIj0iK2QrIjtpZihhcnIiK2YrIil7dmFyICIraysiLCIrZysiPS0xLGwiK2YrIj1hcnIiK2YrIi5sZW5ndGgtMTt3aGlsZSgiK2crIjxsIitmKyIpeyIraysiPWFyciIrZisiWyIrZysiKz0xXTtvdXQrPScifSkucmVwbGFjZShiLmV2YWx1YXRlfHxpLGZ1bmN0aW9uKGgsZCl7cmV0dXJuIic7IittKGQpKyJvdXQrPScifSkrIic7cmV0dXJuIG91dDsiKS5yZXBsYWNlKC9cbi9nLCJcXG4iKS5yZXBsYWNlKC9cdC9nLCJcXHQiKS5yZXBsYWNlKC9cci9nLCJcXHIiKS5yZXBsYWNlKC8oXHN8O3xcfXxefFx7KW91dFwrPScnOy9nLCIkMSIpLnJlcGxhY2UoL1wrJycvZywiIikucmVwbGFjZSgvKFxzfDt8XH18XnxceylvdXRcKz0nJ1wrL2csIiQxb3V0Kz0iKTtpZihlJiZiLnNlbGZjb250YWluZWQpYT0iU3RyaW5nLnByb3RvdHlwZS5lbmNvZGVIVE1MPSgiKwpvLnRvU3RyaW5nKCkrIigpKTsiK2E7dHJ5e3JldHVybiBuZXcgRnVuY3Rpb24oYi52YXJuYW1lLGEpfWNhdGNoKG4pe3R5cGVvZiBjb25zb2xlIT09InVuZGVmaW5lZCImJmNvbnNvbGUubG9nKCJDb3VsZCBub3QgY3JlYXRlIGEgdGVtcGxhdGUgZnVuY3Rpb246ICIrYSk7dGhyb3cgbjt9fTtqLmNvbXBpbGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gai50ZW1wbGF0ZShhLG51bGwsYil9fSkoKTsKCgpGdW5jdGlvbi5wcm90b3R5cGUuZ2V0TXVsdGlMaW5lID0gZnVuY3Rpb24oKSB7ICAvLyDlpJrooYxTdHJpbmcKICAgIHZhciBsaW5lcyA9IG5ldyBTdHJpbmcodGhpcyk7CiAgICBsaW5lcyA9IGxpbmVzLnN1YnN0cmluZyhsaW5lcy5pbmRleE9mKCIvKiIpICsgMywgbGluZXMubGFzdEluZGV4T2YoIiovIikpOwogICAgcmV0dXJuIGxpbmVzOwp9CgpmdW5jdGlvbiBnZXREb2ModXJsLCBjYWxsYmFjaywgZGF0YSl7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiBkYXRhID8gJ1BPU1QnIDogJ0dFVCcsCiAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAnVXNlci1hZ2VudCc6IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAgICAgICAnQ29udGVudC10eXBlJzogKGRhdGEpID8gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgOiBudWxsCiAgICAgICAgfSwKICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uKHJlc3BvbnNlRGV0YWlsKXsKICAgICAgICAgICAgdmFyIGRvYyA9ICcnOwogICAgICAgICAgICBpZihyZXNwb25zZURldGFpbC5zdGF0dXMgPT0gMjAwKXsKICAgICAgICAgICAgICAgIC8vIEZvciBGaXJlZm94LCBDaHJvbWUgMzArIFN1cHBvcnRlZAogICAgICAgICAgICAgICAgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZURldGFpbC5yZXNwb25zZVRleHQsICd0ZXh0L2h0bWwnKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoZG9jID09IHVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAgICAgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCIiKTsKICAgICAgICAgICAgICAgICAgICBkb2MucXVlcnlTZWxlY3RvcignaHRtbCcpLmlubmVySFRNTCA9IHJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYWxsYmFjayhkb2MpOwogICAgICAgIH0KICAgIH0pOwp9CgpmdW5jdGlvbiBieXRlMlN0cihpbnApIHsKICAgIHZhciBmID0gcGFyc2VGbG9hdChpbnApLAogICAgICAgIHVuaXQgPSBbJ+Wtl+iKgicsICdLQicsICdNQicsICdHQicsICdUQiddLAogICAgICAgIGZVbml0ID0gMDsKICAgIHdoaWxlIChmID4gMTEyNikgewogICAgICAgIGYgLz0gMTAyNDsKICAgICAgICBmVW5pdCArPSAxOwogICAgfQogICAgcmV0dXJuIGYudG9GaXhlZCgyKS50b1N0cmluZygpICsgJyAnICsgKHVuaXRbZlVuaXRdIHx8ICfmnKrnn6XljZXkvY0nKTsKfQoKZnVuY3Rpb24gZWQya0xpbmsoYUhyZWYpIHsKICAgIHZhciBlZDJrQXJyID0gYUhyZWYuc3Vic3RyKDAsIGFIcmVmLmxlbmd0aCAtIDIpLnN1YnN0cigxMykuc3BsaXQoJ3wnKTsKICAgIHJldHVybiAoewogICAgICAgIHVybDogYUhyZWYsCiAgICAgICAgbmFtZTogZGVjb2RlVVJJQ29tcG9uZW50KGVkMmtBcnJbMF0pLAogICAgICAgIHNpemU6IHBhcnNlSW50KGVkMmtBcnJbMV0pLAogICAgICAgIHNpenM6IGJ5dGUyU3RyKGVkMmtBcnJbMV0pLAogICAgICAgIGhhc2g6IGVkMmtBcnJbMl0sCiAgICAgICAgZXh0cjogZWQya0FyclszXQogICAgfSk7Cn0KCgp2YXIgVkVSWUNEID0gewogICAgcm9vdDogJCgnI2lwdGNvbUVEMksnKSwKICAgIHRpdGxlOiAkKCcjdG9waWNzdGl0bGUnKS50ZXh0KCksCiAgICBjdXJTaXRlUG9zOiAwLAoKICAgIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmKCF0aGlzLnJvb3QpewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdyb290IGlzIG51bGwnKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGVsZW0gPSB0aGlzLnJvb3QuZmluZCgnZGl2Jyk7CiAgICAgICAgaWYoZWxlbS50ZXh0KCkuc3Vic3RyKDAsIDMpID09ICfor6XlhoXlrrknKSB7CiAgICAgICAgICAgIGVsZW0udGV4dCgn5q2j5Zyo5Yqg6L2977yM6K+356iN5YCZ44CC44CC44CCJyk7CgogICAgICAgICAgICB0aGlzLmRpc3BsYXlfc2l0ZXMoKTsKCiAgICAgICAgICAgIHRoaXMuZ2V0KFZFUllDRC5jdXJTaXRlUG9zKTsKICAgICAgICB9CgogICAgfSwKCiAgICBkaXNwbGF5X3NpdGVzOiBmdW5jdGlvbigpewogICAgICAgIC8vIOaPkuWFpeWFtuS7luermeeCueeahOmTvuaOpQogICAgICAgICQoJyNpcHRjb21FRDJLJykuYmVmb3JlKAogICAgICAgICAgICAkLnRtcGwoVkVSWUNELnRwbF9zaXRlcywgVkVSWUNEKQogICAgICAgICAgICApOwogICAgfSwKCiAgICBkaXNwbGF5X2NvbnRlbnQ6IGZ1bmN0aW9uKGVkMmtzKXsKICAgICAgICAvLyDmt7vliqDliLAg572R6aG15LitCiAgICAgICAgJCgnI2lwdGNvbUVEMksnKS5odG1sKAogICAgICAgICAgICAkLnRtcGwoVkVSWUNELnRwbF9jb250ZW50LCBlZDJrcykKICAgICAgICAgICAgKTsKICAgICAgICAvLyDorqHnrpfmgLvnmoTlpKflsI8KICAgICAgICB1bnNhZmVXaW5kb3cuZW1fc2l6ZSgnRU00ZTc1OWY5NjczNTU0Jyk7CiAgICB9LAoKICAgIHRwbF9zaXRlczogZnVuY3Rpb24oKXsgIC8vIOaPkuWFpeeahOWktOmDqOaooeadvwogICAgICAgIC8qCiAgICAgICAgPHRhYmxlIGlkPSJvdGhlcl9saW5rcyI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIHt7IGZvcih2YXIgaSA9IDAsIGwgPSBpdC5zaXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspeyB9fQogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxhICBpZD0ie3s9aXQuc2l0ZXNbaV0uaWR9fSIgaHJlZj0ie3s9aXQuc2l0ZXNbaV0udXJsfX0iIHRhcmdldD0iX2JsYW5rIiBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjBweDsgdGV4dC1hbGlnbjogY2VudGVyOyB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyBwYWRkaW5nOiAycHggMTZweDsgY3Vyc29yOiBwb2ludGVyOyI+CiAgICAgICAgICAgICAgICAgICAg5pi+56S66LWE5rqQOiB7ez1pdC5zaXRlc1tpXS5uYW1lfX0KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAge3sgfSB9fQogICAgICAgICAgICA8dHI+CiAgICAgICAgPC90YWJsZT4KICAgICAgICAqLwogICAgfS5nZXRNdWx0aUxpbmUoKSwKCiAgICB0cGxfY29udGVudDogZnVuY3Rpb24oKXsgIC8vIOaPkuWFpeeahOWGheWuueaooeadvwogICAgICAgIC8qCiAgICAgICAgPGRpdiBjbGFzcz0iZW11bGV0b3AiPueUtemptOi1hOa6kDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbXVsZW1haW4iPgogICAgICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMSIgY2VsbHBhZGRpbmc9IjIiPgogICAgICAgICAgICAgICAgICAgIHt7IGZvcih2YXIgaT0wLCBsPWl0Lmxlbmd0aDsgaTxsOyBpKyspeyB9fQogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHZhbHVlPSJ7ez1pdFtpXS51cmx9fSIgbmFtZT0iRU00ZTc1OWY5NjczNTU0IiBvbmNsaWNrPSJlbV9zaXplKCdFTTRlNzU5Zjk2NzM1NTQnKTsiIGNoZWNrZWQ9ImNoZWNrZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iY2hlY2tib3giIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IiBjbGFzcz0iZm9ybWlucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Int7PWl0W2ldLnVybH19IiBlZDJrPSJ7ez1pdFtpXS51cmx9fSI+e3s9aXRbaV0ubmFtZX19PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImNlbnRlciI+e3s9aXRbaV0uc2l6c319PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIHt7IH0gfX0KICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIGFsaWduPSJsZWZ0IiBjbGFzcz0icG9zdDIiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgY2hlY2tlZD0iIiBjbGFzcz0iZm9ybWlucHV0IiBpZD0iY2hlY2thbGxfRU00ZTc1OWY5NjczNTU0IiBvbmNsaWNrPSJjaGVja0FsbCgnRU00ZTc1OWY5NjczNTU0Jyx0aGlzLmNoZWNrZWQpIj4gPGxhYmVsIGZvcj0iY2hlY2thbGxfRU00ZTc1OWY5NjczNTU0Ij7lhajpgIk8L2xhYmVsPiA8aW5wdXQgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnV0dG9uIGRvd25hbGwiIHZhbHVlPSLkuIvovb3pgInkuK3nmoTmlofku7YiIG9uY2xpY2s9ImRvd25sb2FkKCdFTTRlNzU5Zjk2NzM1NTQnLDAsMSkiPiA8c3BhbiBpZD0idXBkYXRlZmxhc2hFTTRlNzU5Zjk2NzM1NTQiPjxvYmplY3Qgd2lkdGg9IjEzNiIgaGVpZ2h0PSIyMCIgYWxpZ249Im1pZGRsZSIgY2xhc3M9ImNvcHlmbGFzaCIgaWQ9ImVkMmtjb3B5X0VNNGU3NTlmOTY3MzU1NCIgY29kZWJhc2U9Imh0dHA6Ly9kb3dubG9hZC5tYWNyb21lZGlhLmNvbS9wdWIvc2hvY2t3YXZlL2NhYnMvZmxhc2gvc3dmbGFzaC5jYWIjdmVyc2lvbj05LDAsMCwwIiBjbGFzc2lkPSJjbHNpZDpkMjdjZGI2ZS1hZTZkLTExY2YtOTZiOC00NDQ1NTM1NDAwMDAiIG9ubG9hZD0iZW1fc2l6ZSgmcXVvdDtFTTRlNzU5Zjk2NzM1NTQmcXVvdDspOyI+PHBhcmFtIHZhbHVlPSJhbHdheXMiIG5hbWU9ImFsbG93U2NyaXB0QWNjZXNzIj48cGFyYW0gdmFsdWU9ImZhbHNlIiBuYW1lPSJhbGxvd0Z1bGxTY3JlZW4iPjxwYXJhbSB2YWx1ZT0iL2NwMmZsYXNoLnN3ZiIgbmFtZT0ibW92aWUiPjxwYXJhbSB2YWx1ZT0iaGlnaCIgbmFtZT0icXVhbGl0eSI+PHBhcmFtIHZhbHVlPSIjZmZmZmZmIiBuYW1lPSJiZ2NvbG9yIj48cGFyYW0gdmFsdWU9InRyYW5zcGFyZW50IiBuYW1lPSJ3bW9kZSI+PHBhcmFtIHZhbHVlPSJmbGFzaElEPUVNNGU3NTlmOTY3MzU1NCIgbmFtZT0iRmxhc2hWYXJzIj48ZW1iZWQgd2lkdGg9IjEzNiIgaGVpZ2h0PSIyMCIgYWxpZ249Im1pZGRsZSIgcGx1Z2luc3BhZ2U9Imh0dHA6Ly93d3cubWFjcm9tZWRpYS5jb20vZ28vZ2V0Zmxhc2hwbGF5ZXIiIHR5cGU9ImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoIiBmbGFzaHZhcnM9ImZsYXNoSUQ9RU00ZTc1OWY5NjczNTU0IiBhbGxvd2Z1bGxzY3JlZW49ImZhbHNlIiBhbGxvd3NjcmlwdGFjY2Vzcz0iYWx3YXlzIiBuYW1lPSJlZDJrY29weV9FTTRlNzU5Zjk2NzM1NTQiIGJnY29sb3I9IiNmZmZmZmYiIHF1YWxpdHk9ImhpZ2giIHdtb2RlPSJ0cmFuc3BhcmVudCIgc3JjPSIvY3AyZmxhc2guc3dmIj48L29iamVjdD48L3NwYW4+JyA8L3RkPjx0ZCBhbGlnbj0iY2VudGVyIiBpZD0ic2l6ZV9FTTRlNzU5Zjk2NzM1NTQiIGNsYXNzPSJlbXVsZXNpemUgcG9zdDIiPjwvdGQ+PC90cj4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgICAqLwogICAgfS5nZXRNdWx0aUxpbmUoKSwKCiAgICBnZXRfcmVhbF91cmw6IGZ1bmN0aW9uKHNpdGUsIGNhbGxiYWNrKXsgIC8vIOi3s+i/h+aQnOe0oumTvuaOpe+8jOWPluW+l+ebtOaOpemTvuaOpQogICAgICAgIHhidWcoIlN0YXJ0IEdldCBSZWFsIFVSTDogIiArIHNpdGUudXJsKTsKICAgICAgICBnZXREb2Moc2l0ZS51cmwsIGZ1bmN0aW9uKGRvYyl7CiAgICAgICAgICAgIHZhciBmaW5kX3VybCA9ICQoc2l0ZS5zZWFyY2hfc2VsZWN0b3IsIGRvYykuYXR0cignaHJlZicpOwogICAgICAgICAgICAkc2l0ZSA9ICQoJyMnICsgc2l0ZS5pZCk7CgogICAgICAgICAgICBpZihmaW5kX3VybCl7CiAgICAgICAgICAgICAgICBzaXRlLnJlYWxfdXJsID0gc2l0ZS5CQVNFX1VSTCArIGZpbmRfdXJsOwogICAgICAgICAgICAgICAgJHNpdGUuYXR0cignaHJlZicsIHNpdGUucmVhbF91cmwpOwoKICAgICAgICAgICAgICAgIGNhbGxiYWNrKHNpdGUucmVhbF91cmwpOwogICAgICAgICAgICB9ZWxzZXsgICAvLyDlpoLmnpzmsqHmib7liLDpk77mjqXliJnlj5bkuIvkuIDkuKrnq5nngrkKICAgICAgICAgICAgICAgIHhidWcoJ+ayoeacieaJvuWIsCByZWFsX3VybO+8jOe7p+e7reiOt+WPluS4i+S4gOS4quermeeCuScpOwogICAgICAgICAgICAgICAgVkVSWUNELmdldCgrK1ZFUllDRC5jdXJTaXRlUG9zKTsKCiAgICAgICAgICAgICAgICAkc2l0ZS50ZXh0KHNpdGUubmFtZSArICfvvIjml6DotYTmupDvvIknKQogICAgICAgICAgICAgICAgICAgICAuY3NzKCdiYWNrZ3JvdW5kJywgJyM3Nzc4N2InKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIGdldF9kbGlua19wYWdlOiBmdW5jdGlvbih1cmwpewogICAgICAgIHhidWcoIlN0YXJ0IEdldCBkbGluayBQYWdlOiAiICsgdXJsKTsKICAgICAgICBnZXREb2ModXJsLCBmdW5jdGlvbihkb2MpewogICAgICAgICAgICBpZihkb2MpewogICAgICAgICAgICAgICAgeGJ1ZygiQ3VycmVudCBTaXRlIFBvczogIiArIFZFUllDRC5jdXJTaXRlUG9zKTsKICAgICAgICAgICAgICAgIHZhciBzaXRlID0gVkVSWUNELnNpdGVzW1ZFUllDRC5jdXJTaXRlUG9zXSwKICAgICAgICAgICAgICAgICAgICBwYWdlUHJvY2Vzc29yID0gc2l0ZS5wYWdlUHJvY2Vzc29yID8gc2l0ZS5wYWdlUHJvY2Vzc29yIDogVkVSWUNELmNvbW1vbmRQYWdlUHJvY2Vzc29yOwogICAgICAgICAgICAgICAgcGFnZVByb2Nlc3Nvcihkb2MsIHNpdGUsIHVybCk7CiAgICAgICAgICAgIH1lbHNleyAgLy8g5aaC5p6c5LiN5oiQ5Yqf5YiZ5Y+W5LiL5LiA5Liq56uZ54K5CiAgICAgICAgICAgICAgICBWRVJZQ0QuZ2V0KCsrVkVSWUNELmN1clNpdGVQb3MpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbihzaXRlUG9zKXsKICAgICAgICB2YXIgc2l0ZXMgPSB0aGlzLnNpdGVzOwoKICAgICAgICBpZihzaXRlUG9zID49IHNpdGVzLmxlbmd0aCkgcmV0dXJuOwoKICAgICAgICB2YXIgc2l0ZSA9IHNpdGVzW3NpdGVQb3NdOwoKICAgICAgICBpZihzaXRlLnNlYXJjaF9zZWxlY3Rvcil7ICAvLyDlpoLmnpzpnIDopoHmkJzntKIsIOWImeiOt+WPluecn+WunuWcsOWdgAogICAgICAgICAgICB0aGlzLmdldF9yZWFsX3VybChzaXRlLCB0aGlzLmdldF9kbGlua19wYWdlKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdGhpcy5nZXRfZGxpbmtfcGFnZShzaXRlLnVybCk7CiAgICAgICAgfQogICAgfSwKCiAgICBjb21tb25kUGFnZVByb2Nlc3NvcjogZnVuY3Rpb24oZG9jKXsgIC8vIOmAmueUqOeahOmhtemdouWkhOeQhgogICAgICAgIHZhciBkYXRhID0gW107CiAgICAgICAgJChkb2MpLmZpbmQoJ2FbaHJlZl49ImVkMmsiXScpLmVhY2goZnVuY3Rpb24oaSwgZWwpewogICAgICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdocmVmJykucmVwbGFjZSgnW3d3dy5lZDJrZXJzLmNvbV0nLCAnJyk7CiAgICAgICAgICAgIGRhdGFbaV0gPSBlZDJrTGluayh1cmwpCiAgICAgICAgfSk7CgogICAgICAgIFZFUllDRC5kaXNwbGF5X2NvbnRlbnQoZGF0YSk7CiAgICB9Cgp9OwoKLy8g5YW25LuW56uZ54K555qE6YWN572uClZFUllDRC5zaXRlcyA9IFsKICAgIHsgICAKICAgICAgICBuYW1lOiAnZWQya2VycycsCiAgICAgICAgaWQ6ICdzaXRlX2VkMmtlcnMnLAogICAgICAgIEJBU0VfVVJMOiAnaHR0cDovL3d3dy5lZDJrZXJzLmNvbScsCiAgICAgICAgdXJsOiAiaHR0cDovL3d3dy5lZDJrZXJzLmNvbS9pbmRleC5waHAvc2VhcmNoL2luZGV4P2M9MCZrZXl3b3JkPSIgKyBWRVJZQ0QudGl0bGUucmVwbGFjZSgvJy9nLCAiICIpLAogICAgICAgIHNlYXJjaF9zZWxlY3RvcjogIi50ZWNoZGVzIGE6Y29udGFpbnMoJyIgKyBWRVJZQ0QudGl0bGUucmVwbGFjZSgvJi9nLCAiJmFtcDsiKSArICInKSIKICAgIH0sCiAgICB7CiAgICAgICAgbmFtZTogIlNpbXBsZUNE77yI6buY6K6k77yJIiwKICAgICAgICBpZDogJ3NpdGVfc2ltcGxlY2QnLAogICAgICAgIEJBU0VfVVJMOiAiaHR0cDovL3NpbXBsZWNkLm1lIiwKICAgICAgICB1cmw6ICJodHRwOi8vc2ltcGxlY2QubWUvc2VhcmNoL2VudHJ5Lz9xdWVyeT0iICsgVkVSWUNELnRpdGxlLnJlcGxhY2UoL1wvfC18Ji9nLCAiICIpLAogICAgICAgIHNlYXJjaF9zZWxlY3RvcjogIi5lbnRyeS1saXN0IGE6Y29udGFpbnMoJyIgKyBWRVJZQ0QudGl0bGUgKyAiJykiLAogICAgICAgIHBhZ2VQcm9jZXNzb3I6IGZ1bmN0aW9uKGRvYywgc2l0ZSl7CiAgICAgICAgICAgIHZhciBkYXRhID0gW107CiAgICAgICAgICAgIHZhciBpZHMgPSBbXTsKICAgICAgICAgICAgJChkb2MpLmZpbmQoJy5lbXVsZW1haW4gaW5wdXRbbmFtZT0ic2VsZWN0ZW11bGUiXScpLmVhY2goZnVuY3Rpb24oaSwgZWwpewogICAgICAgICAgICAgICAgdmFyIHJpZCA9ICQodGhpcykuYXR0cigndmFsdWUnKTsKICAgICAgICAgICAgICAgIGlkc1tpXSA9ICJyaWQ9IiArIHJpZDsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgdXJsID0gc2l0ZS5CQVNFX1VSTCArICcvZG93bmxvYWQvP21vZGU9Y29weSYnICsgaWRzLmpvaW4oJyYnKTsKICAgICAgICAgICAgeGJ1ZygiR2V0IFNpbXBsZUNEOiAiICsgdXJsKTsKICAgICAgICAgICAgZ2V0RG9jKHVybCwgZnVuY3Rpb24oZG9jKXsKICAgICAgICAgICAgICAgICQoJ3RkOmNvbnRhaW5zKCJlZDJrOi8vIiknLCBkb2MpLmVhY2goZnVuY3Rpb24oaSwgZWwpewogICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAkLnRyaW0oJCh0aGlzKS50ZXh0KCkpOwogICAgICAgICAgICAgICAgICAgIGRhdGFbaV0gPSBlZDJrTGluayh1cmwpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgVkVSWUNELmRpc3BsYXlfY29udGVudChkYXRhKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSwKICAgIHsgICAKICAgICAgICBuYW1lOiAn6YCb5aSn6KGXJywKICAgICAgICBpZDogJ3NpdGVfZ2RhamllJywKICAgICAgICBCQVNFX1VSTDogJycsCiAgICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoJ3d3dy52ZXJ5Y2QuY29tJywgJ3d3dy52ZXJ5Y2QuZ2RhamllLmNvbScpLAogICAgICAgIC8vIHNlYXJjaF9zZWxlY3RvcjogIiNlbXVsZUZpbGUgYVtocmVmXj0naHR0cDovL3d3dy52ZXJ5Y2QuZ2RhamllLmNvbSddIiwKICAgICAgICBwYWdlUHJvY2Vzc29yOiBmdW5jdGlvbihkb2MsIHNpdGUsIHVybCkgeyAgLy8g6Kej5Yaz5Y+q5pyJ5LiA5Liq55qE6Zeu6aKYCiAgICAgICAgICAgIHZhciBkYXRhID0gW107CiAgICAgICAgICAgIHZhciBjb3VudCA9IDA7CiAgICAgICAgICAgIHZhciBnZXREb3dubG9hZFVybCA9IGZ1bmN0aW9uKHVybCwgaSwgdG90YWwpIHsKICAgICAgICAgICAgICAgIGdldERvYyh1cmwsIGZ1bmN0aW9uKGRvYyl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICQoZG9jKS5maW5kKCdhW2hyZWZePSJlZDJrOi8vIl0nKS5hdHRyKCdocmVmJyk7CiAgICAgICAgICAgICAgICAgICAgZGF0YVtpXSA9IGVkMmtMaW5rKHVybCk7CiAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gMTsKCiAgICAgICAgICAgICAgICAgICAgeGJ1Zygn5q2j5Zyo6I635Y+W56ysICcsIGNvdW50LCAnIOS4qu+8jOWFsSAnLCB0b3RhbCwgJyDkuKonKTsKICAgICAgICAgICAgICAgICAgICAvLyBpZiAoY291bnQgPT0gdG90YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgVkVSWUNELmRpc3BsYXlfY29udGVudChkYXRhKTsKICAgICAgICAgICAgICAgICAgICAvLyB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciAkbGlua3MgPSAkKGRvYykuZmluZCgiI2VtdWxlRmlsZSBhW2hyZWZePSdodHRwOi8vd3d3LnZlcnljZC5nZGFqaWUuY29tJ10iKTsKICAgICAgICAgICAgJGxpbmtzLmVhY2goZnVuY3Rpb24oaSwgbGluayl7CiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJChsaW5rKS5hdHRyKCdocmVmJyk7CiAgICAgICAgICAgICAgICBnZXREb3dubG9hZFVybCh1cmwsIGksICRsaW5rcy5zaXplKCkpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9LAoKICAgIC8vIHsgICBuYW1lOiAnVmVyeUNEIEZldGNoJywgaG9zdDogJ3ZlcnljZGZldGNoLmR1YXBwLmNvbScsICAvLzIwMTMtMi0xMCDmtYvor5XlpLHmlYgKICAgIC8vICAgICB1cmw6IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgnd3d3LnZlcnljZC5jb20nLCAndmVyeWNkZmV0Y2guZHVhcHAuY29tJyksCiAgICAvLyAgICAgcGFnZVByb2Nlc3NvcjogZnVuY3Rpb24oZG9jKXsKICAgIC8vICAgICAgICAgR01fYWRkU3R5bGUoIi5uZWVkZW11bGUge2Rpc3BsYXk6IG5vbmU7fSIpOwoKICAgIC8vICAgICAgICAgdmFyICRuZXcgPSAkKCcjaXB0Y29tRUQySycsIGRvYyk7CiAgICAvLyAgICAgICAgICQoJyNpcHRjb21FRDJLJykuaHRtbCgkbmV3KTsKICAgIC8vICAgICB9fQpdOwoKdmFyIERvdWJhbiA9IHsKICAgIHNlYXJjaFVSTHM6IHsKICAgICAgICAi5Zu+5LmmIjogImh0dHA6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdF9zZWFyY2g/c2VhcmNoX3RleHQ9JXMmY2F0PTEwMDEiCiAgICB9LAogICAgaW5pdDogZnVuY3Rpb24oKXsKICAgICAgICB2YXIgdHlwZSA9ICQoIiN3aGVyZXJ1PmE6ZXEoMSkiKS50ZXh0KCk7CiAgICAgICAgdmFyIHNlYXJjaFVSTCA9IHRoaXMuc2VhcmNoVVJMc1t0eXBlXTsKICAgICAgICBpZighc2VhcmNoVVJMKSByZXR1cm47CgogICAgICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKTsKICAgICAgICB2YXIgdXJsID0gc2VhcmNoVVJMLnJlcGxhY2UoIiVzIiwgZW5jb2RlVVJJQ29tcG9uZW50KHRpdGxlKSk7CgogICAgICAgIHZhciBsaW5rID0gJCgiPGE+6LGG55OjIiArIHR5cGUgKyAi5pCc57SiPC9hPiIpLmF0dHIoewogICAgICAgICAgICBocmVmOiB1cmwsCiAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgIHN0eWxlOiAiaGVpZ2h0OiAyMHB4OyB0ZXh0LWFsaWduOiBjZW50ZXI7IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IHBhZGRpbmc6IDJweCAxNnB4OyBjdXJzb3I6IHBvaW50ZXI7IgogICAgICAgIH0pOwoKICAgICAgICAkKCI8dGQ+IikuYXBwZW5kKGxpbmspLmFwcGVuZFRvKCcjb3RoZXJfbGlua3MgdHI6ZXEoMCknKQogICAgfSwKICAgIGdldFRpdGxlOiBmdW5jdGlvbigpewogICAgICAgIHZhciB0aXRsZSA9ICQoIiN0b3BpY3N0aXRsZSIpLnRleHQoKTsKICAgICAgICB2YXIgbSA9IHRpdGxlLm1hdGNoKC/jgIooLio/KeOAiy8pOwoKICAgICAgICByZXR1cm4gbVsxXSB8fCB0aXRsZTsKICAgIH0KfTsKCgoKVkVSWUNELmluaXQoKTsKCkRvdWJhbi5pbml0KCk7"},{"name":"迅雷快传显示全部下载链接","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://kuai.xunlei.com/d/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970064},"enabled":true,"position":15,"file_url":"https://greasyfork.org/scripts/8399-%E8%BF%85%E9%9B%B7%E5%BF%AB%E4%BC%A0%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/code/%E8%BF%85%E9%9B%B7%E5%BF%AB%E4%BC%A0%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5.user.js","uuid":"b0bcedc1-76a8-4531-8292-cf5b9632ea50","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIOi/hembt+W/q+S8oOaYvuekuuWFqOmDqOS4i+i9vemTvuaOpQovLyBAbmFtZXNwYWNlICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy96aC1DTi9zY3JpcHRzLzgzOTkKLy8gQGF1dGhvciAgICAgIOWkqea2r+WApuWuogovLyBAc3VwcG9ydFVSTCBodHRwOi8vdC5xcS5jb20vSGVhcnRCbGFkZQovLyBAZGVzY3JpcHRpb24g5paH5Lu25YiX6KGo5LiL6Z2i5o+S5YWl5LiA5Liq5paH5pys5qGG77yM5pi+56S65omA5pyJ5paH5Lu255qE5LiL6L296ZO+5o6l77yI5YyF5ous5rKh5Yu+6YCJ55qE77yJCi8vIEBpbmNsdWRlICAgICBodHRwOi8va3VhaS54dW5sZWkuY29tL2QvKgovLyBAdmVyc2lvbiAgICAgMS4wCi8vIEBncmFudCAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQooZnVuY3Rpb24oKXsKCXZhciB1cmxzID0gJycsaTsKCXZhciBmbmFtZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuZmlsZV9uYW1lIik7Cgl2YXIgZmxlbmd0aD1mbmFtZS5sZW5ndGg7Cglmb3IgKGk9MDtpPGZsZW5ndGg7aSsrKXsKCQl1cmxzKz1mbmFtZVtpXS5ocmVmKydcbic7Cgl9Cgl2YXIgdHh0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIik7Cgl0eHQudmFsdWU9dXJsczsKCXR4dC5pZD0iZG93bl9saW5rcyI7Cgl0eHQuc3R5bGU9IndpZHRoOjY3N3B4O2hlaWdodDozMDBweDsiOwoJZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmZpbGVfdyIpWzBdLmFwcGVuZENoaWxkKHR4dCk7Cgl0eHQuZm9jdXMoKTsKCXR4dC5zZWxlY3QoKTsKfSkoKTsK"},{"name":"下载一键通","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":["extention.ie.sogou.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970064},"enabled":true,"position":16,"file_url":"https://greasyfork.org/scripts/2510-%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%80%9A/code/%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%80%9A.user.js","uuid":"01d1c763-918c-497a-ae4f-c31ab5aea047","source":""},{"name":"YouTube +","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"orig_includes":[],"orig_matches":["*://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":false,\"GEN_INF_SCRL\":false,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":false,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"auto\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ATPL\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_VOL_LDN\":true,\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":false,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":2000,\"floaterY\":2000,\"firstTime\":false,\"volLev\":50,\"advOpts\":false,\"blacklist\":{},\"extLang\":{\"zh_CN\":{\"YTSETS\":\"YouTube+ 设置\",\"ADV_OPTS\":\"高级选项\",\"SUB_PLST\":\"播放最新上传的内容\",\"PPOT_OPEN\":\"在弹出窗口中打开\",\"BLCK_ADD\":\"添加到黑名单\",\"BLCK_EDIT\":\"编辑\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"关闭\",\"CNSL_AP\":\"自动播放\",\"CNSL_RPT\":\"循环播放\",\"CNSL_SVTH\":\"打开缩略图\",\"CNSL_SS\":\"画面截图\",\"CNSL_SS_CLS\":\"关闭\",\"CNSL_PPOT\":\"弹出播放视频\",\"CNSL_FLBR\":\"网页全屏模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_YTSC\":\"YouTube 快捷键列表\",\"PLST_AP\":\"自动播放\",\"PLST_RVRS\":\"倒序排列\",\"SHOW_CMTS\":\"显示评论\",\"HIDE_CMTS\":\"隐藏评论\",\"GLB_IMPR\":\"导入/导出设置\",\"GLB_LOCL_LANG\":\"点击修改 YT+ 语言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存并加载\",\"GLB_RSET\":\"重置\",\"GLB_RSET_CONF\":\"这将重置YT+的所有设置和黑名单。是否要继续？\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"设置已保存\",\"GLB_RMBL\":\"从黑名单中移除\",\"FTR_DESC\":\"详细了解\",\"GEN\":\"常规\",\"VID\":\"视频\",\"CHN\":\"频道\",\"BLK\":\"黑名单\",\"ABT\":\"关于\",\"HLP\":\"帮助\",\"DNT\":\"捐赠\",\"GEN_TTL\":\"通用设置\",\"GEN_GEN\":\"常规\",\"GEN_LYT\":\"布局\",\"GEN_LOCL_LANG\":\"使用自定义的 YT+ 语言包\",\"GEN_PPOT_ON\":\"启用弹出模式\",\"GEN_DSBL_ADS\":\"禁止视频页面以外的广告\",\"GEN_INF_SCRL\":\"在信息源列表启用无限滚动\",\"GEN_YT_LOGO_LINK\":\"YouTube 标志重定向到订阅页\",\"GEN_SUB_LIST\":\"启用订阅播放列表\",\"GEN_REM_APUN\":\"去除自动播放下一个\",\"GEN_SPF_OFF\":\"禁用动态加载\",\"GEN_HIDE_FTR\":\"隐藏页脚\",\"GEN_BLUE_GLOW\":\"去除点击过的按钮周围的蓝色光圈\",\"GEN_HDE_RECM_SDBR\":\"隐藏推荐频道侧边栏\",\"GEN_HDE_SRCH_SDBR\":\"隐藏搜索结果侧边栏\",\"GEN_HDE_CHN_SDBR\":\"隐藏频道侧边栏\",\"GEN_CMPT_TTLS\":\"在信息源中使用缩略标题\",\"GEN_DSB_HVRC\":\"禁用悬停卡片\",\"GEN_BTTR_NTF\":\"改进的蓝色通知框\",\"GEN_GRID_SUBS\":\"在订阅中使用网格布局\",\"GEN_GRID_SRCH\":\"在搜索结果中使用网格布局\",\"VID_TTL\":\"视频设置\",\"VID_PLR\":\"播放器设置\",\"VID_PLR_LYT\":\"播放器布局\",\"VID_DFLT_QLTY\":\"默认视频质量：\",\"VID_DFLT_QLTY_AUTO\":\"自动\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"阅读评论时保持播放器可见\",\"VID_PLR_ALVIS_WDTH\":\"悬浮播放器宽度\",\"VID_PLR_ALVIS_RST\":\"重设位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回顶部\",\"VID_PLR_ATPL\":\"自动播放视频\",\"VID_LAYT\":\"布局\",\"VID_VID_CNT\":\"显示已上传视频数及链接\",\"VID_POST_TIME\":\"显示视频已发布时间\",\"VID_HIDE_DETLS\":\"隐藏视频详细信息\",\"VID_HIDE_COMS\":\"评论区\",\"VID_HIDE_COMS_SHOW\":\"显示\",\"VID_HIDE_COMS_HIDE\":\"隐藏\",\"VID_HIDE_COMS_REM\":\"去除\",\"VID_END_SHRE\":\"禁用视频结束时的分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"启用播放列表的自动播放按钮\",\"VID_PLST_RVRS\":\"启用播放列表的倒序排列按钮\",\"VID_PLR_SIZE_MEM\":\"记住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠标滚轮更改音量\",\"VID_PLR_VOL_MEM\":\"记住音量\",\"VID_PLR_VOL_LDN\":\"禁用 YouTube 响度统一化\",\"VID_PLR_ADS\":\"禁用视频页面中的广告\",\"VID_PLR_ALACT\":\"播放器快捷键始终生效\",\"VID_SUB_ADS\":\"仅启用已订阅频道中视频的广告\",\"VID_PLR_ANTS\":\"禁用注释\",\"VID_PLR_HFR\":\"禁用高帧率 (60fps)\",\"VID_PLR_HTML5\":\"可能时使用 HTML 5 播放器\",\"VID_PLR_CC\":\"禁用字幕和隐藏式字幕\",\"VID_PLR_INFO\":\"启用稍后观看按钮\",\"VID_PLR_FIT\":\"为剧场模式适配页面\",\"VID_PLR_FIT_WDTH\":\"适配页面最大宽度:\",\"VID_PLR_DYN_SIZE\":\"默认视图中禁用播放器动态调节尺寸\",\"VID_DESC_SHRT\":\"小巧的视频描述按钮\",\"VID_TTL_CMPT\":\"缩略视频描述标题\",\"VID_PPOT_SZ\":\"弹出播放器的大小\",\"VID_LAYT_AUTO_PNL\":\"自动展开视频描述\",\"GEN_CHN_DFLT_PAGE\":\"默认的频道页面：\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"默认\",\"GEN_CHN_DFLT_PAGE_VID\":\"视频\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"频道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"讨论\",\"GEN_CHN_DFLT_PAGE_ABT\":\"关于\",\"BLK_TTL\":\"黑名单设置\",\"BLK_BLK\":\"黑名单\",\"BLK_ON\":\"启用黑名单\",\"ABT_TTL\":\"相关信息和实用链接\",\"ABT_THKS\":\"鸣谢：\",\"ABT_THKS_YEPPHA\":\"，他们的成果给此项目带来了灵感，没有他们，今天这些就不会存在。\",\"ABT_THKS_USERSCRIPT\":\" 使开发和发行第三方软件的任务无比简单。\",\"ABT_THKS_STACKOV\":\" 无价的信息对软件开发做出了巨大贡献。\",\"ABT_INFO\":\"官方页面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"WLCM\":\"感谢您安装 YouTube+\",\"WLCMSTRT\":\"您可以点击上面的按钮来自定义您的设置\",\"WLCMFTRS\":\"点击这里查看所有特性的介绍\",\"LOCALE\":\"中文 (简体)\",\"lastMod\":1505607874000},\"nextCheck\":1507207244671},\"GEN_HDE_CHN_SDBR\":false,\"GEN_HDE_SRCH_SDBR\":false,\"GEN_HDE_RECM_SDBR\":false,\"GEN_HIDE_FTR\":false,\"GEN_CMPT_TTLS\":false,\"GEN_DSB_HVRC\":false,\"GEN_GRID_SRCH\":false,\"GEN_GRID_SUBS\":false,\"GEN_CHN_DFLT_PAGE\":\"default\",\"GEN_SPF_OFF\":false,\"GEN_REM_APUN\":false,\"GEN_YT_LOGO_LINK\":false,\"GEN_DSBL_ADS\":false,\"GEN_LOCL_LANG\":false,\"VID_LAYT_AUTO_PNL\":false,\"VID_HIDE_DETLS\":false,\"VID_TTL_CMPT\":false,\"VID_HIDE_COMS\":\"0\",\"VID_PLR_FIT_WDTH\":false,\"VID_PLR_FIT\":false,\"VID_PLR_DYN_SIZE\":false,\"VID_PLR_INFO\":false,\"VID_PLR_HFR\":false,\"VID_VOL_WHEEL\":false,\"VID_PLR_ALACT\":false,\"VID_PLR_VOL_MEM\":false,\"VID_PLR_ANTS\":false,\"VID_PLR_CC\":false,\"VID_PLR_ALVIS_WDTH\":false,\"VID_SUB_ADS\":false,\"VID_PLR_ADS\":false,\"theaterMode\":true}"},"ts":1506602444672},"enabled":true,"position":17,"file_url":"https://greasyfork.org/scripts/9932-youtube/code/YouTube%20+.user.js","uuid":"af9291e1-8670-4b26-8476-6ed531dda8bf","source":""},{"name":"bilibili HTML5播放器","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://www.bilibili.com/video/av*","http://bangumi.bilibili.com/anime/v/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1507811597675},"enabled":true,"position":18,"file_url":"https://greasyfork.org/scripts/22441-bilibili-html5%E6%92%AD%E6%94%BE%E5%99%A8/code/bilibili%20HTML5%E6%92%AD%E6%94%BE%E5%99%A8.user.js","uuid":"dd9e4ba4-968f-4471-8c4e-8d8824eff4fa","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIGJpbGliaWxpIEhUTUw15pKt5pS+5ZmoCi8vIEBhdXRob3IgICAgICBuYW5hdmFvCi8vIEBuYW1lc3BhY2UgICBuYW5hX3Zhb19zY3JpcHQKLy8gQGRlc2NyaXB0aW9uIOWQr+eUqGJpbGliaWxp55qEaHRtbDXmkq3mlL7lmajvvIzoh6rliqjlrr3lsY/jgIHljp/nlJ/lj7PplK7oj5zljZUKLy8gQHZlcnNpb24gICAgIDEuMjMKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2KgovLyBAaW5jbHVkZSAgICAgaHR0cDovL2Jhbmd1bWkuYmlsaWJpbGkuY29tL2FuaW1lL3YvKgovLyBAcnVuLWF0ICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQGdyYW50ICAgICAgIEdNX3NldFZhbHVlCi8vIEBncmFudCAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgR01fZGVsZXRlVmFsdWUKLy8gPT0vVXNlclNjcmlwdD09Cid1c2Ugc3RyaWN0JzsKKGZ1bmN0aW9uICgpIHsKICAgIGxldCB1cmwgPSBHTV9nZXRWYWx1ZSgndXJsJyk7CiAgICBHTV9kZWxldGVWYWx1ZSgndXJsJyk7CiAgICBpZiAobG9jYXRpb24uaG9zdG5hbWUgPT0gJ2Jhbmd1bWkuYmlsaWJpbGkuY29tJykgewogICAgICAgIGlmKHVybCA9PT0gbG9jYXRpb24uaHJlZil7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgR01fc2V0VmFsdWUoJ3VybCcsIGxvY2F0aW9uLmhyZWYpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHdpbmRvdy5zdG9wKCk7CiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudi1hdi1saW5rJykuaHJlZjsKICAgICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5ewogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYmlsaWJpbGlsb3ZlcicsICdZRVNZRVNZRVMnKTsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RlZmF1bHRoNScsICcxJyk7CiAgICAgICAgfWNhdGNoKGUpe30KICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy4kID0gdW5zYWZlV2luZG93LmpRdWVyeTsKICAgICAgICAgICAgJCgnLmJpbGliaWxpLXBsYXllci12aWRlby1idG4td2lkZXNjcmVlbicpLmNsaWNrKCk7CiAgICAgICAgICAgIHNjcm9sbFRvUGxheWVyKCk7CiAgICAgICAgICAgIGxldCBpbnRlcnZhbElkICA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZigkKCcuYmlsaWJpbGktcGxheWVyLXZpZGVvLXdyYXAgdmlkZW8nKS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIHNldENvbnRleHRNZW51SGFuZGxlcigpOwogICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sNTAwKTsKICAgICAgICB9KTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2Nyb2xsVG9QbGF5ZXIoKXsKICAgICAgICB2YXIgcGxheWVyID0gJCgnI2JpbGliaWxpUGxheWVyJyk7CiAgICAgICAgaWYoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID09PSAwKXsKICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChwbGF5ZXIub2Zmc2V0KCkudG9wICsgcGxheWVyLmhlaWdodCgpIC0gJCh3aW5kb3cpLmhlaWdodCgpKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldENvbnRleHRNZW51SGFuZGxlcigpewogICAgICAgIGxldCBjb250ZXh0TWVudUV2ZW50ID0gJC5fZGF0YSggZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJpbGliaWxpLXBsYXllci12aWRlby13cmFwJyksICJldmVudHMiICkuY29udGV4dG1lbnVbMF07CiAgICAgICAgbGV0IG9sZEhhbmRsZXIgPSBjb250ZXh0TWVudUV2ZW50LmhhbmRsZXI7CgogICAgICAgIGxldCBpc0VsZW1lbnRDbGlja2VkID0gZnVuY3Rpb24oZWxlLCB4LCB5KXsKICAgICAgICAgICAgbGV0IHJlY3QgPSBlbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgICAgIHJldHVybiAoKHggPiByZWN0LmxlZnQpICYmICh4IDwgcmVjdC5yaWdodCkgJiYgKHkgPiByZWN0LnRvcCkgJiYgKHkgPCByZWN0LmJvdHRvbSkpOwogICAgICAgIH07CgogICAgICAgIGxldCBhbnlFbGVtZW50Q2xpY2tlZCA9IGZ1bmN0aW9uKGFycix4LHkpewogICAgICAgICAgICBmb3IobGV0IGkgPSAwO2kgPCBhcnIubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgaWYoaXNFbGVtZW50Q2xpY2tlZChhcnJbaV0seCx5KSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH07CgogICAgICAgIGxldCBuZXdIYW5kbGVyID0gZnVuY3Rpb24oZSl7ICAKICAgICAgICAgICAgbGV0IGVsZUFyciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5iaWxpYmlsaS1kYW5tYWt1Jyk7CiAgICAgICAgICAgIGlmKGFueUVsZW1lbnRDbGlja2VkKGVsZUFycixlLmNsaWVudFgsZS5jbGllbnRZKSl7CiAgICAgICAgICAgICAgICBvbGRIYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29udGV4dE1lbnVFdmVudC5oYW5kbGVyID0gZXhwb3J0RnVuY3Rpb24obmV3SGFuZGxlcixjb250ZXh0TWVudUV2ZW50KTsKICAgIH0KfSkgKCk7Cg=="},{"name":"CNKI 中国知网 PDF 全文下载（特制版）","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://image.cnki.net/*"],"orig_includes":["http://*.cnki.net/*","http://*.cnki.net.*/*","*/kns/brief/*","*/kns55/brief/*","*/grid2008/brief/*","*/detail/detail.aspx*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970080},"enabled":true,"position":19,"file_url":"https://greasyfork.org/scripts/18842-cnki-%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91-pdf-%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD-%E7%89%B9%E5%88%B6%E7%89%88/code/CNKI%20%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91%20PDF%20%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E7%89%B9%E5%88%B6%E7%89%88%EF%BC%89.user.js","uuid":"39b74956-bbf5-43a6-a45f-00c83bd4aa10","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICAgIENOS0ktUERGLVNwZWNpYWwKLy8gQG5hbWUgICAgICAgICAgIENOS0kg5Lit5Zu955+l572RIFBERiDlhajmlofkuIvovb3vvIjnibnliLbniYjvvIkKLy8gQHZlcnNpb24gICAgICAgIDMuMi4wLjIwMTcwMjEwCi8vIEBuYW1lc3BhY2UgICAgICBodHRwOi8veXVlbG9uZy5pbmZvCi8vIEBhdXRob3IgICAgICAgICBZVUUgTG9uZwovLyBAZGVzY3JpcHRpb24gICAg5Y+C6KeBIGh0dHA6Ly9ibG9nLnl1ZWxvbmcuaW5mby9wb3N0L2Nua2ktcGRmLWpzLmh0bWwKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmNua2kubmV0LyoKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmNua2kubmV0LiovKgovLyBAZXhjbHVkZSAgICAgICAgaHR0cDovL2ltYWdlLmNua2kubmV0LyoKLy8gQGluY2x1ZGUgICAgICAgICova25zL2JyaWVmLyoKLy8gQGluY2x1ZGUgICAgICAgICova25zNTUvYnJpZWYvKgovLyBAaW5jbHVkZSAgICAgICAgKi9ncmlkMjAwOC9icmllZi8qCi8vIEBpbmNsdWRlICAgICAgICAqL2RldGFpbC9kZXRhaWwuYXNweCoKLy8gQHJ1bi1hdCAgICAgICAgIGRvY3VtZW50LWlkbGUKLy8gQGdyYW50ICAgICAgICAgIG5vbmUKLy8gQHN1cHBvcnRVUkwgICAgIGh0dHA6Ly9ibG9nLnl1ZWxvbmcuaW5mby9wb3N0L2Nua2ktcGRmLWpzLmh0bWwKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgYWxsTGlzLCB0aGlzTGksIG5ld0xpLCBhUERGLCBiUERGLCBhbGxMaW5rcywgdGhpc0xpbmssIHBhZ2VUeXBlLCBwZlR5cGUsIG15dXJsLCBpOwp2YXIgcGFnZVR5cGUgPSB0cnVlOwp2YXIgcGZUeXBlID0gdHJ1ZTsKdmFyIG15dXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CgphbGxMaW5rcyA9IGRvY3VtZW50LmV2YWx1YXRlKAogICAgJy8vYVtAaHJlZl0nLAogICAgZG9jdW1lbnQsCiAgICBudWxsLAogICAgWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSwKICAgIG51bGwpOwoKYWxsTGlzID0gZG9jdW1lbnQuZXZhbHVhdGUoCiAgICAiLy9saVtAY2xhc3NdIiwKICAgIGRvY3VtZW50LAogICAgbnVsbCwKICAgIFhQYXRoUmVzdWx0LlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsCiAgICBudWxsKTsKCmlmIChteXVybC5pbmRleE9mKCJkZXRhaWwuYXNweCIpICE9IC0xKSB7CiAgICBwYWdlVHlwZSA9IGZhbHNlOwp9IC8vZmFsc2Ug5Li66K+m5oOF6aG16Z2iCmlmIChkb2N1bWVudC50aXRsZS5pbmRleE9mKCIgLSDkuK3lm73nn6XnvZEiKSAhPSAtMSkgewogICAgcGZUeXBlID0gZmFsc2U7Cn0gLy9mYWxzZSDkuLrmlrDlubPlj7AKCmlmICgocGZUeXBlID09PSB0cnVlKSAmIChwYWdlVHlwZSA9PT0gZmFsc2UpKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExpcy5zbmFwc2hvdExlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpc0xpID0gYWxsTGlzLnNuYXBzaG90SXRlbShpKTsKICAgICAgICBpZiAodGhpc0xpLmdldEF0dHJpYnV0ZSgiY2xhc3MiKS5pbmRleE9mKCJyZWFkb2wiKSAhPSAtMSkgewogICAgICAgICAgICBuZXdMaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgIG5ld0xpLnNldEF0dHJpYnV0ZSgiY2xhc3MiLCAicGRmIik7CiAgICAgICAgICAgIGFQREYgPSAnPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9IicgKyB0aGlzTGkuZmlyc3RDaGlsZC5ocmVmLnJlcGxhY2UoIiZkZmxhZz1yZWFkb25saW5lIiwgIiZkZmxhZz1wZGZkb3duIikgKyAnIj5QREbkuIvovb08L2E+JzsKICAgICAgICAgICAgbmV3TGkuaW5uZXJIVE1MID0gYVBERjsKICAgICAgICAgICAgdGhpc0xpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0xpLCB0aGlzTGkubmV4dFNpYmxpbmcpOwogICAgICAgIH0KICAgIH0KfQoKaWYgKChwZlR5cGUgPT09IGZhbHNlKSAmIChwYWdlVHlwZSA9PT0gZmFsc2UpKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExpbmtzLnNuYXBzaG90TGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzTGluayA9IGFsbExpbmtzLnNuYXBzaG90SXRlbShpKTsKICAgICAgICBpZiAodGhpc0xpbmsuaHJlZiAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoImRvd25sb2FkLmFzcHg/ZmlsZW5hbWU9IikgIT0gLTEgJiYgdGhpc0xpbmsuaW5uZXJIVE1MLmluZGV4T2YoIuaVtOacrCIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmlubmVySFRNTCA9IHRoaXNMaW5rLmlubmVySFRNTC5yZXBsYWNlKCLmlbTmnKwiLCAiQ0FKIik7CiAgICAgICAgICAgIGJQREYgPSB0aGlzTGluay5ocmVmOwogICAgICAgIH0KICAgICAgICBpZiAodGhpc0xpbmsuaHJlZiAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoImRvd25sb2FkLmFzcHg/ZmlsZW5hbWU9IikgIT0gLTEgJiYgdGhpc0xpbmsuaW5uZXJIVE1MLmluZGV4T2YoIuWIhumhtSIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmlubmVySFRNTCA9IHRoaXNMaW5rLmlubmVySFRNTC5yZXBsYWNlKCLliIbpobUiLCAiUERGIik7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSBiUERGLnJlcGxhY2UoIm5oZG93biIsICJwZGZkb3duIik7CiAgICAgICAgfQogICAgfQp9CgppZiAocGFnZVR5cGUgPT09IHRydWUpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsTGlua3Muc25hcHNob3RMZW5ndGg7IGkrKykgewogICAgICAgIHRoaXNMaW5rID0gYWxsTGlua3Muc25hcHNob3RJdGVtKGkpOwogICAgICAgIGlmICh0aGlzTGluay5ocmVmICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiZG93bmxvYWQuYXNweD9maWxlbmFtZT0iKSAhPSAtMSAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoIiZkZmxhZyIpID09IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSB0aGlzTGluay5ocmVmICsgIiZkZmxhZz1wZGZkb3duIjsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXNMaW5rLmhyZWYgJiYgdGhpc0xpbmsuaHJlZi5pbmRleE9mKCJkb3dubG9hZC5hc3B4P2ZpbGVuYW1lPSIpICE9IC0xICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiJmRmbGFnPW5oZG93biIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSB0aGlzTGluay5ocmVmLnJlcGxhY2UoIm5oZG93biIsICJwZGZkb3duIik7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzTGluay5ocmVmICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiZG93bmxvYWQuYXNweD9maWxlbmFtZT0iKSAhPSAtMSAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoIiZkZmxhZz1wZGZkb3duIikgIT0gLTEgJiYgKHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiPUNNRkQiKSAhPSAtMSB8fCB0aGlzTGluay5ocmVmLmluZGV4T2YoIj1DREZEIikgIT0gLTEgKSkgewogICAgICAgICAgICB0aGlzTGluay5ocmVmID0gdGhpc0xpbmsuaHJlZi5yZXBsYWNlKCJwZGZkb3duIiwgIm5oZG93biIpOwogICAgICAgIH0KICAgIH0KfQ=="},{"name":"网易云下载","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://music.163.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970080},"enabled":true,"position":20,"file_url":"https://greasyfork.org/scripts/23222-%E7%BD%91%E6%98%93%E4%BA%91%E4%B8%8B%E8%BD%BD/code/%E7%BD%91%E6%98%93%E4%BA%91%E4%B8%8B%E8%BD%BD.user.js","uuid":"953f18f6-18dd-4274-bc8b-c1f143651b7e","source":""},{"name":"百度网盘直接下载助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970096},"enabled":true,"position":21,"file_url":"https://greasyfork.org/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"a32aa463-5ae4-4309-976b-d90c33f30547","source":""},{"name":"磁力云播","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["https://btdigg.org/search*","http://btdigg.org/search*","http://www.mp4ba.com/*","http://*.jav*.*","https://*.jav*.*","http://*.torrent*.*/*","https://*.torrent*.*/*","http://*.bt*.*","https://*.bt*.*","http://*.cili*.*","https://*.cili*.*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970096},"enabled":true,"position":22,"file_url":"https://sleazyfork.org/scripts/21333-%E7%A3%81%E5%8A%9B%E4%BA%91%E6%92%AD/code/%E7%A3%81%E5%8A%9B%E4%BA%91%E6%92%AD.user.js","uuid":"d21a1f02-ec1d-44e7-b65f-13658d5af6f5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDno4HlipvkupHmkq0KLy8gQHZlcnNpb24gICAgICAxLjkuMgovLyBAZGVzY3JpcHRpb24gIOaJvuWHuumhtemdoueahOejgeWKm+mTvu+8jOa3u+WKoOS6keaSreaOpeWPowovLyBAYXV0aG9yICAgICAgIOejgeWKm+S6keaSrQovLyBAaWNvbiAgICAgICAgIGh0dHA6Ly9kZW1vLnNjLmNoaW5hei5jb20vRmlsZXMvcGljL2ljb25zaWNvLzQyMDQvMy5pY28KLy8gQGluY2x1ZGUgICAgICBodHRwczovL2J0ZGlnZy5vcmcvc2VhcmNoKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly9idGRpZ2cub3JnL3NlYXJjaCoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vd3d3Lm1wNGJhLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cDovLyouamF2Ki4qCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly8qLmphdiouKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly8qLnRvcnJlbnQqLiovKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vKi50b3JyZW50Ki4qLyoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi5idCouKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vKi5idCouKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly8qLmNpbGkqLioKLy8gQGluY2x1ZGUgICAgICBodHRwczovLyouY2lsaSouKgovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMy9qcXVlcnkubWluLmpzCi8vIEBydW4tYXQgICAgICBkb2N1bWVudC1lbmQKLy8gQG5hbWVzcGFjZSBodHRwczovL2dyZWFzeWZvcmsub3JnL3VzZXJzLzU0NDcyCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZ2V0QWxsTWFnbmV0KHJhd01hZ25ldHMpIHsKICAgIHZhciBtYWduZXROdW0gPSByYXdNYWduZXRzLmxlbmd0aDsKICAgIHZhciByYXdTdHJpbmcgPSAiIjsKICAgIHZhciByZXggPSBuZXcgUmVnRXhwKCJcXHd7NDB9IiwgJ2cnKTsgLy9yZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWxsIDQwIGJpdCBjb2RlIAogICAgaWYgKG1hZ25ldE51bSAhPT0gMCkgeyAvL3ByYXNlIGFsbCBtYWduZXQgaGVyZiBub2RlcyBpbnRvIHN0cmluZwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFnbmV0TnVtOyBpKyspIHsKICAgICAgICAgICAgcmF3U3RyaW5nICs9IHJhd01hZ25ldHNbaV0udG9TdHJpbmcoKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gcmF3U3RyaW5nLm1hdGNoKHJleCk7IC8vcmV0dXJuIHRoZSBjb2RlIGxpc3QKfQoKCgpmdW5jdGlvbiBjb2RlMmRvd24xKHN0cikgewogICAgdmFyIHMxLCBzMiwgYnRpaCwgdG9ycmVudFVSTDsKICAgIGJ0aWggPSBzdHIudG9Mb2NhbGVVcHBlckNhc2UoKTsKICAgIHMxID0gYnRpaC5zdWJzdHIoMCwgMik7CiAgICBzMiA9IGJ0aWguc3Vic3RyKHN0ci5sZW5ndGggLSAyKTsKICAgIHRvcnJlbnRVUkwgPSAiZGF0YTp0ZXh0L2h0bWwsPG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIiBjb250ZW50PVwiMC4xO3VybD1odHRwczovL3d3dy5rOGR5LnRvcC9wbGF5bTN1OC8/dXJsPW1hZ25ldDo/eHQ9dXJuOmJ0aWg6IiArIGJ0aWggKyAiXCI+IjsKICAgIHJldHVybiB0b3JyZW50VVJMOwp9CgpmdW5jdGlvbiBjb2RlMmRvd24yKHN0cikgewogICAgdmFyIGJ0aWgsIHRvcnJlbnRVUkw7CiAgICBidGloID0gc3RyLnRvTG9jYWxlVXBwZXJDYXNlKCk7CiAgICB0b3JyZW50VVJMID0gImRhdGE6dGV4dC9odG1sLDxtZXRhIGh0dHAtZXF1aXY9XCJyZWZyZXNoXCIgY29udGVudD1cIjAuMTt1cmw9aHR0cHM6Ly9tLmp1bnhpMTIzLmNvbS9wbGF5bTN1OC8/dXJsPW1hZ25ldDo/eHQ9dXJuOmJ0aWg6IiArIGJ0aWggKyAiXCI+IjsKICAgIHJldHVybiB0b3JyZW50VVJMOwp9CmZ1bmN0aW9uIGNvZGUyZG93bjMoc3RyKSB7CiAgICB2YXIgYnRpaCwgdG9ycmVudFVSTDsKICAgIGJ0aWggPSBzdHIudG9Mb2NhbGVVcHBlckNhc2UoKTsKICAgIHRvcnJlbnRVUkwgPSAiZGF0YTp0ZXh0L2h0bWwsPG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIiBjb250ZW50PVwiMC4xO3VybD1odHRwczovL3BsYXllci55dW5ib3cuY24vcGxheW0zdTgvP3VybD1tYWduZXQ6P3h0PXVybjpidGloOiIgKyBidGloICsgIlwiPiI7CiAgICByZXR1cm4gdG9ycmVudFVSTDsKfQoKZnVuY3Rpb24gaW5jbHVkZShUaGluZ3Msb2JqKSB7CiAgICBmb3IgKHZhciBpID0gVGhpbmdzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgaWYgKCQoVGhpbmdzW2ldKS5hdHRyKCdocmVmJyk9PT0kKG9iaikuYXR0cignaHJlZicpKXsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBzZXRDc3MoKXsKICAgICQoJ2hlYWQnKS5hcHBlbmQoJzxzdHlsZT4uY29sb3Ixe2JhY2tncm91bmQtY29sb3I6I0ZGRUIzQn0uY29sb3Iye2JhY2tncm91bmQtY29sb3I6I0Y0NDMzNn0uY29sb3Ize2JhY2tncm91bmQtY29sb3I6IzRDQUY1MH1hLnd4ei1heyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO21hcmdpbi1sZWZ0OjVweDtoZWlnaHQ6IDIwcHg7d2lkdGg6IDIwcHg7YmFja2dyb3VuZC1zaXplOiAyMHB4O2JvcmRlci1yYWRpdXM6IDUwJTtiYWNrZ3JvdW5kLWltYWdlOiB1cmwoImh0dHA6Ly9kZW1vLnNjLmNoaW5hei5jb20vRmlsZXMvcGljL2ljb25zLzQyMDQvMy5wbmciKTt2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO308L3N0eWxlPicpOwp9CgpmdW5jdGlvbiBnZXRBbGxUb3JyZW50c05ldygpIHsKICAgIHZhciByYXdub2RlcyA9ICQoJ2FbaHJlZl49Im1hZ25ldCJdJykuZ2V0KCk7CiAgICB2YXIgbm9kZXMgPSBbXTsKICAgIHZhciBjb2RlTGlzdCA9IFtdOwogICAgdmFyIGxpc3RMZW4gPSAwOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPHJhd25vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYoIWluY2x1ZGUobm9kZXMscmF3bm9kZXNbaV0pKXsKICAgICAgICAgICAgbm9kZXMucHVzaChyYXdub2Rlc1tpXSk7CiAgICAgICAgfQogICAgfQogICAgY29kZUxpc3QgPSBnZXRBbGxNYWduZXQobm9kZXMpOwogICAgbGlzdExlbiA9IGNvZGVMaXN0Lmxlbmd0aDsKICAgIHNldENzcygpOwoKICAgIGlmIChsaXN0TGVuICE9PSAwKSB7IC8vcHJhc2UgYWxsIG1hZ25ldCBoZXJmIG5vZGVzIGludG8gc3RyaW5nCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0TGVuOyBpKyspIHsKICAgICAgICAgICAgJChub2Rlc1tpXSkuYWZ0ZXIoJChub2Rlc1tpXSkuY2xvbmUoKS5hZGRDbGFzcygnd3h6LWEgY29sb3IzJykuZW1wdHkoKS5hdHRyKCJ0YXJnZXQiLCJfYmxhbmsiKS5hdHRyKCJ0aXRsZSIsIlBsYXkiICkuYXR0cigiaHJlZiIsIGNvZGUyZG93bjMoY29kZUxpc3RbaV0pKSk7CiAgICAgICAgICAgICQobm9kZXNbaV0pLmFmdGVyKCQobm9kZXNbaV0pLmNsb25lKCkuYWRkQ2xhc3MoJ3d4ei1hIGNvbG9yMScpLmVtcHR5KCkuYXR0cigidGFyZ2V0IiwiX2JsYW5rIikuYXR0cigidGl0bGUiLCJQbGF5IiApLmF0dHIoImhyZWYiLCBjb2RlMmRvd24xKGNvZGVMaXN0W2ldKSkpOwogICAgICAgICAgICAkKG5vZGVzW2ldKS5hZnRlcigkKG5vZGVzW2ldKS5jbG9uZSgpLmFkZENsYXNzKCd3eHotYSBjb2xvcjInKS5lbXB0eSgpLmF0dHIoInRhcmdldCIsIl9ibGFuayIpLmF0dHIoInRpdGxlIiwiUGxheSIgKS5hdHRyKCJocmVmIiwgY29kZTJkb3duMihjb2RlTGlzdFtpXSkpKTsKICAgICAgICB9CiAgICB9CiAgICAkKCcud3h6LWEnKS5jc3MoJ2InLCdkJyk7Cn0KCgpmdW5jdGlvbiBnZXRBbGxUb3JyZW50cygpIHsKICAgIHZhciBub2RlcyA9ICQoJ2FbaHJlZl49Im1hZ25ldCJdJyk7CiAgICB2YXIgY29kZUxpc3QgPSBbXTsKICAgIHZhciBsaXN0TGVuID0gMDsKICAgIHZhciBpID0gMDsKICAgIGNvZGVMaXN0ID0gZ2V0QWxsTWFnbmV0KG5vZGVzKTsKICAgIGxpc3RMZW4gPSBjb2RlTGlzdC5sZW5ndGg7CiAgICBpZiAobGlzdExlbiAhPT0gMCkgeyAvL3ByYXNlIGFsbCBtYWduZXQgaGVyZiBub2RlcyBpbnRvIHN0cmluZwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0TGVuOyBpKyspIHsKICAgICAgICAgICAgJChub2Rlc1tpXSkuYWZ0ZXIoJChub2Rlc1tpXSkuY2xvbmUoKS5lbXB0eSgpLmh0bWwoIltCVF8yXSIpLmF0dHIoInRhcmdldCIsIl9ibGFuayIpLmF0dHIoInRpdGxlIiwiZG93bmxvYWQgdG9ycmVudCBmcm9tIHRvcmNhY2hlIiApLmF0dHIoImhyZWYiLCBjb2RlMmRvd24zKGNvZGVMaXN0W2ldKSkpOwogICAgICAgIH0KICAgIH0KfQoKdmFyIGk9MDsKCgp2YXIgdD13aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7IC8vd2FpdCAyIHNlY29uZHMgdG8gZXhlY3V0ZSBnZXRBbGxUb3JyZW50cygpIGZ1bmN0aW9uCiAgICBpZigkKCdhW2hyZWZePSJtYWduZXQiXScpLmxlbmd0aD4wfHxpPjIwKXsKICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0KTsKICAgICAgICBnZXRBbGxUb3JyZW50c05ldygpOwogICAgfWVsc2V7CiAgICAgICAgaSsrOwogICAgfQp9LCA1MDApOw=="},{"name":"Easy offline","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://*/*","http*://pan.baidu.com/*","http*://115.com/*","https://www.furk.net/*","https://www.seedr.cc/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970096},"enabled":true,"position":23,"file_url":"https://greasyfork.org/scripts/22590-%E4%B8%80%E9%94%AE%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/code/%E4%B8%80%E9%94%AE%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD.user.js","uuid":"08e718ea-29e6-4f9a-862a-22e56f7bf3d6","source":""},{"name":"破解VIP会员视频集合","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://*.bilibili.com/blackboard/*"],"orig_includes":[],"orig_matches":["*://*.iqiyi.com/*","*://*.youku.com/*","*://*.le.com/*","*://*.letv.com/*","*://v.qq.com/*","*://*.tudou.com/*","*://*.mgtv.com/*","*://film.sohu.com/*","*://tv.sohu.com/*","*://*.acfun.cn/v/*","*://*.bilibili.com/*","*://vip.1905.com/play/*","*://*.pptv.com/*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://*.fun.tv/vplay/*","*://*.wasu.cn/Play/show/*","*://*.56.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{},"ts":1503129970096},"enabled":true,"position":24,"file_url":"https://greasyfork.org/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88/code/%E7%A0%B4%E8%A7%A3VIP%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88.user.js","uuid":"0ee7cb74-3933-4a6a-85cc-b79bbfde0136","source":""},{"name":"网盘自动填写密码【增强版】","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http*://*.pcs.baidu.com/*","http*://*.baidupcs.com/*","http*://*:8666/file/*","http*://*.baidu.com/file/*","http*://index.baidu.com/*","http*://*.gov/*","http*://*.gov.cn/*","http*://*.taobao.com/*","http*://*.tmall.com/*","http*://*.alimama.com/*","http*://*.jd.com/*","http://*.ctrip.com/*","https://*.evernote.com/*","https://*.yinxiang.com/*","/^https?://(localhost|10\\.|192\\.|127\\.)/","/https?://www.baidu.com/(?:s|baidu)\\?/","http*://www.zhihu.com/question/*/answers/created"],"orig_includes":["http://*","https://*","http://pan.baidu.com/s/*","http://eyun.baidu.com/s/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970096},"enabled":true,"position":25,"file_url":"https://greasyfork.org/scripts/13463-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81-%E5%A2%9E%E5%BC%BA%E7%89%88/code/%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81%E3%80%90%E5%A2%9E%E5%BC%BA%E7%89%88%E3%80%91.user.js","uuid":"8bf580d1-9ded-424c-9c25-d57943ee3482","source":""},{"name":"网页限制解除","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970096},"enabled":true,"position":26,"file_url":"https://greasyfork.org/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4/code/%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4.user.js","uuid":"66a2bb93-051a-4616-9dde-79ca457edbc3","source":""},{"name":"navigator.plugins spoofing","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://www.panda.tv/roomframe/*","http://www.kafan.cn/home.php?mod=spacecp&ac=avatar"],"orig_includes":["http://play.baidu.com/*","http://fm.baidu.com/*","*://www.baidu.com/","http://5sing.kugou.com/*","http://www.beiwo.ac/*","http://www.dongting.com/*","http://fm.dongting.com/*","http://www.duole.com/*","*://music.douban.com/*","http://papa.me/*","http://www.1ting.com/*","http://www.9ku.com/*","http://www.666ccc.com/*","http://www.yue365.com/*","http://dict.cn/*","*://www.duonao.tv/*","http://www.webtoons.com/*","http://v.rongkuai.com/play.html?course_id=*","http://www.panda.tv/*","http://www.kafan.cn/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970111},"enabled":true,"position":27,"file_url":"https://greasyfork.org/scripts/6668-navigator-plugins-spoofing/code/navigatorplugins%20spoofing.user.js","uuid":"83fd4619-447f-4b35-a45f-e7092375d132","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBuYXZpZ2F0b3IucGx1Z2lucyBzcG9vZmluZwovLyBAbmFtZXNwYWNlICAgIGFhYWEwMDdjbiAKLy8gQGF1dGhvciAgICAgIGFhYWEwMDdjbiAKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly9wbGF5LmJhaWR1LmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwOi8vZm0uYmFpZHUuY29tLyoKLy8gQGluY2x1ZGUgICAgICo6Ly93d3cuYmFpZHUuY29tLwovLyBAaW5jbHVkZSAgICAgaHR0cDovLzVzaW5nLmt1Z291LmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwOi8vd3d3LmJlaXdvLmFjLyoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly93d3cuZG9uZ3RpbmcuY29tLyoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly9mbS5kb25ndGluZy5jb20vKgovLyBAaW5jbHVkZSAgICAgaHR0cDovL3d3dy5kdW9sZS5jb20vKgovLyBAaW5jbHVkZSAgICAgKjovL211c2ljLmRvdWJhbi5jb20vKgovLyBAaW5jbHVkZSAgICAgaHR0cDovL3BhcGEubWUvKgovLyBAaW5jbHVkZSAgICBodHRwOi8vd3d3LjF0aW5nLmNvbS8qCi8vIEBpbmNsdWRlICAgIGh0dHA6Ly93d3cuOWt1LmNvbS8qCi8vIEBpbmNsdWRlICAgIGh0dHA6Ly93d3cuNjY2Y2NjLmNvbS8qCi8vIEBpbmNsdWRlICAgIGh0dHA6Ly93d3cueXVlMzY1LmNvbS8qCi8vIEBpbmNsdWRlICAgIGh0dHA6Ly9kaWN0LmNuLyoKLy8gQGluY2x1ZGUgICAgKjovL3d3dy5kdW9uYW8udHYvKgovLyBAaW5jbHVkZSAgICBodHRwOi8vd3d3LndlYnRvb25zLmNvbS8qCi8vIEBpbmNsdWRlICAgIGh0dHA6Ly92LnJvbmdrdWFpLmNvbS9wbGF5Lmh0bWw/Y291cnNlX2lkPSoKLy8gQGluY2x1ZGUgICAgaHR0cDovL3d3dy5wYW5kYS50di8qCi8vIEBleGNsdWRlICAgIGh0dHA6Ly93d3cucGFuZGEudHYvcm9vbWZyYW1lLyoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly93d3cua2FmYW4uY24vKgovLyBAZXhjbHVkZSAgIGh0dHA6Ly93d3cua2FmYW4uY24vaG9tZS5waHA/bW9kPXNwYWNlY3AmYWM9YXZhdGFyCi8vIEBkZXNjcmlwdGlvbiAgICDljrvpmaTnvZHnq5nnmoRmbGFzaOaPkuS7tuajgOa1i++8jOWunueOsGh0bWw15pKt5pS+44CCCi8vIEBob21lcGFnZSAgICBodHRwczovL3d3dy5maXJlZm94Lm5ldC5jbi9yZWFkLTQ5OTc5LTEjcmVhZF8zNDEzMjAKLy8gQHZlcnNpb24gICAgIDMuMQovLyBAZ3JhbnQgICAgICAgbm9uZQovLyBAcnVuLWF0ICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gPT0vVXNlclNjcmlwdD09Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShuYXZpZ2F0b3IsICdwbHVnaW5zJywgewogIGdldDogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsgbGVuZ3RoOiAwIH07CiAgfQp9KTs="},{"name":"城通网盘皮皮盘显示正确下载地址","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*ctfile.com*","*pipipan.com*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970111},"enabled":true,"position":28,"file_url":"https://greasyfork.org/scripts/25270-%E5%9F%8E%E9%80%9A%E7%BD%91%E7%9B%98%E7%9A%AE%E7%9A%AE%E7%9B%98%E6%98%BE%E7%A4%BA%E6%AD%A3%E7%A1%AE%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/code/%E5%9F%8E%E9%80%9A%E7%BD%91%E7%9B%98%E7%9A%AE%E7%9A%AE%E7%9B%98%E6%98%BE%E7%A4%BA%E6%AD%A3%E7%A1%AE%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80.user.js","uuid":"6d078419-3192-4283-917d-114bdf2188f6","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICBjdGZpbGVANDA1NjQ3ODI1QHFxLmNvbQovLyBAbmFtZSAgICAgICAgIOWfjumAmue9keebmOearuearuebmOaYvuekuuato+ehruS4i+i9veWcsOWdgAovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly93ZWliby5jb20vcGVuZGF2ZQovLyBAdmVyc2lvbiAgICAgIDAuNAovLyBAZGVzY3JpcHRpb24gIOWfjumAmue9keebmOearuearuebmOaYvuekuuato+ehruS4i+i9veWcsOWdgCHljrvmjonpga7mjKHnmoRwb3BqdW1w6YCP5piO5bGC77yB6Ieq5Yqo6Lez5Yiw56ys5LqM6aG177yBCi8vIEBhdXRob3IgICAgICAgNDA1NjQ3ODI1QHFxLmNvbQovLyBAaW5jbHVkZSAgICAgICpjdGZpbGUuY29tKgovLyBAaW5jbHVkZSAgICAgICpwaXBpcGFuLmNvbSoKLy8gQHJlcXVpcmUgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9jbGlwYm9hcmQuanMvMS41LjEzL2NsaXBib2FyZC5taW4uanMKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovL+esrOS4gOmhteiHquWKqOeCueWHu+aMiemSrgppZihsb2NhdGlvbi5ocmVmLm1hdGNoKC9jdGZpbGVcLmNvbXxwaXBpcGFuXC5jb20vZykgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZyZWVfZG93bl9saW5rJykpewoJZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZyZWVfZG93bl9saW5rJykuY2xpY2soKTsKfQovL+aciXBvcOW5v+WRiueahOenu+mZpAp2YXIgcG9wTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZio9InBvcGp1bXAucGhwIl0nKTsKaWYocG9wTm9kZSAhPT0gbnVsbCl7Cglwb3BOb2RlLnJlbW92ZSgpOwp9Ci8v6I635Y+W56ys5LqM6aG16YeM55qE55yf5a6e5LiL6L295Zyw5Z2AIOW7uueri2NvcHnmjInpkq4KdmFyIGRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZnJlZV9kb3duX2xpbmsnKS5vbmNsaWNrLnRvU3RyaW5nKCkubWF0Y2goLygoaHR0cHxmdHB8aHR0cHMpOlwvXC8pKChbYS16QS1aMC05XC5fLV0rXC5bYS16QS1aXXsyLDZ9KXwoWzAtOV17MSwzfVwuWzAtOV17MSwzfVwuWzAtOV17MSwzfVwuWzAtOV17MSwzfSkpKDpbMC05XXsxLDR9KSooXC9bYS16QS1aMC05XCYlX1wuXC8tfi1dKik/L2dpKVswXTsKc2V0VGltZW91dChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZnJlZV9kb3duX2xpbmtbb25jbGlja149ImZyZWVfZG93bl9hY3Rpb24iXScpLm5leHRTaWJsaW5nLmlubmVySFRNTCA9ICc8YnV0dG9uIGNsYXNzPSJteWJ0biIgZGF0YS1jbGlwYm9hcmQtdGV4dD0iJysgZG93biArJyI+Q29weeecn+WunuS4i+i9veWcsOWdgDwvYnV0dG9uPicsMjAwKTsKdmFyIGNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJy5teWJ0bicpOwoKY2xpcGJvYXJkLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oZSkgewoJY29uc29sZS5sb2coZSk7Cn0pOwoKY2xpcGJvYXJkLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHsKCWNvbnNvbGUubG9nKGUpOwp9KTsK"},{"name":"Zhihu Link Redirect Fix","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*.zhihu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1503129970111},"enabled":true,"position":29,"file_url":"https://greasyfork.org/scripts/20431-zhihu-link-redirect-fix/code/Zhihu%20Link%20Redirect%20Fix.user.js","uuid":"3fb88bc8-a3b3-47b2-a704-f35ecfe4c7d5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgICAgWmhpaHUgTGluayBSZWRpcmVjdCBGaXgKLy8gQG5hbWU6emgtQ04gICAgICAgICAg55+l5LmO55yf5a6e6ZO+5o6l5Zyw5Z2A6YeN5a6a5ZCRCi8vIEBuYW1lOnpoLVRXICAgICAgICAgIOefpeS5juecn+WvpumPiOaOpeWcsOWdgOmHjeWumuWQkQovLyBAZGVzY3JpcHRpb24gICAgICAgICBBdm9pZCBsaW5rIHJlZGlyZWN0IGZvciB6aGlodS5jb20KLy8gQGRlc2NyaXB0aW9uOnpoLUNOICAg6K6p55+l5LmO572R6aG15Lit55qE56uZ5aSW6ZO+5o6l55u05o6l6Lez6L2s6Iez55uu5qCH572R5Z2A77yM6ICM5LiN57uP6L+H5LiA5Liq5LqM5qyh6Lez6L2s6aG16Z2i44CC6YeN5a6a5ZCR5aSE55CG5bCG5Lya5Zyo54K55Ye76ZO+5o6l556s6Ze06Ieq5Yqo6Kem5Y+RCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyAgIOiuk+efpeS5jue2sumggeS4reeahOermeWklumPiOaOpeebtOaOpei3s+i9ieiHs+ebruaomee2suWdgO+8jOiAjOS4jee2k+mBjuWjueWAi+S6jOasoei3s+i9iemggemdouOAgumHjeWumuWQkeiZleeQhuWwh+acg+WcqOm7nuaTiumPiOaOpeeerOmWk+iHquWLleinuOeZvAoKLy8gQGF1dGhvciAgICAgICAgICAgICAgTW9zaGVsCi8vIEBuYW1lc3BhY2UgICAgICAgICAgIGh0dHBzOi8vaHp5LnB3Ci8vIEBob21lcGFnZVVSTCAgICAgICAgIGh0dHBzOi8vaHp5LnB3L3AvMjA1NgovLyBAc3VwcG9ydFVSTCAgICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vaDJ5L2xpbmstZml4Ci8vIEBsaWNlbnNlICAgICAgICAgICAgIEdQTC0zLjAKLy8gQGljb24gICAgICAgICAgICAgICAgaHR0cHM6Ly9waWMxLnpoaW1nLmNvbS8yZTMzZjA2M2YxYmQ5MjIxZGY5NjcyMTkxNjdiNWRlMF9tLmpwZwoKLy8gQGdyYW50ICAgICAgICAgICAgICAgbm9uZQovLyBAcnVuLWF0ICAgICAgICAgICAgICBkb2N1bWVudC1zdGFydAovLyBAaW5jbHVkZSAgICAgICAgICAgICAqLnpoaWh1LmNvbS8qCgovLyBAZGF0ZSAgICAgICAgICAgICAgICAwNi8xMC8yMDE2Ci8vIEBtb2RpZmllZCAgICAgICAgICAgIDAyLzE1LzIwMTcKLy8gQHZlcnNpb24gICAgICAgICAgICAgMS4zLjEuNgovLyA9PS9Vc2VyU2NyaXB0PT0KCgppZihsb2NhdGlvbi5ob3N0PT09J2xpbmsuemhpaHUuY29tJykgewogICAgbGV0IHJlZ1JldCA9IGxvY2F0aW9uLnNlYXJjaC5tYXRjaCgvdGFyZ2V0PSguKz8pKCZ8JCkvKTsKICAgIGlmKHJlZ1JldCAmJiByZWdSZXQubGVuZ3RoPT0zKQogICAgICAgIGxvY2F0aW9uLmhyZWYgPSBkZWNvZGVVUklDb21wb25lbnQocmVnUmV0WzFdKTsKfQplbHNlCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXsKICAgICAgICBsZXQgZG9tID0gZS50YXJnZXQsCiAgICAgICAgICAgIG1heF90aW1lcyA9IDM7CiAgICAgICAgd2hpbGUoZG9tICYmIG1heF90aW1lcy0tKSB7CiAgICAgICAgICAgIGlmKGRvbS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpPT09J0EnKSB7CiAgICAgICAgICAgICAgICBsZXQgcmVnUmV0ID0gZG9tLnNlYXJjaC5tYXRjaCgvdGFyZ2V0PSguKz8pKCZ8JCkvKTsKICAgICAgICAgICAgICAgIGlmKHJlZ1JldCAmJiByZWdSZXQubGVuZ3RoPT0zKQogICAgICAgICAgICAgICAgICAgIGRvbS5ocmVmID0gZGVjb2RlVVJJQ29tcG9uZW50KHJlZ1JldFsxXSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZG9tID0gZG9tLnBhcmVudE5vZGU7CiAgICAgICAgfQogICAgfSk7Cg=="}]}